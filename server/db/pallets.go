// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Pallet is an object representing the database table.
type Pallet struct {
	ID          string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Code        string      `db:"code" boil:"code" json:"code" toml:"code" yaml:"code"`
	Description string      `db:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	ContainerID null.String `db:"container_id" boil:"container_id" json:"container_id,omitempty" toml:"container_id" yaml:"container_id,omitempty"`
	Archived    bool        `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt  null.Time   `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt   time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedByID string      `db:"created_by_id" boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`

	R *palletR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L palletL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PalletColumns = struct {
	ID          string
	Code        string
	Description string
	ContainerID string
	Archived    string
	ArchivedAt  string
	UpdatedAt   string
	CreatedAt   string
	CreatedByID string
}{
	ID:          "id",
	Code:        "code",
	Description: "description",
	ContainerID: "container_id",
	Archived:    "archived",
	ArchivedAt:  "archived_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
	CreatedByID: "created_by_id",
}

// Generated where

var PalletWhere = struct {
	ID          whereHelperstring
	Code        whereHelperstring
	Description whereHelperstring
	ContainerID whereHelpernull_String
	Archived    whereHelperbool
	ArchivedAt  whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
	CreatedByID whereHelperstring
}{
	ID:          whereHelperstring{field: "\"pallets\".\"id\""},
	Code:        whereHelperstring{field: "\"pallets\".\"code\""},
	Description: whereHelperstring{field: "\"pallets\".\"description\""},
	ContainerID: whereHelpernull_String{field: "\"pallets\".\"container_id\""},
	Archived:    whereHelperbool{field: "\"pallets\".\"archived\""},
	ArchivedAt:  whereHelpernull_Time{field: "\"pallets\".\"archived_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"pallets\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"pallets\".\"created_at\""},
	CreatedByID: whereHelperstring{field: "\"pallets\".\"created_by_id\""},
}

// PalletRels is where relationship names are stored.
var PalletRels = struct {
	Container string
	CreatedBy string
	Cartons   string
}{
	Container: "Container",
	CreatedBy: "CreatedBy",
	Cartons:   "Cartons",
}

// palletR is where relationships are stored.
type palletR struct {
	Container *Container
	CreatedBy *User
	Cartons   CartonSlice
}

// NewStruct creates a new relationship struct
func (*palletR) NewStruct() *palletR {
	return &palletR{}
}

// palletL is where Load methods for each relationship are stored.
type palletL struct{}

var (
	palletAllColumns            = []string{"id", "code", "description", "container_id", "archived", "archived_at", "updated_at", "created_at", "created_by_id"}
	palletColumnsWithoutDefault = []string{"code", "container_id", "archived_at", "created_by_id"}
	palletColumnsWithDefault    = []string{"id", "description", "archived", "updated_at", "created_at"}
	palletPrimaryKeyColumns     = []string{"id"}
)

type (
	// PalletSlice is an alias for a slice of pointers to Pallet.
	// This should generally be used opposed to []Pallet.
	PalletSlice []*Pallet
	// PalletHook is the signature for custom Pallet hook methods
	PalletHook func(boil.Executor, *Pallet) error

	palletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	palletType                 = reflect.TypeOf(&Pallet{})
	palletMapping              = queries.MakeStructMapping(palletType)
	palletPrimaryKeyMapping, _ = queries.BindMapping(palletType, palletMapping, palletPrimaryKeyColumns)
	palletInsertCacheMut       sync.RWMutex
	palletInsertCache          = make(map[string]insertCache)
	palletUpdateCacheMut       sync.RWMutex
	palletUpdateCache          = make(map[string]updateCache)
	palletUpsertCacheMut       sync.RWMutex
	palletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var palletBeforeInsertHooks []PalletHook
var palletBeforeUpdateHooks []PalletHook
var palletBeforeDeleteHooks []PalletHook
var palletBeforeUpsertHooks []PalletHook

var palletAfterInsertHooks []PalletHook
var palletAfterSelectHooks []PalletHook
var palletAfterUpdateHooks []PalletHook
var palletAfterDeleteHooks []PalletHook
var palletAfterUpsertHooks []PalletHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pallet) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range palletBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pallet) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range palletBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pallet) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range palletBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pallet) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range palletBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pallet) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range palletAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pallet) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range palletAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pallet) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range palletAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pallet) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range palletAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pallet) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range palletAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPalletHook registers your hook function for all future operations.
func AddPalletHook(hookPoint boil.HookPoint, palletHook PalletHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		palletBeforeInsertHooks = append(palletBeforeInsertHooks, palletHook)
	case boil.BeforeUpdateHook:
		palletBeforeUpdateHooks = append(palletBeforeUpdateHooks, palletHook)
	case boil.BeforeDeleteHook:
		palletBeforeDeleteHooks = append(palletBeforeDeleteHooks, palletHook)
	case boil.BeforeUpsertHook:
		palletBeforeUpsertHooks = append(palletBeforeUpsertHooks, palletHook)
	case boil.AfterInsertHook:
		palletAfterInsertHooks = append(palletAfterInsertHooks, palletHook)
	case boil.AfterSelectHook:
		palletAfterSelectHooks = append(palletAfterSelectHooks, palletHook)
	case boil.AfterUpdateHook:
		palletAfterUpdateHooks = append(palletAfterUpdateHooks, palletHook)
	case boil.AfterDeleteHook:
		palletAfterDeleteHooks = append(palletAfterDeleteHooks, palletHook)
	case boil.AfterUpsertHook:
		palletAfterUpsertHooks = append(palletAfterUpsertHooks, palletHook)
	}
}

// One returns a single pallet record from the query.
func (q palletQuery) One(exec boil.Executor) (*Pallet, error) {
	o := &Pallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for pallets")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pallet records from the query.
func (q palletQuery) All(exec boil.Executor) (PalletSlice, error) {
	var o []*Pallet

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Pallet slice")
	}

	if len(palletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pallet records in the query.
func (q palletQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count pallets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q palletQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if pallets exists")
	}

	return count > 0, nil
}

// Container pointed to by the foreign key.
func (o *Pallet) Container(mods ...qm.QueryMod) containerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContainerID),
	}

	queryMods = append(queryMods, mods...)

	query := Containers(queryMods...)
	queries.SetFrom(query.Query, "\"containers\"")

	return query
}

// CreatedBy pointed to by the foreign key.
func (o *Pallet) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Cartons retrieves all the carton's Cartons with an executor.
func (o *Pallet) Cartons(mods ...qm.QueryMod) cartonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cartons\".\"pallet_id\"=?", o.ID),
	)

	query := Cartons(queryMods...)
	queries.SetFrom(query.Query, "\"cartons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cartons\".*"})
	}

	return query
}

// LoadContainer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (palletL) LoadContainer(e boil.Executor, singular bool, maybePallet interface{}, mods queries.Applicator) error {
	var slice []*Pallet
	var object *Pallet

	if singular {
		object = maybePallet.(*Pallet)
	} else {
		slice = *maybePallet.(*[]*Pallet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &palletR{}
		}
		if !queries.IsNil(object.ContainerID) {
			args = append(args, object.ContainerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &palletR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ContainerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ContainerID) {
				args = append(args, obj.ContainerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`containers`), qm.WhereIn(`containers.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Container")
	}

	var resultSlice []*Container
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Container")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for containers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for containers")
	}

	if len(palletAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Container = foreign
		if foreign.R == nil {
			foreign.R = &containerR{}
		}
		foreign.R.Pallets = append(foreign.R.Pallets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ContainerID, foreign.ID) {
				local.R.Container = foreign
				if foreign.R == nil {
					foreign.R = &containerR{}
				}
				foreign.R.Pallets = append(foreign.R.Pallets, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (palletL) LoadCreatedBy(e boil.Executor, singular bool, maybePallet interface{}, mods queries.Applicator) error {
	var slice []*Pallet
	var object *Pallet

	if singular {
		object = maybePallet.(*Pallet)
	} else {
		slice = *maybePallet.(*[]*Pallet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &palletR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &palletR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(palletAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByPallets = append(foreign.R.CreatedByPallets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByPallets = append(foreign.R.CreatedByPallets, local)
				break
			}
		}
	}

	return nil
}

// LoadCartons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (palletL) LoadCartons(e boil.Executor, singular bool, maybePallet interface{}, mods queries.Applicator) error {
	var slice []*Pallet
	var object *Pallet

	if singular {
		object = maybePallet.(*Pallet)
	} else {
		slice = *maybePallet.(*[]*Pallet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &palletR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &palletR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`cartons`), qm.WhereIn(`cartons.pallet_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cartons")
	}

	var resultSlice []*Carton
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cartons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cartons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cartons")
	}

	if len(cartonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Cartons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartonR{}
			}
			foreign.R.Pallet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PalletID) {
				local.R.Cartons = append(local.R.Cartons, foreign)
				if foreign.R == nil {
					foreign.R = &cartonR{}
				}
				foreign.R.Pallet = local
				break
			}
		}
	}

	return nil
}

// SetContainer of the pallet to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Pallets.
func (o *Pallet) SetContainer(exec boil.Executor, insert bool, related *Container) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"container_id"}),
		strmangle.WhereClause("\"", "\"", 2, palletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ContainerID, related.ID)
	if o.R == nil {
		o.R = &palletR{
			Container: related,
		}
	} else {
		o.R.Container = related
	}

	if related.R == nil {
		related.R = &containerR{
			Pallets: PalletSlice{o},
		}
	} else {
		related.R.Pallets = append(related.R.Pallets, o)
	}

	return nil
}

// RemoveContainer relationship.
// Sets o.R.Container to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Pallet) RemoveContainer(exec boil.Executor, related *Container) error {
	var err error

	queries.SetScanner(&o.ContainerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("container_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Container = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Pallets {
		if queries.Equal(o.ContainerID, ri.ContainerID) {
			continue
		}

		ln := len(related.R.Pallets)
		if ln > 1 && i < ln-1 {
			related.R.Pallets[i] = related.R.Pallets[ln-1]
		}
		related.R.Pallets = related.R.Pallets[:ln-1]
		break
	}
	return nil
}

// SetCreatedBy of the pallet to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByPallets.
func (o *Pallet) SetCreatedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, palletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &palletR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByPallets: PalletSlice{o},
		}
	} else {
		related.R.CreatedByPallets = append(related.R.CreatedByPallets, o)
	}

	return nil
}

// AddCartons adds the given related objects to the existing relationships
// of the pallet, optionally inserting them as new records.
// Appends related to o.R.Cartons.
// Sets related.R.Pallet appropriately.
func (o *Pallet) AddCartons(exec boil.Executor, insert bool, related ...*Carton) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PalletID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cartons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pallet_id"}),
				strmangle.WhereClause("\"", "\"", 2, cartonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PalletID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &palletR{
			Cartons: related,
		}
	} else {
		o.R.Cartons = append(o.R.Cartons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartonR{
				Pallet: o,
			}
		} else {
			rel.R.Pallet = o
		}
	}
	return nil
}

// SetCartons removes all previously related items of the
// pallet replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Pallet's Cartons accordingly.
// Replaces o.R.Cartons with related.
// Sets related.R.Pallet's Cartons accordingly.
func (o *Pallet) SetCartons(exec boil.Executor, insert bool, related ...*Carton) error {
	query := "update \"cartons\" set \"pallet_id\" = null where \"pallet_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Cartons {
			queries.SetScanner(&rel.PalletID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Pallet = nil
		}

		o.R.Cartons = nil
	}
	return o.AddCartons(exec, insert, related...)
}

// RemoveCartons relationships from objects passed in.
// Removes related items from R.Cartons (uses pointer comparison, removal does not keep order)
// Sets related.R.Pallet.
func (o *Pallet) RemoveCartons(exec boil.Executor, related ...*Carton) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PalletID, nil)
		if rel.R != nil {
			rel.R.Pallet = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("pallet_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Cartons {
			if rel != ri {
				continue
			}

			ln := len(o.R.Cartons)
			if ln > 1 && i < ln-1 {
				o.R.Cartons[i] = o.R.Cartons[ln-1]
			}
			o.R.Cartons = o.R.Cartons[:ln-1]
			break
		}
	}

	return nil
}

// Pallets retrieves all the records using an executor.
func Pallets(mods ...qm.QueryMod) palletQuery {
	mods = append(mods, qm.From("\"pallets\""))
	return palletQuery{NewQuery(mods...)}
}

// FindPallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPallet(exec boil.Executor, iD string, selectCols ...string) (*Pallet, error) {
	palletObj := &Pallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pallets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, palletObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from pallets")
	}

	return palletObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pallet) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no pallets provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(palletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	palletInsertCacheMut.RLock()
	cache, cached := palletInsertCache[key]
	palletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			palletAllColumns,
			palletColumnsWithDefault,
			palletColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(palletType, palletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(palletType, palletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pallets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pallets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into pallets")
	}

	if !cached {
		palletInsertCacheMut.Lock()
		palletInsertCache[key] = cache
		palletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Pallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pallet) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	palletUpdateCacheMut.RLock()
	cache, cached := palletUpdateCache[key]
	palletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			palletAllColumns,
			palletPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update pallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pallets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, palletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(palletType, palletMapping, append(wl, palletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update pallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for pallets")
	}

	if !cached {
		palletUpdateCacheMut.Lock()
		palletUpdateCache[key] = cache
		palletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q palletQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for pallets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PalletSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), palletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, palletPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in pallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all pallet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pallet) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no pallets provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(palletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	palletUpsertCacheMut.RLock()
	cache, cached := palletUpsertCache[key]
	palletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			palletAllColumns,
			palletColumnsWithDefault,
			palletColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			palletAllColumns,
			palletPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert pallets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(palletPrimaryKeyColumns))
			copy(conflict, palletPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pallets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(palletType, palletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(palletType, palletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert pallets")
	}

	if !cached {
		palletUpsertCacheMut.Lock()
		palletUpsertCache[key] = cache
		palletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Pallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pallet) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Pallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), palletPrimaryKeyMapping)
	sql := "DELETE FROM \"pallets\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for pallets")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q palletQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no palletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for pallets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PalletSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(palletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), palletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, palletPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from pallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for pallets")
	}

	if len(palletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pallet) Reload(exec boil.Executor) error {
	ret, err := FindPallet(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PalletSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), palletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pallets\".* FROM \"pallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, palletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in PalletSlice")
	}

	*o = slice

	return nil
}

// PalletExists checks if the Pallet row exists.
func PalletExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pallets\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if pallets exists")
	}

	return exists, nil
}
