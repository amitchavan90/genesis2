// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Distributor is an object representing the database table.
type Distributor struct {
	ID          string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Code        string    `db:"code" boil:"code" json:"code" toml:"code" yaml:"code"`
	Name        string    `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Archived    bool      `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt  null.Time `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt   time.Time `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedByID string    `db:"created_by_id" boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`

	R *distributorR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L distributorL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DistributorColumns = struct {
	ID          string
	Code        string
	Name        string
	Archived    string
	ArchivedAt  string
	UpdatedAt   string
	CreatedAt   string
	CreatedByID string
}{
	ID:          "id",
	Code:        "code",
	Name:        "name",
	Archived:    "archived",
	ArchivedAt:  "archived_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
	CreatedByID: "created_by_id",
}

// Generated where

var DistributorWhere = struct {
	ID          whereHelperstring
	Code        whereHelperstring
	Name        whereHelperstring
	Archived    whereHelperbool
	ArchivedAt  whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
	CreatedByID whereHelperstring
}{
	ID:          whereHelperstring{field: "\"distributors\".\"id\""},
	Code:        whereHelperstring{field: "\"distributors\".\"code\""},
	Name:        whereHelperstring{field: "\"distributors\".\"name\""},
	Archived:    whereHelperbool{field: "\"distributors\".\"archived\""},
	ArchivedAt:  whereHelpernull_Time{field: "\"distributors\".\"archived_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"distributors\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"distributors\".\"created_at\""},
	CreatedByID: whereHelperstring{field: "\"distributors\".\"created_by_id\""},
}

// DistributorRels is where relationship names are stored.
var DistributorRels = struct {
	CreatedBy string
	Products  string
}{
	CreatedBy: "CreatedBy",
	Products:  "Products",
}

// distributorR is where relationships are stored.
type distributorR struct {
	CreatedBy *User
	Products  ProductSlice
}

// NewStruct creates a new relationship struct
func (*distributorR) NewStruct() *distributorR {
	return &distributorR{}
}

// distributorL is where Load methods for each relationship are stored.
type distributorL struct{}

var (
	distributorAllColumns            = []string{"id", "code", "name", "archived", "archived_at", "updated_at", "created_at", "created_by_id"}
	distributorColumnsWithoutDefault = []string{"code", "name", "archived_at", "created_by_id"}
	distributorColumnsWithDefault    = []string{"id", "archived", "updated_at", "created_at"}
	distributorPrimaryKeyColumns     = []string{"id"}
)

type (
	// DistributorSlice is an alias for a slice of pointers to Distributor.
	// This should generally be used opposed to []Distributor.
	DistributorSlice []*Distributor
	// DistributorHook is the signature for custom Distributor hook methods
	DistributorHook func(boil.Executor, *Distributor) error

	distributorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	distributorType                 = reflect.TypeOf(&Distributor{})
	distributorMapping              = queries.MakeStructMapping(distributorType)
	distributorPrimaryKeyMapping, _ = queries.BindMapping(distributorType, distributorMapping, distributorPrimaryKeyColumns)
	distributorInsertCacheMut       sync.RWMutex
	distributorInsertCache          = make(map[string]insertCache)
	distributorUpdateCacheMut       sync.RWMutex
	distributorUpdateCache          = make(map[string]updateCache)
	distributorUpsertCacheMut       sync.RWMutex
	distributorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var distributorBeforeInsertHooks []DistributorHook
var distributorBeforeUpdateHooks []DistributorHook
var distributorBeforeDeleteHooks []DistributorHook
var distributorBeforeUpsertHooks []DistributorHook

var distributorAfterInsertHooks []DistributorHook
var distributorAfterSelectHooks []DistributorHook
var distributorAfterUpdateHooks []DistributorHook
var distributorAfterDeleteHooks []DistributorHook
var distributorAfterUpsertHooks []DistributorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Distributor) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Distributor) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Distributor) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Distributor) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Distributor) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Distributor) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Distributor) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Distributor) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Distributor) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range distributorAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDistributorHook registers your hook function for all future operations.
func AddDistributorHook(hookPoint boil.HookPoint, distributorHook DistributorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		distributorBeforeInsertHooks = append(distributorBeforeInsertHooks, distributorHook)
	case boil.BeforeUpdateHook:
		distributorBeforeUpdateHooks = append(distributorBeforeUpdateHooks, distributorHook)
	case boil.BeforeDeleteHook:
		distributorBeforeDeleteHooks = append(distributorBeforeDeleteHooks, distributorHook)
	case boil.BeforeUpsertHook:
		distributorBeforeUpsertHooks = append(distributorBeforeUpsertHooks, distributorHook)
	case boil.AfterInsertHook:
		distributorAfterInsertHooks = append(distributorAfterInsertHooks, distributorHook)
	case boil.AfterSelectHook:
		distributorAfterSelectHooks = append(distributorAfterSelectHooks, distributorHook)
	case boil.AfterUpdateHook:
		distributorAfterUpdateHooks = append(distributorAfterUpdateHooks, distributorHook)
	case boil.AfterDeleteHook:
		distributorAfterDeleteHooks = append(distributorAfterDeleteHooks, distributorHook)
	case boil.AfterUpsertHook:
		distributorAfterUpsertHooks = append(distributorAfterUpsertHooks, distributorHook)
	}
}

// One returns a single distributor record from the query.
func (q distributorQuery) One(exec boil.Executor) (*Distributor, error) {
	o := &Distributor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for distributors")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Distributor records from the query.
func (q distributorQuery) All(exec boil.Executor) (DistributorSlice, error) {
	var o []*Distributor

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Distributor slice")
	}

	if len(distributorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Distributor records in the query.
func (q distributorQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count distributors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q distributorQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if distributors exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Distributor) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Products retrieves all the product's Products with an executor.
func (o *Distributor) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"distributor_id\"=?", o.ID),
	)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"products\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (distributorL) LoadCreatedBy(e boil.Executor, singular bool, maybeDistributor interface{}, mods queries.Applicator) error {
	var slice []*Distributor
	var object *Distributor

	if singular {
		object = maybeDistributor.(*Distributor)
	} else {
		slice = *maybeDistributor.(*[]*Distributor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &distributorR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &distributorR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(distributorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByDistributors = append(foreign.R.CreatedByDistributors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByDistributors = append(foreign.R.CreatedByDistributors, local)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (distributorL) LoadProducts(e boil.Executor, singular bool, maybeDistributor interface{}, mods queries.Applicator) error {
	var slice []*Distributor
	var object *Distributor

	if singular {
		object = maybeDistributor.(*Distributor)
	} else {
		slice = *maybeDistributor.(*[]*Distributor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &distributorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &distributorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`products`), qm.WhereIn(`products.distributor_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Distributor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DistributorID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Distributor = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the distributor to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByDistributors.
func (o *Distributor) SetCreatedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"distributors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, distributorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &distributorR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByDistributors: DistributorSlice{o},
		}
	} else {
		related.R.CreatedByDistributors = append(related.R.CreatedByDistributors, o)
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the distributor, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Distributor appropriately.
func (o *Distributor) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DistributorID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"distributor_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DistributorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &distributorR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Distributor: o,
			}
		} else {
			rel.R.Distributor = o
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// distributor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Distributor's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Distributor's Products accordingly.
func (o *Distributor) SetProducts(exec boil.Executor, insert bool, related ...*Product) error {
	query := "update \"products\" set \"distributor_id\" = null where \"distributor_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Products {
			queries.SetScanner(&rel.DistributorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Distributor = nil
		}

		o.R.Products = nil
	}
	return o.AddProducts(exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Distributor.
func (o *Distributor) RemoveProducts(exec boil.Executor, related ...*Product) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DistributorID, nil)
		if rel.R != nil {
			rel.R.Distributor = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("distributor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

// Distributors retrieves all the records using an executor.
func Distributors(mods ...qm.QueryMod) distributorQuery {
	mods = append(mods, qm.From("\"distributors\""))
	return distributorQuery{NewQuery(mods...)}
}

// FindDistributor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDistributor(exec boil.Executor, iD string, selectCols ...string) (*Distributor, error) {
	distributorObj := &Distributor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"distributors\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, distributorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from distributors")
	}

	return distributorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Distributor) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no distributors provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(distributorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	distributorInsertCacheMut.RLock()
	cache, cached := distributorInsertCache[key]
	distributorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			distributorAllColumns,
			distributorColumnsWithDefault,
			distributorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(distributorType, distributorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(distributorType, distributorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"distributors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"distributors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into distributors")
	}

	if !cached {
		distributorInsertCacheMut.Lock()
		distributorInsertCache[key] = cache
		distributorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Distributor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Distributor) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	distributorUpdateCacheMut.RLock()
	cache, cached := distributorUpdateCache[key]
	distributorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			distributorAllColumns,
			distributorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update distributors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"distributors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, distributorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(distributorType, distributorMapping, append(wl, distributorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update distributors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for distributors")
	}

	if !cached {
		distributorUpdateCacheMut.Lock()
		distributorUpdateCache[key] = cache
		distributorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q distributorQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for distributors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for distributors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DistributorSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), distributorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"distributors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, distributorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in distributor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all distributor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Distributor) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no distributors provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(distributorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	distributorUpsertCacheMut.RLock()
	cache, cached := distributorUpsertCache[key]
	distributorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			distributorAllColumns,
			distributorColumnsWithDefault,
			distributorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			distributorAllColumns,
			distributorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert distributors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(distributorPrimaryKeyColumns))
			copy(conflict, distributorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"distributors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(distributorType, distributorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(distributorType, distributorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert distributors")
	}

	if !cached {
		distributorUpsertCacheMut.Lock()
		distributorUpsertCache[key] = cache
		distributorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Distributor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Distributor) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Distributor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), distributorPrimaryKeyMapping)
	sql := "DELETE FROM \"distributors\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from distributors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for distributors")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q distributorQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no distributorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from distributors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for distributors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DistributorSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(distributorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), distributorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"distributors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, distributorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from distributor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for distributors")
	}

	if len(distributorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Distributor) Reload(exec boil.Executor) error {
	ret, err := FindDistributor(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DistributorSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DistributorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), distributorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"distributors\".* FROM \"distributors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, distributorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in DistributorSlice")
	}

	*o = slice

	return nil
}

// DistributorExists checks if the Distributor row exists.
func DistributorExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"distributors\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if distributors exists")
	}

	return exists, nil
}
