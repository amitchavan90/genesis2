// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserSubtask is an object representing the database table.
type UserSubtask struct {
	ID         string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SubtaskID  null.String `db:"subtask_id" boil:"subtask_id" json:"subtask_id,omitempty" toml:"subtask_id" yaml:"subtask_id,omitempty"`
	UserTaskID null.String `db:"user_task_id" boil:"user_task_id" json:"user_task_id,omitempty" toml:"user_task_id" yaml:"user_task_id,omitempty"`
	Status     string      `db:"status" boil:"status" json:"status" toml:"status" yaml:"status"`
	IsComplete bool        `db:"is_complete" boil:"is_complete" json:"is_complete" toml:"is_complete" yaml:"is_complete"`
	UpdatedAt  time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt  time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userSubtaskR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userSubtaskL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserSubtaskColumns = struct {
	ID         string
	SubtaskID  string
	UserTaskID string
	Status     string
	IsComplete string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	SubtaskID:  "subtask_id",
	UserTaskID: "user_task_id",
	Status:     "status",
	IsComplete: "is_complete",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

// Generated where

var UserSubtaskWhere = struct {
	ID         whereHelperstring
	SubtaskID  whereHelpernull_String
	UserTaskID whereHelpernull_String
	Status     whereHelperstring
	IsComplete whereHelperbool
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"user_subtasks\".\"id\""},
	SubtaskID:  whereHelpernull_String{field: "\"user_subtasks\".\"subtask_id\""},
	UserTaskID: whereHelpernull_String{field: "\"user_subtasks\".\"user_task_id\""},
	Status:     whereHelperstring{field: "\"user_subtasks\".\"status\""},
	IsComplete: whereHelperbool{field: "\"user_subtasks\".\"is_complete\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"user_subtasks\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"user_subtasks\".\"created_at\""},
}

// UserSubtaskRels is where relationship names are stored.
var UserSubtaskRels = struct {
	Subtask  string
	UserTask string
}{
	Subtask:  "Subtask",
	UserTask: "UserTask",
}

// userSubtaskR is where relationships are stored.
type userSubtaskR struct {
	Subtask  *Subtask
	UserTask *UserTask
}

// NewStruct creates a new relationship struct
func (*userSubtaskR) NewStruct() *userSubtaskR {
	return &userSubtaskR{}
}

// userSubtaskL is where Load methods for each relationship are stored.
type userSubtaskL struct{}

var (
	userSubtaskAllColumns            = []string{"id", "subtask_id", "user_task_id", "status", "is_complete", "updated_at", "created_at"}
	userSubtaskColumnsWithoutDefault = []string{"subtask_id", "user_task_id", "status"}
	userSubtaskColumnsWithDefault    = []string{"id", "is_complete", "updated_at", "created_at"}
	userSubtaskPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSubtaskSlice is an alias for a slice of pointers to UserSubtask.
	// This should generally be used opposed to []UserSubtask.
	UserSubtaskSlice []*UserSubtask
	// UserSubtaskHook is the signature for custom UserSubtask hook methods
	UserSubtaskHook func(boil.Executor, *UserSubtask) error

	userSubtaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userSubtaskType                 = reflect.TypeOf(&UserSubtask{})
	userSubtaskMapping              = queries.MakeStructMapping(userSubtaskType)
	userSubtaskPrimaryKeyMapping, _ = queries.BindMapping(userSubtaskType, userSubtaskMapping, userSubtaskPrimaryKeyColumns)
	userSubtaskInsertCacheMut       sync.RWMutex
	userSubtaskInsertCache          = make(map[string]insertCache)
	userSubtaskUpdateCacheMut       sync.RWMutex
	userSubtaskUpdateCache          = make(map[string]updateCache)
	userSubtaskUpsertCacheMut       sync.RWMutex
	userSubtaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userSubtaskBeforeInsertHooks []UserSubtaskHook
var userSubtaskBeforeUpdateHooks []UserSubtaskHook
var userSubtaskBeforeDeleteHooks []UserSubtaskHook
var userSubtaskBeforeUpsertHooks []UserSubtaskHook

var userSubtaskAfterInsertHooks []UserSubtaskHook
var userSubtaskAfterSelectHooks []UserSubtaskHook
var userSubtaskAfterUpdateHooks []UserSubtaskHook
var userSubtaskAfterDeleteHooks []UserSubtaskHook
var userSubtaskAfterUpsertHooks []UserSubtaskHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserSubtask) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserSubtask) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserSubtask) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserSubtask) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserSubtask) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserSubtask) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserSubtask) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserSubtask) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserSubtask) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSubtaskAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserSubtaskHook registers your hook function for all future operations.
func AddUserSubtaskHook(hookPoint boil.HookPoint, userSubtaskHook UserSubtaskHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userSubtaskBeforeInsertHooks = append(userSubtaskBeforeInsertHooks, userSubtaskHook)
	case boil.BeforeUpdateHook:
		userSubtaskBeforeUpdateHooks = append(userSubtaskBeforeUpdateHooks, userSubtaskHook)
	case boil.BeforeDeleteHook:
		userSubtaskBeforeDeleteHooks = append(userSubtaskBeforeDeleteHooks, userSubtaskHook)
	case boil.BeforeUpsertHook:
		userSubtaskBeforeUpsertHooks = append(userSubtaskBeforeUpsertHooks, userSubtaskHook)
	case boil.AfterInsertHook:
		userSubtaskAfterInsertHooks = append(userSubtaskAfterInsertHooks, userSubtaskHook)
	case boil.AfterSelectHook:
		userSubtaskAfterSelectHooks = append(userSubtaskAfterSelectHooks, userSubtaskHook)
	case boil.AfterUpdateHook:
		userSubtaskAfterUpdateHooks = append(userSubtaskAfterUpdateHooks, userSubtaskHook)
	case boil.AfterDeleteHook:
		userSubtaskAfterDeleteHooks = append(userSubtaskAfterDeleteHooks, userSubtaskHook)
	case boil.AfterUpsertHook:
		userSubtaskAfterUpsertHooks = append(userSubtaskAfterUpsertHooks, userSubtaskHook)
	}
}

// One returns a single userSubtask record from the query.
func (q userSubtaskQuery) One(exec boil.Executor) (*UserSubtask, error) {
	o := &UserSubtask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for user_subtasks")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserSubtask records from the query.
func (q userSubtaskQuery) All(exec boil.Executor) (UserSubtaskSlice, error) {
	var o []*UserSubtask

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to UserSubtask slice")
	}

	if len(userSubtaskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserSubtask records in the query.
func (q userSubtaskQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count user_subtasks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userSubtaskQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if user_subtasks exists")
	}

	return count > 0, nil
}

// Subtask pointed to by the foreign key.
func (o *UserSubtask) Subtask(mods ...qm.QueryMod) subtaskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubtaskID),
	}

	queryMods = append(queryMods, mods...)

	query := Subtasks(queryMods...)
	queries.SetFrom(query.Query, "\"subtasks\"")

	return query
}

// UserTask pointed to by the foreign key.
func (o *UserSubtask) UserTask(mods ...qm.QueryMod) userTaskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserTaskID),
	}

	queryMods = append(queryMods, mods...)

	query := UserTasks(queryMods...)
	queries.SetFrom(query.Query, "\"user_tasks\"")

	return query
}

// LoadSubtask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSubtaskL) LoadSubtask(e boil.Executor, singular bool, maybeUserSubtask interface{}, mods queries.Applicator) error {
	var slice []*UserSubtask
	var object *UserSubtask

	if singular {
		object = maybeUserSubtask.(*UserSubtask)
	} else {
		slice = *maybeUserSubtask.(*[]*UserSubtask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSubtaskR{}
		}
		if !queries.IsNil(object.SubtaskID) {
			args = append(args, object.SubtaskID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSubtaskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubtaskID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubtaskID) {
				args = append(args, obj.SubtaskID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subtasks`), qm.WhereIn(`subtasks.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subtask")
	}

	var resultSlice []*Subtask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subtask")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subtasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subtasks")
	}

	if len(userSubtaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subtask = foreign
		if foreign.R == nil {
			foreign.R = &subtaskR{}
		}
		foreign.R.UserSubtasks = append(foreign.R.UserSubtasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubtaskID, foreign.ID) {
				local.R.Subtask = foreign
				if foreign.R == nil {
					foreign.R = &subtaskR{}
				}
				foreign.R.UserSubtasks = append(foreign.R.UserSubtasks, local)
				break
			}
		}
	}

	return nil
}

// LoadUserTask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSubtaskL) LoadUserTask(e boil.Executor, singular bool, maybeUserSubtask interface{}, mods queries.Applicator) error {
	var slice []*UserSubtask
	var object *UserSubtask

	if singular {
		object = maybeUserSubtask.(*UserSubtask)
	} else {
		slice = *maybeUserSubtask.(*[]*UserSubtask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSubtaskR{}
		}
		if !queries.IsNil(object.UserTaskID) {
			args = append(args, object.UserTaskID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSubtaskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserTaskID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserTaskID) {
				args = append(args, obj.UserTaskID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_tasks`), qm.WhereIn(`user_tasks.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserTask")
	}

	var resultSlice []*UserTask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserTask")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_tasks")
	}

	if len(userSubtaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserTask = foreign
		if foreign.R == nil {
			foreign.R = &userTaskR{}
		}
		foreign.R.UserSubtasks = append(foreign.R.UserSubtasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserTaskID, foreign.ID) {
				local.R.UserTask = foreign
				if foreign.R == nil {
					foreign.R = &userTaskR{}
				}
				foreign.R.UserSubtasks = append(foreign.R.UserSubtasks, local)
				break
			}
		}
	}

	return nil
}

// SetSubtask of the userSubtask to the related item.
// Sets o.R.Subtask to related.
// Adds o to related.R.UserSubtasks.
func (o *UserSubtask) SetSubtask(exec boil.Executor, insert bool, related *Subtask) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_subtasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subtask_id"}),
		strmangle.WhereClause("\"", "\"", 2, userSubtaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubtaskID, related.ID)
	if o.R == nil {
		o.R = &userSubtaskR{
			Subtask: related,
		}
	} else {
		o.R.Subtask = related
	}

	if related.R == nil {
		related.R = &subtaskR{
			UserSubtasks: UserSubtaskSlice{o},
		}
	} else {
		related.R.UserSubtasks = append(related.R.UserSubtasks, o)
	}

	return nil
}

// RemoveSubtask relationship.
// Sets o.R.Subtask to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserSubtask) RemoveSubtask(exec boil.Executor, related *Subtask) error {
	var err error

	queries.SetScanner(&o.SubtaskID, nil)
	if _, err = o.Update(exec, boil.Whitelist("subtask_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Subtask = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserSubtasks {
		if queries.Equal(o.SubtaskID, ri.SubtaskID) {
			continue
		}

		ln := len(related.R.UserSubtasks)
		if ln > 1 && i < ln-1 {
			related.R.UserSubtasks[i] = related.R.UserSubtasks[ln-1]
		}
		related.R.UserSubtasks = related.R.UserSubtasks[:ln-1]
		break
	}
	return nil
}

// SetUserTask of the userSubtask to the related item.
// Sets o.R.UserTask to related.
// Adds o to related.R.UserSubtasks.
func (o *UserSubtask) SetUserTask(exec boil.Executor, insert bool, related *UserTask) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_subtasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_task_id"}),
		strmangle.WhereClause("\"", "\"", 2, userSubtaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserTaskID, related.ID)
	if o.R == nil {
		o.R = &userSubtaskR{
			UserTask: related,
		}
	} else {
		o.R.UserTask = related
	}

	if related.R == nil {
		related.R = &userTaskR{
			UserSubtasks: UserSubtaskSlice{o},
		}
	} else {
		related.R.UserSubtasks = append(related.R.UserSubtasks, o)
	}

	return nil
}

// RemoveUserTask relationship.
// Sets o.R.UserTask to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserSubtask) RemoveUserTask(exec boil.Executor, related *UserTask) error {
	var err error

	queries.SetScanner(&o.UserTaskID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_task_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserTask = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserSubtasks {
		if queries.Equal(o.UserTaskID, ri.UserTaskID) {
			continue
		}

		ln := len(related.R.UserSubtasks)
		if ln > 1 && i < ln-1 {
			related.R.UserSubtasks[i] = related.R.UserSubtasks[ln-1]
		}
		related.R.UserSubtasks = related.R.UserSubtasks[:ln-1]
		break
	}
	return nil
}

// UserSubtasks retrieves all the records using an executor.
func UserSubtasks(mods ...qm.QueryMod) userSubtaskQuery {
	mods = append(mods, qm.From("\"user_subtasks\""))
	return userSubtaskQuery{NewQuery(mods...)}
}

// FindUserSubtask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserSubtask(exec boil.Executor, iD string, selectCols ...string) (*UserSubtask, error) {
	userSubtaskObj := &UserSubtask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_subtasks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userSubtaskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from user_subtasks")
	}

	return userSubtaskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserSubtask) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_subtasks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSubtaskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userSubtaskInsertCacheMut.RLock()
	cache, cached := userSubtaskInsertCache[key]
	userSubtaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userSubtaskAllColumns,
			userSubtaskColumnsWithDefault,
			userSubtaskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userSubtaskType, userSubtaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userSubtaskType, userSubtaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_subtasks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_subtasks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into user_subtasks")
	}

	if !cached {
		userSubtaskInsertCacheMut.Lock()
		userSubtaskInsertCache[key] = cache
		userSubtaskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserSubtask.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserSubtask) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userSubtaskUpdateCacheMut.RLock()
	cache, cached := userSubtaskUpdateCache[key]
	userSubtaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userSubtaskAllColumns,
			userSubtaskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update user_subtasks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_subtasks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userSubtaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userSubtaskType, userSubtaskMapping, append(wl, userSubtaskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update user_subtasks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for user_subtasks")
	}

	if !cached {
		userSubtaskUpdateCacheMut.Lock()
		userSubtaskUpdateCache[key] = cache
		userSubtaskUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userSubtaskQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for user_subtasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for user_subtasks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSubtaskSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubtaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_subtasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userSubtaskPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in userSubtask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all userSubtask")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserSubtask) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_subtasks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSubtaskColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userSubtaskUpsertCacheMut.RLock()
	cache, cached := userSubtaskUpsertCache[key]
	userSubtaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userSubtaskAllColumns,
			userSubtaskColumnsWithDefault,
			userSubtaskColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userSubtaskAllColumns,
			userSubtaskPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert user_subtasks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userSubtaskPrimaryKeyColumns))
			copy(conflict, userSubtaskPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_subtasks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userSubtaskType, userSubtaskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userSubtaskType, userSubtaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert user_subtasks")
	}

	if !cached {
		userSubtaskUpsertCacheMut.Lock()
		userSubtaskUpsertCache[key] = cache
		userSubtaskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserSubtask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserSubtask) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no UserSubtask provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userSubtaskPrimaryKeyMapping)
	sql := "DELETE FROM \"user_subtasks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from user_subtasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for user_subtasks")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userSubtaskQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no userSubtaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from user_subtasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_subtasks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSubtaskSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userSubtaskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubtaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_subtasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSubtaskPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from userSubtask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_subtasks")
	}

	if len(userSubtaskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserSubtask) Reload(exec boil.Executor) error {
	ret, err := FindUserSubtask(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSubtaskSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSubtaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubtaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_subtasks\".* FROM \"user_subtasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSubtaskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in UserSubtaskSlice")
	}

	*o = slice

	return nil
}

// UserSubtaskExists checks if the UserSubtask row exists.
func UserSubtaskExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_subtasks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if user_subtasks exists")
	}

	return exists, nil
}
