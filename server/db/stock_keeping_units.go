// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StockKeepingUnit is an object representing the database table.
type StockKeepingUnit struct {
	ID               string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             string      `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Code             string      `db:"code" boil:"code" json:"code" toml:"code" yaml:"code"`
	Description      string      `db:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	Weight           int         `db:"weight" boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	WeightUnit       string      `db:"weight_unit" boil:"weight_unit" json:"weight_unit" toml:"weight_unit" yaml:"weight_unit"`
	Price            int         `db:"price" boil:"price" json:"price" toml:"price" yaml:"price"`
	Currency         string      `db:"currency" boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	IsBeef           bool        `db:"is_beef" boil:"is_beef" json:"is_beef" toml:"is_beef" yaml:"is_beef"`
	IsPointSku       bool        `db:"is_point_sku" boil:"is_point_sku" json:"is_point_sku" toml:"is_point_sku" yaml:"is_point_sku"`
	IsAppSku         bool        `db:"is_app_sku" boil:"is_app_sku" json:"is_app_sku" toml:"is_app_sku" yaml:"is_app_sku"`
	MasterPlanBlobID null.String `db:"master_plan_blob_id" boil:"master_plan_blob_id" json:"master_plan_blob_id,omitempty" toml:"master_plan_blob_id" yaml:"master_plan_blob_id,omitempty"`
	VideoBlobID      null.String `db:"video_blob_id" boil:"video_blob_id" json:"video_blob_id,omitempty" toml:"video_blob_id" yaml:"video_blob_id,omitempty"`
	LoyaltyPoints    int         `db:"loyalty_points" boil:"loyalty_points" json:"loyalty_points" toml:"loyalty_points" yaml:"loyalty_points"`
	CloneParentID    null.String `db:"clone_parent_id" boil:"clone_parent_id" json:"clone_parent_id,omitempty" toml:"clone_parent_id" yaml:"clone_parent_id,omitempty"`
	Archived         bool        `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt       null.Time   `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt        time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedByID      string      `db:"created_by_id" boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`

	R *stockKeepingUnitR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L stockKeepingUnitL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StockKeepingUnitColumns = struct {
	ID               string
	Name             string
	Code             string
	Description      string
	Weight           string
	WeightUnit       string
	Price            string
	Currency         string
	IsBeef           string
	IsPointSku       string
	IsAppSku         string
	MasterPlanBlobID string
	VideoBlobID      string
	LoyaltyPoints    string
	CloneParentID    string
	Archived         string
	ArchivedAt       string
	UpdatedAt        string
	CreatedAt        string
	CreatedByID      string
}{
	ID:               "id",
	Name:             "name",
	Code:             "code",
	Description:      "description",
	Weight:           "weight",
	WeightUnit:       "weight_unit",
	Price:            "price",
	Currency:         "currency",
	IsBeef:           "is_beef",
	IsPointSku:       "is_point_sku",
	IsAppSku:         "is_app_sku",
	MasterPlanBlobID: "master_plan_blob_id",
	VideoBlobID:      "video_blob_id",
	LoyaltyPoints:    "loyalty_points",
	CloneParentID:    "clone_parent_id",
	Archived:         "archived",
	ArchivedAt:       "archived_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
	CreatedByID:      "created_by_id",
}

// Generated where

var StockKeepingUnitWhere = struct {
	ID               whereHelperstring
	Name             whereHelperstring
	Code             whereHelperstring
	Description      whereHelperstring
	Weight           whereHelperint
	WeightUnit       whereHelperstring
	Price            whereHelperint
	Currency         whereHelperstring
	IsBeef           whereHelperbool
	IsPointSku       whereHelperbool
	IsAppSku         whereHelperbool
	MasterPlanBlobID whereHelpernull_String
	VideoBlobID      whereHelpernull_String
	LoyaltyPoints    whereHelperint
	CloneParentID    whereHelpernull_String
	Archived         whereHelperbool
	ArchivedAt       whereHelpernull_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	CreatedByID      whereHelperstring
}{
	ID:               whereHelperstring{field: "\"stock_keeping_units\".\"id\""},
	Name:             whereHelperstring{field: "\"stock_keeping_units\".\"name\""},
	Code:             whereHelperstring{field: "\"stock_keeping_units\".\"code\""},
	Description:      whereHelperstring{field: "\"stock_keeping_units\".\"description\""},
	Weight:           whereHelperint{field: "\"stock_keeping_units\".\"weight\""},
	WeightUnit:       whereHelperstring{field: "\"stock_keeping_units\".\"weight_unit\""},
	Price:            whereHelperint{field: "\"stock_keeping_units\".\"price\""},
	Currency:         whereHelperstring{field: "\"stock_keeping_units\".\"currency\""},
	IsBeef:           whereHelperbool{field: "\"stock_keeping_units\".\"is_beef\""},
	IsPointSku:       whereHelperbool{field: "\"stock_keeping_units\".\"is_point_sku\""},
	IsAppSku:         whereHelperbool{field: "\"stock_keeping_units\".\"is_app_sku\""},
	MasterPlanBlobID: whereHelpernull_String{field: "\"stock_keeping_units\".\"master_plan_blob_id\""},
	VideoBlobID:      whereHelpernull_String{field: "\"stock_keeping_units\".\"video_blob_id\""},
	LoyaltyPoints:    whereHelperint{field: "\"stock_keeping_units\".\"loyalty_points\""},
	CloneParentID:    whereHelpernull_String{field: "\"stock_keeping_units\".\"clone_parent_id\""},
	Archived:         whereHelperbool{field: "\"stock_keeping_units\".\"archived\""},
	ArchivedAt:       whereHelpernull_Time{field: "\"stock_keeping_units\".\"archived_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"stock_keeping_units\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"stock_keeping_units\".\"created_at\""},
	CreatedByID:      whereHelperstring{field: "\"stock_keeping_units\".\"created_by_id\""},
}

// StockKeepingUnitRels is where relationship names are stored.
var StockKeepingUnitRels = struct {
	CloneParent                  string
	CreatedBy                    string
	MasterPlanBlob               string
	VideoBlob                    string
	SkuCategories                string
	SkuProductCategories         string
	SkuProducts                  string
	SkuStockKeepingUnitContents  string
	SkuStockKeepingUnitPhotos    string
	CloneParentStockKeepingUnits string
	SkuTasks                     string
}{
	CloneParent:                  "CloneParent",
	CreatedBy:                    "CreatedBy",
	MasterPlanBlob:               "MasterPlanBlob",
	VideoBlob:                    "VideoBlob",
	SkuCategories:                "SkuCategories",
	SkuProductCategories:         "SkuProductCategories",
	SkuProducts:                  "SkuProducts",
	SkuStockKeepingUnitContents:  "SkuStockKeepingUnitContents",
	SkuStockKeepingUnitPhotos:    "SkuStockKeepingUnitPhotos",
	CloneParentStockKeepingUnits: "CloneParentStockKeepingUnits",
	SkuTasks:                     "SkuTasks",
}

// stockKeepingUnitR is where relationships are stored.
type stockKeepingUnitR struct {
	CloneParent                  *StockKeepingUnit
	CreatedBy                    *User
	MasterPlanBlob               *Blob
	VideoBlob                    *Blob
	SkuCategories                CategorySlice
	SkuProductCategories         ProductCategorySlice
	SkuProducts                  ProductSlice
	SkuStockKeepingUnitContents  StockKeepingUnitContentSlice
	SkuStockKeepingUnitPhotos    StockKeepingUnitPhotoSlice
	CloneParentStockKeepingUnits StockKeepingUnitSlice
	SkuTasks                     TaskSlice
}

// NewStruct creates a new relationship struct
func (*stockKeepingUnitR) NewStruct() *stockKeepingUnitR {
	return &stockKeepingUnitR{}
}

// stockKeepingUnitL is where Load methods for each relationship are stored.
type stockKeepingUnitL struct{}

var (
	stockKeepingUnitAllColumns            = []string{"id", "name", "code", "description", "weight", "weight_unit", "price", "currency", "is_beef", "is_point_sku", "is_app_sku", "master_plan_blob_id", "video_blob_id", "loyalty_points", "clone_parent_id", "archived", "archived_at", "updated_at", "created_at", "created_by_id"}
	stockKeepingUnitColumnsWithoutDefault = []string{"name", "code", "description", "weight_unit", "currency", "master_plan_blob_id", "video_blob_id", "clone_parent_id", "archived_at", "created_by_id"}
	stockKeepingUnitColumnsWithDefault    = []string{"id", "weight", "price", "is_beef", "is_point_sku", "is_app_sku", "loyalty_points", "archived", "updated_at", "created_at"}
	stockKeepingUnitPrimaryKeyColumns     = []string{"id"}
)

type (
	// StockKeepingUnitSlice is an alias for a slice of pointers to StockKeepingUnit.
	// This should generally be used opposed to []StockKeepingUnit.
	StockKeepingUnitSlice []*StockKeepingUnit
	// StockKeepingUnitHook is the signature for custom StockKeepingUnit hook methods
	StockKeepingUnitHook func(boil.Executor, *StockKeepingUnit) error

	stockKeepingUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockKeepingUnitType                 = reflect.TypeOf(&StockKeepingUnit{})
	stockKeepingUnitMapping              = queries.MakeStructMapping(stockKeepingUnitType)
	stockKeepingUnitPrimaryKeyMapping, _ = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, stockKeepingUnitPrimaryKeyColumns)
	stockKeepingUnitInsertCacheMut       sync.RWMutex
	stockKeepingUnitInsertCache          = make(map[string]insertCache)
	stockKeepingUnitUpdateCacheMut       sync.RWMutex
	stockKeepingUnitUpdateCache          = make(map[string]updateCache)
	stockKeepingUnitUpsertCacheMut       sync.RWMutex
	stockKeepingUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stockKeepingUnitBeforeInsertHooks []StockKeepingUnitHook
var stockKeepingUnitBeforeUpdateHooks []StockKeepingUnitHook
var stockKeepingUnitBeforeDeleteHooks []StockKeepingUnitHook
var stockKeepingUnitBeforeUpsertHooks []StockKeepingUnitHook

var stockKeepingUnitAfterInsertHooks []StockKeepingUnitHook
var stockKeepingUnitAfterSelectHooks []StockKeepingUnitHook
var stockKeepingUnitAfterUpdateHooks []StockKeepingUnitHook
var stockKeepingUnitAfterDeleteHooks []StockKeepingUnitHook
var stockKeepingUnitAfterUpsertHooks []StockKeepingUnitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StockKeepingUnit) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StockKeepingUnit) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StockKeepingUnit) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StockKeepingUnit) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StockKeepingUnit) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StockKeepingUnit) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StockKeepingUnit) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StockKeepingUnit) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StockKeepingUnit) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStockKeepingUnitHook registers your hook function for all future operations.
func AddStockKeepingUnitHook(hookPoint boil.HookPoint, stockKeepingUnitHook StockKeepingUnitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		stockKeepingUnitBeforeInsertHooks = append(stockKeepingUnitBeforeInsertHooks, stockKeepingUnitHook)
	case boil.BeforeUpdateHook:
		stockKeepingUnitBeforeUpdateHooks = append(stockKeepingUnitBeforeUpdateHooks, stockKeepingUnitHook)
	case boil.BeforeDeleteHook:
		stockKeepingUnitBeforeDeleteHooks = append(stockKeepingUnitBeforeDeleteHooks, stockKeepingUnitHook)
	case boil.BeforeUpsertHook:
		stockKeepingUnitBeforeUpsertHooks = append(stockKeepingUnitBeforeUpsertHooks, stockKeepingUnitHook)
	case boil.AfterInsertHook:
		stockKeepingUnitAfterInsertHooks = append(stockKeepingUnitAfterInsertHooks, stockKeepingUnitHook)
	case boil.AfterSelectHook:
		stockKeepingUnitAfterSelectHooks = append(stockKeepingUnitAfterSelectHooks, stockKeepingUnitHook)
	case boil.AfterUpdateHook:
		stockKeepingUnitAfterUpdateHooks = append(stockKeepingUnitAfterUpdateHooks, stockKeepingUnitHook)
	case boil.AfterDeleteHook:
		stockKeepingUnitAfterDeleteHooks = append(stockKeepingUnitAfterDeleteHooks, stockKeepingUnitHook)
	case boil.AfterUpsertHook:
		stockKeepingUnitAfterUpsertHooks = append(stockKeepingUnitAfterUpsertHooks, stockKeepingUnitHook)
	}
}

// One returns a single stockKeepingUnit record from the query.
func (q stockKeepingUnitQuery) One(exec boil.Executor) (*StockKeepingUnit, error) {
	o := &StockKeepingUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for stock_keeping_units")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StockKeepingUnit records from the query.
func (q stockKeepingUnitQuery) All(exec boil.Executor) (StockKeepingUnitSlice, error) {
	var o []*StockKeepingUnit

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to StockKeepingUnit slice")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StockKeepingUnit records in the query.
func (q stockKeepingUnitQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count stock_keeping_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockKeepingUnitQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if stock_keeping_units exists")
	}

	return count > 0, nil
}

// CloneParent pointed to by the foreign key.
func (o *StockKeepingUnit) CloneParent(mods ...qm.QueryMod) stockKeepingUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CloneParentID),
	}

	queryMods = append(queryMods, mods...)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	return query
}

// CreatedBy pointed to by the foreign key.
func (o *StockKeepingUnit) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// MasterPlanBlob pointed to by the foreign key.
func (o *StockKeepingUnit) MasterPlanBlob(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MasterPlanBlobID),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// VideoBlob pointed to by the foreign key.
func (o *StockKeepingUnit) VideoBlob(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VideoBlobID),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// SkuCategories retrieves all the category's Categories with an executor via sku_id column.
func (o *StockKeepingUnit) SkuCategories(mods ...qm.QueryMod) categoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"categories\".\"sku_id\"=?", o.ID),
	)

	query := Categories(queryMods...)
	queries.SetFrom(query.Query, "\"categories\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"categories\".*"})
	}

	return query
}

// SkuProductCategories retrieves all the product_category's ProductCategories with an executor via sku_id column.
func (o *StockKeepingUnit) SkuProductCategories(mods ...qm.QueryMod) productCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_categories\".\"sku_id\"=?", o.ID),
	)

	query := ProductCategories(queryMods...)
	queries.SetFrom(query.Query, "\"product_categories\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"product_categories\".*"})
	}

	return query
}

// SkuProducts retrieves all the product's Products with an executor via sku_id column.
func (o *StockKeepingUnit) SkuProducts(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"sku_id\"=?", o.ID),
	)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"products\".*"})
	}

	return query
}

// SkuStockKeepingUnitContents retrieves all the stock_keeping_unit_content's StockKeepingUnitContents with an executor via sku_id column.
func (o *StockKeepingUnit) SkuStockKeepingUnitContents(mods ...qm.QueryMod) stockKeepingUnitContentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stock_keeping_unit_content\".\"sku_id\"=?", o.ID),
	)

	query := StockKeepingUnitContents(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_unit_content\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stock_keeping_unit_content\".*"})
	}

	return query
}

// SkuStockKeepingUnitPhotos retrieves all the stock_keeping_unit_photo's StockKeepingUnitPhotos with an executor via sku_id column.
func (o *StockKeepingUnit) SkuStockKeepingUnitPhotos(mods ...qm.QueryMod) stockKeepingUnitPhotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stock_keeping_unit_photos\".\"sku_id\"=?", o.ID),
	)

	query := StockKeepingUnitPhotos(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_unit_photos\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stock_keeping_unit_photos\".*"})
	}

	return query
}

// CloneParentStockKeepingUnits retrieves all the stock_keeping_unit's StockKeepingUnits with an executor via clone_parent_id column.
func (o *StockKeepingUnit) CloneParentStockKeepingUnits(mods ...qm.QueryMod) stockKeepingUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stock_keeping_units\".\"clone_parent_id\"=?", o.ID),
	)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stock_keeping_units\".*"})
	}

	return query
}

// SkuTasks retrieves all the task's Tasks with an executor via sku_id column.
func (o *StockKeepingUnit) SkuTasks(mods ...qm.QueryMod) taskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tasks\".\"sku_id\"=?", o.ID),
	)

	query := Tasks(queryMods...)
	queries.SetFrom(query.Query, "\"tasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tasks\".*"})
	}

	return query
}

// LoadCloneParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitL) LoadCloneParent(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		if !queries.IsNil(object.CloneParentID) {
			args = append(args, object.CloneParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CloneParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CloneParentID) {
				args = append(args, obj.CloneParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StockKeepingUnit")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StockKeepingUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CloneParent = foreign
		if foreign.R == nil {
			foreign.R = &stockKeepingUnitR{}
		}
		foreign.R.CloneParentStockKeepingUnits = append(foreign.R.CloneParentStockKeepingUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CloneParentID, foreign.ID) {
				local.R.CloneParent = foreign
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.CloneParentStockKeepingUnits = append(foreign.R.CloneParentStockKeepingUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitL) LoadCreatedBy(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByStockKeepingUnits = append(foreign.R.CreatedByStockKeepingUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByStockKeepingUnits = append(foreign.R.CreatedByStockKeepingUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadMasterPlanBlob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitL) LoadMasterPlanBlob(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		if !queries.IsNil(object.MasterPlanBlobID) {
			args = append(args, object.MasterPlanBlobID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MasterPlanBlobID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MasterPlanBlobID) {
				args = append(args, obj.MasterPlanBlobID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blobs`), qm.WhereIn(`blobs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MasterPlanBlob = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.MasterPlanBlobStockKeepingUnits = append(foreign.R.MasterPlanBlobStockKeepingUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MasterPlanBlobID, foreign.ID) {
				local.R.MasterPlanBlob = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.MasterPlanBlobStockKeepingUnits = append(foreign.R.MasterPlanBlobStockKeepingUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadVideoBlob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitL) LoadVideoBlob(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		if !queries.IsNil(object.VideoBlobID) {
			args = append(args, object.VideoBlobID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VideoBlobID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VideoBlobID) {
				args = append(args, obj.VideoBlobID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blobs`), qm.WhereIn(`blobs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VideoBlob = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.VideoBlobStockKeepingUnits = append(foreign.R.VideoBlobStockKeepingUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VideoBlobID, foreign.ID) {
				local.R.VideoBlob = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.VideoBlobStockKeepingUnits = append(foreign.R.VideoBlobStockKeepingUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadSkuCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuCategories(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`categories`), qm.WhereIn(`categories.sku_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categories")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoryR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuCategories = append(local.R.SkuCategories, foreign)
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuProductCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuProductCategories(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`product_categories`), qm.WhereIn(`product_categories.sku_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_categories")
	}

	var resultSlice []*ProductCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_categories")
	}

	if len(productCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuProductCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productCategoryR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuProductCategories = append(local.R.SkuProductCategories, foreign)
				if foreign.R == nil {
					foreign.R = &productCategoryR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuProducts(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`products`), qm.WhereIn(`products.sku_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SkuID) {
				local.R.SkuProducts = append(local.R.SkuProducts, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuStockKeepingUnitContents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuStockKeepingUnitContents(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_unit_content`), qm.WhereIn(`stock_keeping_unit_content.sku_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock_keeping_unit_content")
	}

	var resultSlice []*StockKeepingUnitContent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock_keeping_unit_content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock_keeping_unit_content")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_unit_content")
	}

	if len(stockKeepingUnitContentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuStockKeepingUnitContents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockKeepingUnitContentR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuStockKeepingUnitContents = append(local.R.SkuStockKeepingUnitContents, foreign)
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitContentR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuStockKeepingUnitPhotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuStockKeepingUnitPhotos(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_unit_photos`), qm.WhereIn(`stock_keeping_unit_photos.sku_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock_keeping_unit_photos")
	}

	var resultSlice []*StockKeepingUnitPhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock_keeping_unit_photos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock_keeping_unit_photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_unit_photos")
	}

	if len(stockKeepingUnitPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuStockKeepingUnitPhotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockKeepingUnitPhotoR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuStockKeepingUnitPhotos = append(local.R.SkuStockKeepingUnitPhotos, foreign)
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitPhotoR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadCloneParentStockKeepingUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadCloneParentStockKeepingUnits(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.clone_parent_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock_keeping_units")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock_keeping_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CloneParentStockKeepingUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockKeepingUnitR{}
			}
			foreign.R.CloneParent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CloneParentID) {
				local.R.CloneParentStockKeepingUnits = append(local.R.CloneParentStockKeepingUnits, foreign)
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.CloneParent = local
				break
			}
		}
	}

	return nil
}

// LoadSkuTasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuTasks(e boil.Executor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		object = maybeStockKeepingUnit.(*StockKeepingUnit)
	} else {
		slice = *maybeStockKeepingUnit.(*[]*StockKeepingUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`tasks`), qm.WhereIn(`tasks.sku_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tasks")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tasks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuTasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taskR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SkuID) {
				local.R.SkuTasks = append(local.R.SkuTasks, foreign)
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// SetCloneParent of the stockKeepingUnit to the related item.
// Sets o.R.CloneParent to related.
// Adds o to related.R.CloneParentStockKeepingUnits.
func (o *StockKeepingUnit) SetCloneParent(exec boil.Executor, insert bool, related *StockKeepingUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"clone_parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CloneParentID, related.ID)
	if o.R == nil {
		o.R = &stockKeepingUnitR{
			CloneParent: related,
		}
	} else {
		o.R.CloneParent = related
	}

	if related.R == nil {
		related.R = &stockKeepingUnitR{
			CloneParentStockKeepingUnits: StockKeepingUnitSlice{o},
		}
	} else {
		related.R.CloneParentStockKeepingUnits = append(related.R.CloneParentStockKeepingUnits, o)
	}

	return nil
}

// RemoveCloneParent relationship.
// Sets o.R.CloneParent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *StockKeepingUnit) RemoveCloneParent(exec boil.Executor, related *StockKeepingUnit) error {
	var err error

	queries.SetScanner(&o.CloneParentID, nil)
	if _, err = o.Update(exec, boil.Whitelist("clone_parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CloneParent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CloneParentStockKeepingUnits {
		if queries.Equal(o.CloneParentID, ri.CloneParentID) {
			continue
		}

		ln := len(related.R.CloneParentStockKeepingUnits)
		if ln > 1 && i < ln-1 {
			related.R.CloneParentStockKeepingUnits[i] = related.R.CloneParentStockKeepingUnits[ln-1]
		}
		related.R.CloneParentStockKeepingUnits = related.R.CloneParentStockKeepingUnits[:ln-1]
		break
	}
	return nil
}

// SetCreatedBy of the stockKeepingUnit to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByStockKeepingUnits.
func (o *StockKeepingUnit) SetCreatedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &stockKeepingUnitR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByStockKeepingUnits: StockKeepingUnitSlice{o},
		}
	} else {
		related.R.CreatedByStockKeepingUnits = append(related.R.CreatedByStockKeepingUnits, o)
	}

	return nil
}

// SetMasterPlanBlob of the stockKeepingUnit to the related item.
// Sets o.R.MasterPlanBlob to related.
// Adds o to related.R.MasterPlanBlobStockKeepingUnits.
func (o *StockKeepingUnit) SetMasterPlanBlob(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"master_plan_blob_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MasterPlanBlobID, related.ID)
	if o.R == nil {
		o.R = &stockKeepingUnitR{
			MasterPlanBlob: related,
		}
	} else {
		o.R.MasterPlanBlob = related
	}

	if related.R == nil {
		related.R = &blobR{
			MasterPlanBlobStockKeepingUnits: StockKeepingUnitSlice{o},
		}
	} else {
		related.R.MasterPlanBlobStockKeepingUnits = append(related.R.MasterPlanBlobStockKeepingUnits, o)
	}

	return nil
}

// RemoveMasterPlanBlob relationship.
// Sets o.R.MasterPlanBlob to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *StockKeepingUnit) RemoveMasterPlanBlob(exec boil.Executor, related *Blob) error {
	var err error

	queries.SetScanner(&o.MasterPlanBlobID, nil)
	if _, err = o.Update(exec, boil.Whitelist("master_plan_blob_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MasterPlanBlob = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MasterPlanBlobStockKeepingUnits {
		if queries.Equal(o.MasterPlanBlobID, ri.MasterPlanBlobID) {
			continue
		}

		ln := len(related.R.MasterPlanBlobStockKeepingUnits)
		if ln > 1 && i < ln-1 {
			related.R.MasterPlanBlobStockKeepingUnits[i] = related.R.MasterPlanBlobStockKeepingUnits[ln-1]
		}
		related.R.MasterPlanBlobStockKeepingUnits = related.R.MasterPlanBlobStockKeepingUnits[:ln-1]
		break
	}
	return nil
}

// SetVideoBlob of the stockKeepingUnit to the related item.
// Sets o.R.VideoBlob to related.
// Adds o to related.R.VideoBlobStockKeepingUnits.
func (o *StockKeepingUnit) SetVideoBlob(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"video_blob_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VideoBlobID, related.ID)
	if o.R == nil {
		o.R = &stockKeepingUnitR{
			VideoBlob: related,
		}
	} else {
		o.R.VideoBlob = related
	}

	if related.R == nil {
		related.R = &blobR{
			VideoBlobStockKeepingUnits: StockKeepingUnitSlice{o},
		}
	} else {
		related.R.VideoBlobStockKeepingUnits = append(related.R.VideoBlobStockKeepingUnits, o)
	}

	return nil
}

// RemoveVideoBlob relationship.
// Sets o.R.VideoBlob to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *StockKeepingUnit) RemoveVideoBlob(exec boil.Executor, related *Blob) error {
	var err error

	queries.SetScanner(&o.VideoBlobID, nil)
	if _, err = o.Update(exec, boil.Whitelist("video_blob_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VideoBlob = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VideoBlobStockKeepingUnits {
		if queries.Equal(o.VideoBlobID, ri.VideoBlobID) {
			continue
		}

		ln := len(related.R.VideoBlobStockKeepingUnits)
		if ln > 1 && i < ln-1 {
			related.R.VideoBlobStockKeepingUnits[i] = related.R.VideoBlobStockKeepingUnits[ln-1]
		}
		related.R.VideoBlobStockKeepingUnits = related.R.VideoBlobStockKeepingUnits[:ln-1]
		break
	}
	return nil
}

// AddSkuCategories adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuCategories.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuCategories(exec boil.Executor, insert bool, related ...*Category) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, categoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuCategories: related,
		}
	} else {
		o.R.SkuCategories = append(o.R.SkuCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddSkuProductCategories adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuProductCategories.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuProductCategories(exec boil.Executor, insert bool, related ...*ProductCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, productCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuProductCategories: related,
		}
	} else {
		o.R.SkuProductCategories = append(o.R.SkuProductCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productCategoryR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddSkuProducts adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuProducts.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SkuID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SkuID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuProducts: related,
		}
	} else {
		o.R.SkuProducts = append(o.R.SkuProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// SetSkuProducts removes all previously related items of the
// stock_keeping_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sku's SkuProducts accordingly.
// Replaces o.R.SkuProducts with related.
// Sets related.R.Sku's SkuProducts accordingly.
func (o *StockKeepingUnit) SetSkuProducts(exec boil.Executor, insert bool, related ...*Product) error {
	query := "update \"products\" set \"sku_id\" = null where \"sku_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SkuProducts {
			queries.SetScanner(&rel.SkuID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sku = nil
		}

		o.R.SkuProducts = nil
	}
	return o.AddSkuProducts(exec, insert, related...)
}

// RemoveSkuProducts relationships from objects passed in.
// Removes related items from R.SkuProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.Sku.
func (o *StockKeepingUnit) RemoveSkuProducts(exec boil.Executor, related ...*Product) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SkuID, nil)
		if rel.R != nil {
			rel.R.Sku = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sku_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SkuProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.SkuProducts)
			if ln > 1 && i < ln-1 {
				o.R.SkuProducts[i] = o.R.SkuProducts[ln-1]
			}
			o.R.SkuProducts = o.R.SkuProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddSkuStockKeepingUnitContents adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuStockKeepingUnitContents.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuStockKeepingUnitContents(exec boil.Executor, insert bool, related ...*StockKeepingUnitContent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stock_keeping_unit_content\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitContentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuStockKeepingUnitContents: related,
		}
	} else {
		o.R.SkuStockKeepingUnitContents = append(o.R.SkuStockKeepingUnitContents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockKeepingUnitContentR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddSkuStockKeepingUnitPhotos adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuStockKeepingUnitPhotos.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuStockKeepingUnitPhotos(exec boil.Executor, insert bool, related ...*StockKeepingUnitPhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stock_keeping_unit_photos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SkuID, rel.PhotoID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuStockKeepingUnitPhotos: related,
		}
	} else {
		o.R.SkuStockKeepingUnitPhotos = append(o.R.SkuStockKeepingUnitPhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockKeepingUnitPhotoR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddCloneParentStockKeepingUnits adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.CloneParentStockKeepingUnits.
// Sets related.R.CloneParent appropriately.
func (o *StockKeepingUnit) AddCloneParentStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CloneParentID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"clone_parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CloneParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			CloneParentStockKeepingUnits: related,
		}
	} else {
		o.R.CloneParentStockKeepingUnits = append(o.R.CloneParentStockKeepingUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockKeepingUnitR{
				CloneParent: o,
			}
		} else {
			rel.R.CloneParent = o
		}
	}
	return nil
}

// SetCloneParentStockKeepingUnits removes all previously related items of the
// stock_keeping_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CloneParent's CloneParentStockKeepingUnits accordingly.
// Replaces o.R.CloneParentStockKeepingUnits with related.
// Sets related.R.CloneParent's CloneParentStockKeepingUnits accordingly.
func (o *StockKeepingUnit) SetCloneParentStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	query := "update \"stock_keeping_units\" set \"clone_parent_id\" = null where \"clone_parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CloneParentStockKeepingUnits {
			queries.SetScanner(&rel.CloneParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CloneParent = nil
		}

		o.R.CloneParentStockKeepingUnits = nil
	}
	return o.AddCloneParentStockKeepingUnits(exec, insert, related...)
}

// RemoveCloneParentStockKeepingUnits relationships from objects passed in.
// Removes related items from R.CloneParentStockKeepingUnits (uses pointer comparison, removal does not keep order)
// Sets related.R.CloneParent.
func (o *StockKeepingUnit) RemoveCloneParentStockKeepingUnits(exec boil.Executor, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CloneParentID, nil)
		if rel.R != nil {
			rel.R.CloneParent = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("clone_parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CloneParentStockKeepingUnits {
			if rel != ri {
				continue
			}

			ln := len(o.R.CloneParentStockKeepingUnits)
			if ln > 1 && i < ln-1 {
				o.R.CloneParentStockKeepingUnits[i] = o.R.CloneParentStockKeepingUnits[ln-1]
			}
			o.R.CloneParentStockKeepingUnits = o.R.CloneParentStockKeepingUnits[:ln-1]
			break
		}
	}

	return nil
}

// AddSkuTasks adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuTasks.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuTasks(exec boil.Executor, insert bool, related ...*Task) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SkuID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, taskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SkuID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuTasks: related,
		}
	} else {
		o.R.SkuTasks = append(o.R.SkuTasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taskR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// SetSkuTasks removes all previously related items of the
// stock_keeping_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sku's SkuTasks accordingly.
// Replaces o.R.SkuTasks with related.
// Sets related.R.Sku's SkuTasks accordingly.
func (o *StockKeepingUnit) SetSkuTasks(exec boil.Executor, insert bool, related ...*Task) error {
	query := "update \"tasks\" set \"sku_id\" = null where \"sku_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SkuTasks {
			queries.SetScanner(&rel.SkuID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sku = nil
		}

		o.R.SkuTasks = nil
	}
	return o.AddSkuTasks(exec, insert, related...)
}

// RemoveSkuTasks relationships from objects passed in.
// Removes related items from R.SkuTasks (uses pointer comparison, removal does not keep order)
// Sets related.R.Sku.
func (o *StockKeepingUnit) RemoveSkuTasks(exec boil.Executor, related ...*Task) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SkuID, nil)
		if rel.R != nil {
			rel.R.Sku = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sku_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SkuTasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.SkuTasks)
			if ln > 1 && i < ln-1 {
				o.R.SkuTasks[i] = o.R.SkuTasks[ln-1]
			}
			o.R.SkuTasks = o.R.SkuTasks[:ln-1]
			break
		}
	}

	return nil
}

// StockKeepingUnits retrieves all the records using an executor.
func StockKeepingUnits(mods ...qm.QueryMod) stockKeepingUnitQuery {
	mods = append(mods, qm.From("\"stock_keeping_units\""))
	return stockKeepingUnitQuery{NewQuery(mods...)}
}

// FindStockKeepingUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStockKeepingUnit(exec boil.Executor, iD string, selectCols ...string) (*StockKeepingUnit, error) {
	stockKeepingUnitObj := &StockKeepingUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stock_keeping_units\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, stockKeepingUnitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from stock_keeping_units")
	}

	return stockKeepingUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StockKeepingUnit) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no stock_keeping_units provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockKeepingUnitInsertCacheMut.RLock()
	cache, cached := stockKeepingUnitInsertCache[key]
	stockKeepingUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitColumnsWithDefault,
			stockKeepingUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stock_keeping_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stock_keeping_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into stock_keeping_units")
	}

	if !cached {
		stockKeepingUnitInsertCacheMut.Lock()
		stockKeepingUnitInsertCache[key] = cache
		stockKeepingUnitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the StockKeepingUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StockKeepingUnit) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stockKeepingUnitUpdateCacheMut.RLock()
	cache, cached := stockKeepingUnitUpdateCache[key]
	stockKeepingUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update stock_keeping_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stock_keeping_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stockKeepingUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, append(wl, stockKeepingUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update stock_keeping_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for stock_keeping_units")
	}

	if !cached {
		stockKeepingUnitUpdateCacheMut.Lock()
		stockKeepingUnitUpdateCache[key] = cache
		stockKeepingUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stockKeepingUnitQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for stock_keeping_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for stock_keeping_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StockKeepingUnitSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stock_keeping_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stockKeepingUnitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in stockKeepingUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all stockKeepingUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StockKeepingUnit) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no stock_keeping_units provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockKeepingUnitUpsertCacheMut.RLock()
	cache, cached := stockKeepingUnitUpsertCache[key]
	stockKeepingUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitColumnsWithDefault,
			stockKeepingUnitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert stock_keeping_units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stockKeepingUnitPrimaryKeyColumns))
			copy(conflict, stockKeepingUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stock_keeping_units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert stock_keeping_units")
	}

	if !cached {
		stockKeepingUnitUpsertCacheMut.Lock()
		stockKeepingUnitUpsertCache[key] = cache
		stockKeepingUnitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single StockKeepingUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StockKeepingUnit) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no StockKeepingUnit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stockKeepingUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"stock_keeping_units\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from stock_keeping_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for stock_keeping_units")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stockKeepingUnitQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no stockKeepingUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from stock_keeping_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for stock_keeping_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StockKeepingUnitSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stockKeepingUnitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stock_keeping_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from stockKeepingUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for stock_keeping_units")
	}

	if len(stockKeepingUnitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StockKeepingUnit) Reload(exec boil.Executor) error {
	ret, err := FindStockKeepingUnit(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StockKeepingUnitSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StockKeepingUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stock_keeping_units\".* FROM \"stock_keeping_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in StockKeepingUnitSlice")
	}

	*o = slice

	return nil
}

// StockKeepingUnitExists checks if the StockKeepingUnit row exists.
func StockKeepingUnitExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stock_keeping_units\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if stock_keeping_units exists")
	}

	return exists, nil
}
