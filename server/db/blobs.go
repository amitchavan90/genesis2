// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Blob is an object representing the database table.
type Blob struct {
	ID            string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	FileName      string    `db:"file_name" boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`
	MimeType      string    `db:"mime_type" boil:"mime_type" json:"mime_type" toml:"mime_type" yaml:"mime_type"`
	FileSizeBytes int64     `db:"file_size_bytes" boil:"file_size_bytes" json:"file_size_bytes" toml:"file_size_bytes" yaml:"file_size_bytes"`
	Extension     string    `db:"extension" boil:"extension" json:"extension" toml:"extension" yaml:"extension"`
	File          []byte    `db:"file" boil:"file" json:"file" toml:"file" yaml:"file"`
	Views         int       `db:"views" boil:"views" json:"views" toml:"views" yaml:"views"`
	Archived      bool      `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt    null.Time `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt     time.Time `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blobR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blobL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlobColumns = struct {
	ID            string
	FileName      string
	MimeType      string
	FileSizeBytes string
	Extension     string
	File          string
	Views         string
	Archived      string
	ArchivedAt    string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	FileName:      "file_name",
	MimeType:      "mime_type",
	FileSizeBytes: "file_size_bytes",
	Extension:     "extension",
	File:          "file",
	Views:         "views",
	Archived:      "archived",
	ArchivedAt:    "archived_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BlobWhere = struct {
	ID            whereHelperstring
	FileName      whereHelperstring
	MimeType      whereHelperstring
	FileSizeBytes whereHelperint64
	Extension     whereHelperstring
	File          whereHelper__byte
	Views         whereHelperint
	Archived      whereHelperbool
	ArchivedAt    whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"blobs\".\"id\""},
	FileName:      whereHelperstring{field: "\"blobs\".\"file_name\""},
	MimeType:      whereHelperstring{field: "\"blobs\".\"mime_type\""},
	FileSizeBytes: whereHelperint64{field: "\"blobs\".\"file_size_bytes\""},
	Extension:     whereHelperstring{field: "\"blobs\".\"extension\""},
	File:          whereHelper__byte{field: "\"blobs\".\"file\""},
	Views:         whereHelperint{field: "\"blobs\".\"views\""},
	Archived:      whereHelperbool{field: "\"blobs\".\"archived\""},
	ArchivedAt:    whereHelpernull_Time{field: "\"blobs\".\"archived_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"blobs\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"blobs\".\"created_at\""},
}

// BlobRels is where relationship names are stored.
var BlobRels = struct {
	PhotoStockKeepingUnitPhotos     string
	BrandLogoBlobStockKeepingUnits  string
	MasterPlanBlobStockKeepingUnits string
	VideoBlobStockKeepingUnits      string
	BannerPhotoBlobTasks            string
	BrandLogoBlobTasks              string
	CartonPhotoBlobTransactions     string
	ProductPhotoBlobTransactions    string
}{
	PhotoStockKeepingUnitPhotos:     "PhotoStockKeepingUnitPhotos",
	BrandLogoBlobStockKeepingUnits:  "BrandLogoBlobStockKeepingUnits",
	MasterPlanBlobStockKeepingUnits: "MasterPlanBlobStockKeepingUnits",
	VideoBlobStockKeepingUnits:      "VideoBlobStockKeepingUnits",
	BannerPhotoBlobTasks:            "BannerPhotoBlobTasks",
	BrandLogoBlobTasks:              "BrandLogoBlobTasks",
	CartonPhotoBlobTransactions:     "CartonPhotoBlobTransactions",
	ProductPhotoBlobTransactions:    "ProductPhotoBlobTransactions",
}

// blobR is where relationships are stored.
type blobR struct {
	PhotoStockKeepingUnitPhotos     StockKeepingUnitPhotoSlice
	BrandLogoBlobStockKeepingUnits  StockKeepingUnitSlice
	MasterPlanBlobStockKeepingUnits StockKeepingUnitSlice
	VideoBlobStockKeepingUnits      StockKeepingUnitSlice
	BannerPhotoBlobTasks            TaskSlice
	BrandLogoBlobTasks              TaskSlice
	CartonPhotoBlobTransactions     TransactionSlice
	ProductPhotoBlobTransactions    TransactionSlice
}

// NewStruct creates a new relationship struct
func (*blobR) NewStruct() *blobR {
	return &blobR{}
}

// blobL is where Load methods for each relationship are stored.
type blobL struct{}

var (
	blobAllColumns            = []string{"id", "file_name", "mime_type", "file_size_bytes", "extension", "file", "views", "archived", "archived_at", "updated_at", "created_at"}
	blobColumnsWithoutDefault = []string{"file_name", "mime_type", "file_size_bytes", "extension", "file", "archived_at"}
	blobColumnsWithDefault    = []string{"id", "views", "archived", "updated_at", "created_at"}
	blobPrimaryKeyColumns     = []string{"id"}
)

type (
	// BlobSlice is an alias for a slice of pointers to Blob.
	// This should generally be used opposed to []Blob.
	BlobSlice []*Blob
	// BlobHook is the signature for custom Blob hook methods
	BlobHook func(boil.Executor, *Blob) error

	blobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blobType                 = reflect.TypeOf(&Blob{})
	blobMapping              = queries.MakeStructMapping(blobType)
	blobPrimaryKeyMapping, _ = queries.BindMapping(blobType, blobMapping, blobPrimaryKeyColumns)
	blobInsertCacheMut       sync.RWMutex
	blobInsertCache          = make(map[string]insertCache)
	blobUpdateCacheMut       sync.RWMutex
	blobUpdateCache          = make(map[string]updateCache)
	blobUpsertCacheMut       sync.RWMutex
	blobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blobBeforeInsertHooks []BlobHook
var blobBeforeUpdateHooks []BlobHook
var blobBeforeDeleteHooks []BlobHook
var blobBeforeUpsertHooks []BlobHook

var blobAfterInsertHooks []BlobHook
var blobAfterSelectHooks []BlobHook
var blobAfterUpdateHooks []BlobHook
var blobAfterDeleteHooks []BlobHook
var blobAfterUpsertHooks []BlobHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Blob) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Blob) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Blob) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Blob) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Blob) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Blob) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Blob) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Blob) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Blob) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlobHook registers your hook function for all future operations.
func AddBlobHook(hookPoint boil.HookPoint, blobHook BlobHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		blobBeforeInsertHooks = append(blobBeforeInsertHooks, blobHook)
	case boil.BeforeUpdateHook:
		blobBeforeUpdateHooks = append(blobBeforeUpdateHooks, blobHook)
	case boil.BeforeDeleteHook:
		blobBeforeDeleteHooks = append(blobBeforeDeleteHooks, blobHook)
	case boil.BeforeUpsertHook:
		blobBeforeUpsertHooks = append(blobBeforeUpsertHooks, blobHook)
	case boil.AfterInsertHook:
		blobAfterInsertHooks = append(blobAfterInsertHooks, blobHook)
	case boil.AfterSelectHook:
		blobAfterSelectHooks = append(blobAfterSelectHooks, blobHook)
	case boil.AfterUpdateHook:
		blobAfterUpdateHooks = append(blobAfterUpdateHooks, blobHook)
	case boil.AfterDeleteHook:
		blobAfterDeleteHooks = append(blobAfterDeleteHooks, blobHook)
	case boil.AfterUpsertHook:
		blobAfterUpsertHooks = append(blobAfterUpsertHooks, blobHook)
	}
}

// One returns a single blob record from the query.
func (q blobQuery) One(exec boil.Executor) (*Blob, error) {
	o := &Blob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for blobs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Blob records from the query.
func (q blobQuery) All(exec boil.Executor) (BlobSlice, error) {
	var o []*Blob

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Blob slice")
	}

	if len(blobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Blob records in the query.
func (q blobQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count blobs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blobQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if blobs exists")
	}

	return count > 0, nil
}

// PhotoStockKeepingUnitPhotos retrieves all the stock_keeping_unit_photo's StockKeepingUnitPhotos with an executor via photo_id column.
func (o *Blob) PhotoStockKeepingUnitPhotos(mods ...qm.QueryMod) stockKeepingUnitPhotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stock_keeping_unit_photos\".\"photo_id\"=?", o.ID),
	)

	query := StockKeepingUnitPhotos(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_unit_photos\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stock_keeping_unit_photos\".*"})
	}

	return query
}

// BrandLogoBlobStockKeepingUnits retrieves all the stock_keeping_unit's StockKeepingUnits with an executor via brand_logo_blob_id column.
func (o *Blob) BrandLogoBlobStockKeepingUnits(mods ...qm.QueryMod) stockKeepingUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stock_keeping_units\".\"brand_logo_blob_id\"=?", o.ID),
	)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stock_keeping_units\".*"})
	}

	return query
}

// MasterPlanBlobStockKeepingUnits retrieves all the stock_keeping_unit's StockKeepingUnits with an executor via master_plan_blob_id column.
func (o *Blob) MasterPlanBlobStockKeepingUnits(mods ...qm.QueryMod) stockKeepingUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stock_keeping_units\".\"master_plan_blob_id\"=?", o.ID),
	)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stock_keeping_units\".*"})
	}

	return query
}

// VideoBlobStockKeepingUnits retrieves all the stock_keeping_unit's StockKeepingUnits with an executor via video_blob_id column.
func (o *Blob) VideoBlobStockKeepingUnits(mods ...qm.QueryMod) stockKeepingUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stock_keeping_units\".\"video_blob_id\"=?", o.ID),
	)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stock_keeping_units\".*"})
	}

	return query
}

// BannerPhotoBlobTasks retrieves all the task's Tasks with an executor via banner_photo_blob_id column.
func (o *Blob) BannerPhotoBlobTasks(mods ...qm.QueryMod) taskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tasks\".\"banner_photo_blob_id\"=?", o.ID),
	)

	query := Tasks(queryMods...)
	queries.SetFrom(query.Query, "\"tasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tasks\".*"})
	}

	return query
}

// BrandLogoBlobTasks retrieves all the task's Tasks with an executor via brand_logo_blob_id column.
func (o *Blob) BrandLogoBlobTasks(mods ...qm.QueryMod) taskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tasks\".\"brand_logo_blob_id\"=?", o.ID),
	)

	query := Tasks(queryMods...)
	queries.SetFrom(query.Query, "\"tasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tasks\".*"})
	}

	return query
}

// CartonPhotoBlobTransactions retrieves all the transaction's Transactions with an executor via carton_photo_blob_id column.
func (o *Blob) CartonPhotoBlobTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"carton_photo_blob_id\"=?", o.ID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// ProductPhotoBlobTransactions retrieves all the transaction's Transactions with an executor via product_photo_blob_id column.
func (o *Blob) ProductPhotoBlobTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"product_photo_blob_id\"=?", o.ID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// LoadPhotoStockKeepingUnitPhotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadPhotoStockKeepingUnitPhotos(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_unit_photos`), qm.WhereIn(`stock_keeping_unit_photos.photo_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock_keeping_unit_photos")
	}

	var resultSlice []*StockKeepingUnitPhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock_keeping_unit_photos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock_keeping_unit_photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_unit_photos")
	}

	if len(stockKeepingUnitPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PhotoStockKeepingUnitPhotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockKeepingUnitPhotoR{}
			}
			foreign.R.Photo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PhotoID {
				local.R.PhotoStockKeepingUnitPhotos = append(local.R.PhotoStockKeepingUnitPhotos, foreign)
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitPhotoR{}
				}
				foreign.R.Photo = local
				break
			}
		}
	}

	return nil
}

// LoadBrandLogoBlobStockKeepingUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadBrandLogoBlobStockKeepingUnits(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.brand_logo_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock_keeping_units")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock_keeping_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BrandLogoBlobStockKeepingUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockKeepingUnitR{}
			}
			foreign.R.BrandLogoBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandLogoBlobID) {
				local.R.BrandLogoBlobStockKeepingUnits = append(local.R.BrandLogoBlobStockKeepingUnits, foreign)
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.BrandLogoBlob = local
				break
			}
		}
	}

	return nil
}

// LoadMasterPlanBlobStockKeepingUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadMasterPlanBlobStockKeepingUnits(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.master_plan_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock_keeping_units")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock_keeping_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MasterPlanBlobStockKeepingUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockKeepingUnitR{}
			}
			foreign.R.MasterPlanBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MasterPlanBlobID) {
				local.R.MasterPlanBlobStockKeepingUnits = append(local.R.MasterPlanBlobStockKeepingUnits, foreign)
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.MasterPlanBlob = local
				break
			}
		}
	}

	return nil
}

// LoadVideoBlobStockKeepingUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadVideoBlobStockKeepingUnits(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.video_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock_keeping_units")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock_keeping_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VideoBlobStockKeepingUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockKeepingUnitR{}
			}
			foreign.R.VideoBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VideoBlobID) {
				local.R.VideoBlobStockKeepingUnits = append(local.R.VideoBlobStockKeepingUnits, foreign)
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.VideoBlob = local
				break
			}
		}
	}

	return nil
}

// LoadBannerPhotoBlobTasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadBannerPhotoBlobTasks(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`tasks`), qm.WhereIn(`tasks.banner_photo_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tasks")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tasks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BannerPhotoBlobTasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taskR{}
			}
			foreign.R.BannerPhotoBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BannerPhotoBlobID) {
				local.R.BannerPhotoBlobTasks = append(local.R.BannerPhotoBlobTasks, foreign)
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.BannerPhotoBlob = local
				break
			}
		}
	}

	return nil
}

// LoadBrandLogoBlobTasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadBrandLogoBlobTasks(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`tasks`), qm.WhereIn(`tasks.brand_logo_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tasks")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tasks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BrandLogoBlobTasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taskR{}
			}
			foreign.R.BrandLogoBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandLogoBlobID) {
				local.R.BrandLogoBlobTasks = append(local.R.BrandLogoBlobTasks, foreign)
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.BrandLogoBlob = local
				break
			}
		}
	}

	return nil
}

// LoadCartonPhotoBlobTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadCartonPhotoBlobTransactions(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`transactions`), qm.WhereIn(`transactions.carton_photo_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CartonPhotoBlobTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.CartonPhotoBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CartonPhotoBlobID) {
				local.R.CartonPhotoBlobTransactions = append(local.R.CartonPhotoBlobTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.CartonPhotoBlob = local
				break
			}
		}
	}

	return nil
}

// LoadProductPhotoBlobTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadProductPhotoBlobTransactions(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`transactions`), qm.WhereIn(`transactions.product_photo_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductPhotoBlobTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.ProductPhotoBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductPhotoBlobID) {
				local.R.ProductPhotoBlobTransactions = append(local.R.ProductPhotoBlobTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.ProductPhotoBlob = local
				break
			}
		}
	}

	return nil
}

// AddPhotoStockKeepingUnitPhotos adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.PhotoStockKeepingUnitPhotos.
// Sets related.R.Photo appropriately.
func (o *Blob) AddPhotoStockKeepingUnitPhotos(exec boil.Executor, insert bool, related ...*StockKeepingUnitPhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PhotoID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stock_keeping_unit_photos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"photo_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SkuID, rel.PhotoID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PhotoID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blobR{
			PhotoStockKeepingUnitPhotos: related,
		}
	} else {
		o.R.PhotoStockKeepingUnitPhotos = append(o.R.PhotoStockKeepingUnitPhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockKeepingUnitPhotoR{
				Photo: o,
			}
		} else {
			rel.R.Photo = o
		}
	}
	return nil
}

// AddBrandLogoBlobStockKeepingUnits adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.BrandLogoBlobStockKeepingUnits.
// Sets related.R.BrandLogoBlob appropriately.
func (o *Blob) AddBrandLogoBlobStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandLogoBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_logo_blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandLogoBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			BrandLogoBlobStockKeepingUnits: related,
		}
	} else {
		o.R.BrandLogoBlobStockKeepingUnits = append(o.R.BrandLogoBlobStockKeepingUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockKeepingUnitR{
				BrandLogoBlob: o,
			}
		} else {
			rel.R.BrandLogoBlob = o
		}
	}
	return nil
}

// SetBrandLogoBlobStockKeepingUnits removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BrandLogoBlob's BrandLogoBlobStockKeepingUnits accordingly.
// Replaces o.R.BrandLogoBlobStockKeepingUnits with related.
// Sets related.R.BrandLogoBlob's BrandLogoBlobStockKeepingUnits accordingly.
func (o *Blob) SetBrandLogoBlobStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	query := "update \"stock_keeping_units\" set \"brand_logo_blob_id\" = null where \"brand_logo_blob_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BrandLogoBlobStockKeepingUnits {
			queries.SetScanner(&rel.BrandLogoBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BrandLogoBlob = nil
		}

		o.R.BrandLogoBlobStockKeepingUnits = nil
	}
	return o.AddBrandLogoBlobStockKeepingUnits(exec, insert, related...)
}

// RemoveBrandLogoBlobStockKeepingUnits relationships from objects passed in.
// Removes related items from R.BrandLogoBlobStockKeepingUnits (uses pointer comparison, removal does not keep order)
// Sets related.R.BrandLogoBlob.
func (o *Blob) RemoveBrandLogoBlobStockKeepingUnits(exec boil.Executor, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandLogoBlobID, nil)
		if rel.R != nil {
			rel.R.BrandLogoBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_logo_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BrandLogoBlobStockKeepingUnits {
			if rel != ri {
				continue
			}

			ln := len(o.R.BrandLogoBlobStockKeepingUnits)
			if ln > 1 && i < ln-1 {
				o.R.BrandLogoBlobStockKeepingUnits[i] = o.R.BrandLogoBlobStockKeepingUnits[ln-1]
			}
			o.R.BrandLogoBlobStockKeepingUnits = o.R.BrandLogoBlobStockKeepingUnits[:ln-1]
			break
		}
	}

	return nil
}

// AddMasterPlanBlobStockKeepingUnits adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.MasterPlanBlobStockKeepingUnits.
// Sets related.R.MasterPlanBlob appropriately.
func (o *Blob) AddMasterPlanBlobStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MasterPlanBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"master_plan_blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MasterPlanBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			MasterPlanBlobStockKeepingUnits: related,
		}
	} else {
		o.R.MasterPlanBlobStockKeepingUnits = append(o.R.MasterPlanBlobStockKeepingUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockKeepingUnitR{
				MasterPlanBlob: o,
			}
		} else {
			rel.R.MasterPlanBlob = o
		}
	}
	return nil
}

// SetMasterPlanBlobStockKeepingUnits removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MasterPlanBlob's MasterPlanBlobStockKeepingUnits accordingly.
// Replaces o.R.MasterPlanBlobStockKeepingUnits with related.
// Sets related.R.MasterPlanBlob's MasterPlanBlobStockKeepingUnits accordingly.
func (o *Blob) SetMasterPlanBlobStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	query := "update \"stock_keeping_units\" set \"master_plan_blob_id\" = null where \"master_plan_blob_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MasterPlanBlobStockKeepingUnits {
			queries.SetScanner(&rel.MasterPlanBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MasterPlanBlob = nil
		}

		o.R.MasterPlanBlobStockKeepingUnits = nil
	}
	return o.AddMasterPlanBlobStockKeepingUnits(exec, insert, related...)
}

// RemoveMasterPlanBlobStockKeepingUnits relationships from objects passed in.
// Removes related items from R.MasterPlanBlobStockKeepingUnits (uses pointer comparison, removal does not keep order)
// Sets related.R.MasterPlanBlob.
func (o *Blob) RemoveMasterPlanBlobStockKeepingUnits(exec boil.Executor, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MasterPlanBlobID, nil)
		if rel.R != nil {
			rel.R.MasterPlanBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("master_plan_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MasterPlanBlobStockKeepingUnits {
			if rel != ri {
				continue
			}

			ln := len(o.R.MasterPlanBlobStockKeepingUnits)
			if ln > 1 && i < ln-1 {
				o.R.MasterPlanBlobStockKeepingUnits[i] = o.R.MasterPlanBlobStockKeepingUnits[ln-1]
			}
			o.R.MasterPlanBlobStockKeepingUnits = o.R.MasterPlanBlobStockKeepingUnits[:ln-1]
			break
		}
	}

	return nil
}

// AddVideoBlobStockKeepingUnits adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.VideoBlobStockKeepingUnits.
// Sets related.R.VideoBlob appropriately.
func (o *Blob) AddVideoBlobStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VideoBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"video_blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VideoBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			VideoBlobStockKeepingUnits: related,
		}
	} else {
		o.R.VideoBlobStockKeepingUnits = append(o.R.VideoBlobStockKeepingUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockKeepingUnitR{
				VideoBlob: o,
			}
		} else {
			rel.R.VideoBlob = o
		}
	}
	return nil
}

// SetVideoBlobStockKeepingUnits removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VideoBlob's VideoBlobStockKeepingUnits accordingly.
// Replaces o.R.VideoBlobStockKeepingUnits with related.
// Sets related.R.VideoBlob's VideoBlobStockKeepingUnits accordingly.
func (o *Blob) SetVideoBlobStockKeepingUnits(exec boil.Executor, insert bool, related ...*StockKeepingUnit) error {
	query := "update \"stock_keeping_units\" set \"video_blob_id\" = null where \"video_blob_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VideoBlobStockKeepingUnits {
			queries.SetScanner(&rel.VideoBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VideoBlob = nil
		}

		o.R.VideoBlobStockKeepingUnits = nil
	}
	return o.AddVideoBlobStockKeepingUnits(exec, insert, related...)
}

// RemoveVideoBlobStockKeepingUnits relationships from objects passed in.
// Removes related items from R.VideoBlobStockKeepingUnits (uses pointer comparison, removal does not keep order)
// Sets related.R.VideoBlob.
func (o *Blob) RemoveVideoBlobStockKeepingUnits(exec boil.Executor, related ...*StockKeepingUnit) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VideoBlobID, nil)
		if rel.R != nil {
			rel.R.VideoBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("video_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VideoBlobStockKeepingUnits {
			if rel != ri {
				continue
			}

			ln := len(o.R.VideoBlobStockKeepingUnits)
			if ln > 1 && i < ln-1 {
				o.R.VideoBlobStockKeepingUnits[i] = o.R.VideoBlobStockKeepingUnits[ln-1]
			}
			o.R.VideoBlobStockKeepingUnits = o.R.VideoBlobStockKeepingUnits[:ln-1]
			break
		}
	}

	return nil
}

// AddBannerPhotoBlobTasks adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.BannerPhotoBlobTasks.
// Sets related.R.BannerPhotoBlob appropriately.
func (o *Blob) AddBannerPhotoBlobTasks(exec boil.Executor, insert bool, related ...*Task) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BannerPhotoBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"banner_photo_blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, taskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BannerPhotoBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			BannerPhotoBlobTasks: related,
		}
	} else {
		o.R.BannerPhotoBlobTasks = append(o.R.BannerPhotoBlobTasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taskR{
				BannerPhotoBlob: o,
			}
		} else {
			rel.R.BannerPhotoBlob = o
		}
	}
	return nil
}

// SetBannerPhotoBlobTasks removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BannerPhotoBlob's BannerPhotoBlobTasks accordingly.
// Replaces o.R.BannerPhotoBlobTasks with related.
// Sets related.R.BannerPhotoBlob's BannerPhotoBlobTasks accordingly.
func (o *Blob) SetBannerPhotoBlobTasks(exec boil.Executor, insert bool, related ...*Task) error {
	query := "update \"tasks\" set \"banner_photo_blob_id\" = null where \"banner_photo_blob_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BannerPhotoBlobTasks {
			queries.SetScanner(&rel.BannerPhotoBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BannerPhotoBlob = nil
		}

		o.R.BannerPhotoBlobTasks = nil
	}
	return o.AddBannerPhotoBlobTasks(exec, insert, related...)
}

// RemoveBannerPhotoBlobTasks relationships from objects passed in.
// Removes related items from R.BannerPhotoBlobTasks (uses pointer comparison, removal does not keep order)
// Sets related.R.BannerPhotoBlob.
func (o *Blob) RemoveBannerPhotoBlobTasks(exec boil.Executor, related ...*Task) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BannerPhotoBlobID, nil)
		if rel.R != nil {
			rel.R.BannerPhotoBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("banner_photo_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BannerPhotoBlobTasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.BannerPhotoBlobTasks)
			if ln > 1 && i < ln-1 {
				o.R.BannerPhotoBlobTasks[i] = o.R.BannerPhotoBlobTasks[ln-1]
			}
			o.R.BannerPhotoBlobTasks = o.R.BannerPhotoBlobTasks[:ln-1]
			break
		}
	}

	return nil
}

// AddBrandLogoBlobTasks adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.BrandLogoBlobTasks.
// Sets related.R.BrandLogoBlob appropriately.
func (o *Blob) AddBrandLogoBlobTasks(exec boil.Executor, insert bool, related ...*Task) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandLogoBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_logo_blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, taskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandLogoBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			BrandLogoBlobTasks: related,
		}
	} else {
		o.R.BrandLogoBlobTasks = append(o.R.BrandLogoBlobTasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taskR{
				BrandLogoBlob: o,
			}
		} else {
			rel.R.BrandLogoBlob = o
		}
	}
	return nil
}

// SetBrandLogoBlobTasks removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BrandLogoBlob's BrandLogoBlobTasks accordingly.
// Replaces o.R.BrandLogoBlobTasks with related.
// Sets related.R.BrandLogoBlob's BrandLogoBlobTasks accordingly.
func (o *Blob) SetBrandLogoBlobTasks(exec boil.Executor, insert bool, related ...*Task) error {
	query := "update \"tasks\" set \"brand_logo_blob_id\" = null where \"brand_logo_blob_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BrandLogoBlobTasks {
			queries.SetScanner(&rel.BrandLogoBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BrandLogoBlob = nil
		}

		o.R.BrandLogoBlobTasks = nil
	}
	return o.AddBrandLogoBlobTasks(exec, insert, related...)
}

// RemoveBrandLogoBlobTasks relationships from objects passed in.
// Removes related items from R.BrandLogoBlobTasks (uses pointer comparison, removal does not keep order)
// Sets related.R.BrandLogoBlob.
func (o *Blob) RemoveBrandLogoBlobTasks(exec boil.Executor, related ...*Task) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandLogoBlobID, nil)
		if rel.R != nil {
			rel.R.BrandLogoBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_logo_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BrandLogoBlobTasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.BrandLogoBlobTasks)
			if ln > 1 && i < ln-1 {
				o.R.BrandLogoBlobTasks[i] = o.R.BrandLogoBlobTasks[ln-1]
			}
			o.R.BrandLogoBlobTasks = o.R.BrandLogoBlobTasks[:ln-1]
			break
		}
	}

	return nil
}

// AddCartonPhotoBlobTransactions adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.CartonPhotoBlobTransactions.
// Sets related.R.CartonPhotoBlob appropriately.
func (o *Blob) AddCartonPhotoBlobTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CartonPhotoBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"carton_photo_blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CartonPhotoBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			CartonPhotoBlobTransactions: related,
		}
	} else {
		o.R.CartonPhotoBlobTransactions = append(o.R.CartonPhotoBlobTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				CartonPhotoBlob: o,
			}
		} else {
			rel.R.CartonPhotoBlob = o
		}
	}
	return nil
}

// SetCartonPhotoBlobTransactions removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CartonPhotoBlob's CartonPhotoBlobTransactions accordingly.
// Replaces o.R.CartonPhotoBlobTransactions with related.
// Sets related.R.CartonPhotoBlob's CartonPhotoBlobTransactions accordingly.
func (o *Blob) SetCartonPhotoBlobTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"carton_photo_blob_id\" = null where \"carton_photo_blob_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CartonPhotoBlobTransactions {
			queries.SetScanner(&rel.CartonPhotoBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CartonPhotoBlob = nil
		}

		o.R.CartonPhotoBlobTransactions = nil
	}
	return o.AddCartonPhotoBlobTransactions(exec, insert, related...)
}

// RemoveCartonPhotoBlobTransactions relationships from objects passed in.
// Removes related items from R.CartonPhotoBlobTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.CartonPhotoBlob.
func (o *Blob) RemoveCartonPhotoBlobTransactions(exec boil.Executor, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CartonPhotoBlobID, nil)
		if rel.R != nil {
			rel.R.CartonPhotoBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("carton_photo_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CartonPhotoBlobTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.CartonPhotoBlobTransactions)
			if ln > 1 && i < ln-1 {
				o.R.CartonPhotoBlobTransactions[i] = o.R.CartonPhotoBlobTransactions[ln-1]
			}
			o.R.CartonPhotoBlobTransactions = o.R.CartonPhotoBlobTransactions[:ln-1]
			break
		}
	}

	return nil
}

// AddProductPhotoBlobTransactions adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.ProductPhotoBlobTransactions.
// Sets related.R.ProductPhotoBlob appropriately.
func (o *Blob) AddProductPhotoBlobTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductPhotoBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_photo_blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductPhotoBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			ProductPhotoBlobTransactions: related,
		}
	} else {
		o.R.ProductPhotoBlobTransactions = append(o.R.ProductPhotoBlobTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				ProductPhotoBlob: o,
			}
		} else {
			rel.R.ProductPhotoBlob = o
		}
	}
	return nil
}

// SetProductPhotoBlobTransactions removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductPhotoBlob's ProductPhotoBlobTransactions accordingly.
// Replaces o.R.ProductPhotoBlobTransactions with related.
// Sets related.R.ProductPhotoBlob's ProductPhotoBlobTransactions accordingly.
func (o *Blob) SetProductPhotoBlobTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"product_photo_blob_id\" = null where \"product_photo_blob_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductPhotoBlobTransactions {
			queries.SetScanner(&rel.ProductPhotoBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductPhotoBlob = nil
		}

		o.R.ProductPhotoBlobTransactions = nil
	}
	return o.AddProductPhotoBlobTransactions(exec, insert, related...)
}

// RemoveProductPhotoBlobTransactions relationships from objects passed in.
// Removes related items from R.ProductPhotoBlobTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductPhotoBlob.
func (o *Blob) RemoveProductPhotoBlobTransactions(exec boil.Executor, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductPhotoBlobID, nil)
		if rel.R != nil {
			rel.R.ProductPhotoBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("product_photo_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductPhotoBlobTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductPhotoBlobTransactions)
			if ln > 1 && i < ln-1 {
				o.R.ProductPhotoBlobTransactions[i] = o.R.ProductPhotoBlobTransactions[ln-1]
			}
			o.R.ProductPhotoBlobTransactions = o.R.ProductPhotoBlobTransactions[:ln-1]
			break
		}
	}

	return nil
}

// Blobs retrieves all the records using an executor.
func Blobs(mods ...qm.QueryMod) blobQuery {
	mods = append(mods, qm.From("\"blobs\""))
	return blobQuery{NewQuery(mods...)}
}

// FindBlob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlob(exec boil.Executor, iD string, selectCols ...string) (*Blob, error) {
	blobObj := &Blob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blobs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blobObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from blobs")
	}

	return blobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Blob) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no blobs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blobInsertCacheMut.RLock()
	cache, cached := blobInsertCache[key]
	blobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blobAllColumns,
			blobColumnsWithDefault,
			blobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blobType, blobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blobType, blobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into blobs")
	}

	if !cached {
		blobInsertCacheMut.Lock()
		blobInsertCache[key] = cache
		blobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Blob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Blob) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blobUpdateCacheMut.RLock()
	cache, cached := blobUpdateCache[key]
	blobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blobAllColumns,
			blobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update blobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blobType, blobMapping, append(wl, blobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update blobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for blobs")
	}

	if !cached {
		blobUpdateCacheMut.Lock()
		blobUpdateCache[key] = cache
		blobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blobQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for blobs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlobSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blobPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in blob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all blob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Blob) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no blobs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blobUpsertCacheMut.RLock()
	cache, cached := blobUpsertCache[key]
	blobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blobAllColumns,
			blobColumnsWithDefault,
			blobColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blobAllColumns,
			blobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert blobs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blobPrimaryKeyColumns))
			copy(conflict, blobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blobs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blobType, blobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blobType, blobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert blobs")
	}

	if !cached {
		blobUpsertCacheMut.Lock()
		blobUpsertCache[key] = cache
		blobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Blob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Blob) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Blob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blobPrimaryKeyMapping)
	sql := "DELETE FROM \"blobs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for blobs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blobQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no blobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for blobs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlobSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blobPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from blob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for blobs")
	}

	if len(blobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Blob) Reload(exec boil.Executor) error {
	ret, err := FindBlob(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlobSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blobs\".* FROM \"blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in BlobSlice")
	}

	*o = slice

	return nil
}

// BlobExists checks if the Blob row exists.
func BlobExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blobs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if blobs exists")
	}

	return exists, nil
}
