// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TrackAction is an object representing the database table.
type TrackAction struct {
	ID            string          `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	RequirePhotos types.BoolArray `db:"require_photos" boil:"require_photos" json:"require_photos" toml:"require_photos" yaml:"require_photos"`
	Code          string          `db:"code" boil:"code" json:"code" toml:"code" yaml:"code"`
	Name          string          `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	NameChinese   string          `db:"name_chinese" boil:"name_chinese" json:"name_chinese" toml:"name_chinese" yaml:"name_chinese"`
	Private       bool            `db:"private" boil:"private" json:"private" toml:"private" yaml:"private"`
	System        bool            `db:"system" boil:"system" json:"system" toml:"system" yaml:"system"`
	Blockchain    bool            `db:"blockchain" boil:"blockchain" json:"blockchain" toml:"blockchain" yaml:"blockchain"`
	Archived      bool            `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt    null.Time       `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt     time.Time       `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time       `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedByID   null.String     `db:"created_by_id" boil:"created_by_id" json:"created_by_id,omitempty" toml:"created_by_id" yaml:"created_by_id,omitempty"`

	R *trackActionR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackActionL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackActionColumns = struct {
	ID            string
	RequirePhotos string
	Code          string
	Name          string
	NameChinese   string
	Private       string
	System        string
	Blockchain    string
	Archived      string
	ArchivedAt    string
	UpdatedAt     string
	CreatedAt     string
	CreatedByID   string
}{
	ID:            "id",
	RequirePhotos: "require_photos",
	Code:          "code",
	Name:          "name",
	NameChinese:   "name_chinese",
	Private:       "private",
	System:        "system",
	Blockchain:    "blockchain",
	Archived:      "archived",
	ArchivedAt:    "archived_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
	CreatedByID:   "created_by_id",
}

// Generated where

type whereHelpertypes_BoolArray struct{ field string }

func (w whereHelpertypes_BoolArray) EQ(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_BoolArray) NEQ(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_BoolArray) LT(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_BoolArray) LTE(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_BoolArray) GT(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_BoolArray) GTE(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TrackActionWhere = struct {
	ID            whereHelperstring
	RequirePhotos whereHelpertypes_BoolArray
	Code          whereHelperstring
	Name          whereHelperstring
	NameChinese   whereHelperstring
	Private       whereHelperbool
	System        whereHelperbool
	Blockchain    whereHelperbool
	Archived      whereHelperbool
	ArchivedAt    whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	CreatedByID   whereHelpernull_String
}{
	ID:            whereHelperstring{field: "\"track_actions\".\"id\""},
	RequirePhotos: whereHelpertypes_BoolArray{field: "\"track_actions\".\"require_photos\""},
	Code:          whereHelperstring{field: "\"track_actions\".\"code\""},
	Name:          whereHelperstring{field: "\"track_actions\".\"name\""},
	NameChinese:   whereHelperstring{field: "\"track_actions\".\"name_chinese\""},
	Private:       whereHelperbool{field: "\"track_actions\".\"private\""},
	System:        whereHelperbool{field: "\"track_actions\".\"system\""},
	Blockchain:    whereHelperbool{field: "\"track_actions\".\"blockchain\""},
	Archived:      whereHelperbool{field: "\"track_actions\".\"archived\""},
	ArchivedAt:    whereHelpernull_Time{field: "\"track_actions\".\"archived_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"track_actions\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"track_actions\".\"created_at\""},
	CreatedByID:   whereHelpernull_String{field: "\"track_actions\".\"created_by_id\""},
}

// TrackActionRels is where relationship names are stored.
var TrackActionRels = struct {
	CreatedBy    string
	Roles        string
	Transactions string
}{
	CreatedBy:    "CreatedBy",
	Roles:        "Roles",
	Transactions: "Transactions",
}

// trackActionR is where relationships are stored.
type trackActionR struct {
	CreatedBy    *User
	Roles        RoleSlice
	Transactions TransactionSlice
}

// NewStruct creates a new relationship struct
func (*trackActionR) NewStruct() *trackActionR {
	return &trackActionR{}
}

// trackActionL is where Load methods for each relationship are stored.
type trackActionL struct{}

var (
	trackActionAllColumns            = []string{"id", "require_photos", "code", "name", "name_chinese", "private", "system", "blockchain", "archived", "archived_at", "updated_at", "created_at", "created_by_id"}
	trackActionColumnsWithoutDefault = []string{"code", "archived_at", "created_by_id"}
	trackActionColumnsWithDefault    = []string{"id", "require_photos", "name", "name_chinese", "private", "system", "blockchain", "archived", "updated_at", "created_at"}
	trackActionPrimaryKeyColumns     = []string{"id"}
)

type (
	// TrackActionSlice is an alias for a slice of pointers to TrackAction.
	// This should generally be used opposed to []TrackAction.
	TrackActionSlice []*TrackAction
	// TrackActionHook is the signature for custom TrackAction hook methods
	TrackActionHook func(boil.Executor, *TrackAction) error

	trackActionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackActionType                 = reflect.TypeOf(&TrackAction{})
	trackActionMapping              = queries.MakeStructMapping(trackActionType)
	trackActionPrimaryKeyMapping, _ = queries.BindMapping(trackActionType, trackActionMapping, trackActionPrimaryKeyColumns)
	trackActionInsertCacheMut       sync.RWMutex
	trackActionInsertCache          = make(map[string]insertCache)
	trackActionUpdateCacheMut       sync.RWMutex
	trackActionUpdateCache          = make(map[string]updateCache)
	trackActionUpsertCacheMut       sync.RWMutex
	trackActionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackActionBeforeInsertHooks []TrackActionHook
var trackActionBeforeUpdateHooks []TrackActionHook
var trackActionBeforeDeleteHooks []TrackActionHook
var trackActionBeforeUpsertHooks []TrackActionHook

var trackActionAfterInsertHooks []TrackActionHook
var trackActionAfterSelectHooks []TrackActionHook
var trackActionAfterUpdateHooks []TrackActionHook
var trackActionAfterDeleteHooks []TrackActionHook
var trackActionAfterUpsertHooks []TrackActionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrackAction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrackAction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrackAction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrackAction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrackAction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrackAction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrackAction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrackAction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrackAction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackActionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackActionHook registers your hook function for all future operations.
func AddTrackActionHook(hookPoint boil.HookPoint, trackActionHook TrackActionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		trackActionBeforeInsertHooks = append(trackActionBeforeInsertHooks, trackActionHook)
	case boil.BeforeUpdateHook:
		trackActionBeforeUpdateHooks = append(trackActionBeforeUpdateHooks, trackActionHook)
	case boil.BeforeDeleteHook:
		trackActionBeforeDeleteHooks = append(trackActionBeforeDeleteHooks, trackActionHook)
	case boil.BeforeUpsertHook:
		trackActionBeforeUpsertHooks = append(trackActionBeforeUpsertHooks, trackActionHook)
	case boil.AfterInsertHook:
		trackActionAfterInsertHooks = append(trackActionAfterInsertHooks, trackActionHook)
	case boil.AfterSelectHook:
		trackActionAfterSelectHooks = append(trackActionAfterSelectHooks, trackActionHook)
	case boil.AfterUpdateHook:
		trackActionAfterUpdateHooks = append(trackActionAfterUpdateHooks, trackActionHook)
	case boil.AfterDeleteHook:
		trackActionAfterDeleteHooks = append(trackActionAfterDeleteHooks, trackActionHook)
	case boil.AfterUpsertHook:
		trackActionAfterUpsertHooks = append(trackActionAfterUpsertHooks, trackActionHook)
	}
}

// One returns a single trackAction record from the query.
func (q trackActionQuery) One(exec boil.Executor) (*TrackAction, error) {
	o := &TrackAction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for track_actions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrackAction records from the query.
func (q trackActionQuery) All(exec boil.Executor) (TrackActionSlice, error) {
	var o []*TrackAction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to TrackAction slice")
	}

	if len(trackActionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrackAction records in the query.
func (q trackActionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count track_actions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackActionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if track_actions exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *TrackAction) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Roles retrieves all the role's Roles with an executor.
func (o *TrackAction) Roles(mods ...qm.QueryMod) roleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"role_track_actions\" on \"roles\".\"id\" = \"role_track_actions\".\"role_id\""),
		qm.Where("\"role_track_actions\".\"track_action_id\"=?", o.ID),
	)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "\"roles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"roles\".*"})
	}

	return query
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *TrackAction) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"track_action_id\"=?", o.ID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackActionL) LoadCreatedBy(e boil.Executor, singular bool, maybeTrackAction interface{}, mods queries.Applicator) error {
	var slice []*TrackAction
	var object *TrackAction

	if singular {
		object = maybeTrackAction.(*TrackAction)
	} else {
		slice = *maybeTrackAction.(*[]*TrackAction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackActionR{}
		}
		if !queries.IsNil(object.CreatedByID) {
			args = append(args, object.CreatedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackActionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedByID) {
				args = append(args, obj.CreatedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(trackActionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByTrackActions = append(foreign.R.CreatedByTrackActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedByID, foreign.ID) {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByTrackActions = append(foreign.R.CreatedByTrackActions, local)
				break
			}
		}
	}

	return nil
}

// LoadRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackActionL) LoadRoles(e boil.Executor, singular bool, maybeTrackAction interface{}, mods queries.Applicator) error {
	var slice []*TrackAction
	var object *TrackAction

	if singular {
		object = maybeTrackAction.(*TrackAction)
	} else {
		slice = *maybeTrackAction.(*[]*TrackAction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackActionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackActionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"roles\".*, \"a\".\"track_action_id\""),
		qm.From("\"roles\""),
		qm.InnerJoin("\"role_track_actions\" as \"a\" on \"roles\".\"id\" = \"a\".\"role_id\""),
		qm.WhereIn("\"a\".\"track_action_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load roles")
	}

	var resultSlice []*Role

	var localJoinCols []string
	for results.Next() {
		one := new(Role)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.Permissions, &one.Tier, &one.Archived, &one.ArchivedAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for roles")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice roles")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Roles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleR{}
			}
			foreign.R.TrackActions = append(foreign.R.TrackActions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Roles = append(local.R.Roles, foreign)
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.TrackActions = append(foreign.R.TrackActions, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackActionL) LoadTransactions(e boil.Executor, singular bool, maybeTrackAction interface{}, mods queries.Applicator) error {
	var slice []*TrackAction
	var object *TrackAction

	if singular {
		object = maybeTrackAction.(*TrackAction)
	} else {
		slice = *maybeTrackAction.(*[]*TrackAction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackActionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackActionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`transactions`), qm.WhereIn(`transactions.track_action_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.TrackAction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackActionID {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TrackAction = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the trackAction to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByTrackActions.
func (o *TrackAction) SetCreatedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"track_actions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackActionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedByID, related.ID)
	if o.R == nil {
		o.R = &trackActionR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByTrackActions: TrackActionSlice{o},
		}
	} else {
		related.R.CreatedByTrackActions = append(related.R.CreatedByTrackActions, o)
	}

	return nil
}

// RemoveCreatedBy relationship.
// Sets o.R.CreatedBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TrackAction) RemoveCreatedBy(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedByID, nil)
	if _, err = o.Update(exec, boil.Whitelist("created_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByTrackActions {
		if queries.Equal(o.CreatedByID, ri.CreatedByID) {
			continue
		}

		ln := len(related.R.CreatedByTrackActions)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByTrackActions[i] = related.R.CreatedByTrackActions[ln-1]
		}
		related.R.CreatedByTrackActions = related.R.CreatedByTrackActions[:ln-1]
		break
	}
	return nil
}

// AddRoles adds the given related objects to the existing relationships
// of the track_action, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.TrackActions appropriately.
func (o *TrackAction) AddRoles(exec boil.Executor, insert bool, related ...*Role) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"role_track_actions\" (\"track_action_id\", \"role_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &trackActionR{
			Roles: related,
		}
	} else {
		o.R.Roles = append(o.R.Roles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleR{
				TrackActions: TrackActionSlice{o},
			}
		} else {
			rel.R.TrackActions = append(rel.R.TrackActions, o)
		}
	}
	return nil
}

// SetRoles removes all previously related items of the
// track_action replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TrackActions's Roles accordingly.
// Replaces o.R.Roles with related.
// Sets related.R.TrackActions's Roles accordingly.
func (o *TrackAction) SetRoles(exec boil.Executor, insert bool, related ...*Role) error {
	query := "delete from \"role_track_actions\" where \"track_action_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRolesFromTrackActionsSlice(o, related)
	if o.R != nil {
		o.R.Roles = nil
	}
	return o.AddRoles(exec, insert, related...)
}

// RemoveRoles relationships from objects passed in.
// Removes related items from R.Roles (uses pointer comparison, removal does not keep order)
// Sets related.R.TrackActions.
func (o *TrackAction) RemoveRoles(exec boil.Executor, related ...*Role) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"role_track_actions\" where \"track_action_id\" = $1 and \"role_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRolesFromTrackActionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Roles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Roles)
			if ln > 1 && i < ln-1 {
				o.R.Roles[i] = o.R.Roles[ln-1]
			}
			o.R.Roles = o.R.Roles[:ln-1]
			break
		}
	}

	return nil
}

func removeRolesFromTrackActionsSlice(o *TrackAction, related []*Role) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.TrackActions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.TrackActions)
			if ln > 1 && i < ln-1 {
				rel.R.TrackActions[i] = rel.R.TrackActions[ln-1]
			}
			rel.R.TrackActions = rel.R.TrackActions[:ln-1]
			break
		}
	}
}

// AddTransactions adds the given related objects to the existing relationships
// of the track_action, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.TrackAction appropriately.
func (o *TrackAction) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackActionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"track_action_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackActionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackActionR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				TrackAction: o,
			}
		} else {
			rel.R.TrackAction = o
		}
	}
	return nil
}

// TrackActions retrieves all the records using an executor.
func TrackActions(mods ...qm.QueryMod) trackActionQuery {
	mods = append(mods, qm.From("\"track_actions\""))
	return trackActionQuery{NewQuery(mods...)}
}

// FindTrackAction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrackAction(exec boil.Executor, iD string, selectCols ...string) (*TrackAction, error) {
	trackActionObj := &TrackAction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"track_actions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, trackActionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from track_actions")
	}

	return trackActionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrackAction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no track_actions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackActionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackActionInsertCacheMut.RLock()
	cache, cached := trackActionInsertCache[key]
	trackActionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackActionAllColumns,
			trackActionColumnsWithDefault,
			trackActionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackActionType, trackActionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackActionType, trackActionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"track_actions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"track_actions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into track_actions")
	}

	if !cached {
		trackActionInsertCacheMut.Lock()
		trackActionInsertCache[key] = cache
		trackActionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TrackAction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrackAction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackActionUpdateCacheMut.RLock()
	cache, cached := trackActionUpdateCache[key]
	trackActionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackActionAllColumns,
			trackActionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update track_actions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"track_actions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackActionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackActionType, trackActionMapping, append(wl, trackActionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update track_actions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for track_actions")
	}

	if !cached {
		trackActionUpdateCacheMut.Lock()
		trackActionUpdateCache[key] = cache
		trackActionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackActionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for track_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for track_actions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackActionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"track_actions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackActionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in trackAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all trackAction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrackAction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no track_actions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackActionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackActionUpsertCacheMut.RLock()
	cache, cached := trackActionUpsertCache[key]
	trackActionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trackActionAllColumns,
			trackActionColumnsWithDefault,
			trackActionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trackActionAllColumns,
			trackActionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert track_actions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackActionPrimaryKeyColumns))
			copy(conflict, trackActionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"track_actions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trackActionType, trackActionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackActionType, trackActionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert track_actions")
	}

	if !cached {
		trackActionUpsertCacheMut.Lock()
		trackActionUpsertCache[key] = cache
		trackActionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TrackAction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrackAction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no TrackAction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackActionPrimaryKeyMapping)
	sql := "DELETE FROM \"track_actions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from track_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for track_actions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackActionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no trackActionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from track_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for track_actions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackActionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackActionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"track_actions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackActionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from trackAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for track_actions")
	}

	if len(trackActionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrackAction) Reload(exec boil.Executor) error {
	ret, err := FindTrackAction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackActionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackActionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"track_actions\".* FROM \"track_actions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackActionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TrackActionSlice")
	}

	*o = slice

	return nil
}

// TrackActionExists checks if the TrackAction row exists.
func TrackActionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"track_actions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if track_actions exists")
	}

	return exists, nil
}
