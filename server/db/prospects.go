// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Prospect is an object representing the database table.
type Prospect struct {
	ID                 string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Email              string      `db:"email" boil:"email" json:"email" toml:"email" yaml:"email"`
	FirstName          null.String `db:"first_name" boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName           null.String `db:"last_name" boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	OnboardingComplete bool        `db:"onboarding_complete" boil:"onboarding_complete" json:"onboarding_complete" toml:"onboarding_complete" yaml:"onboarding_complete"`

	R *prospectR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L prospectL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProspectColumns = struct {
	ID                 string
	Email              string
	FirstName          string
	LastName           string
	OnboardingComplete string
}{
	ID:                 "id",
	Email:              "email",
	FirstName:          "first_name",
	LastName:           "last_name",
	OnboardingComplete: "onboarding_complete",
}

// Generated where

var ProspectWhere = struct {
	ID                 whereHelperstring
	Email              whereHelperstring
	FirstName          whereHelpernull_String
	LastName           whereHelpernull_String
	OnboardingComplete whereHelperbool
}{
	ID:                 whereHelperstring{field: "\"prospects\".\"id\""},
	Email:              whereHelperstring{field: "\"prospects\".\"email\""},
	FirstName:          whereHelpernull_String{field: "\"prospects\".\"first_name\""},
	LastName:           whereHelpernull_String{field: "\"prospects\".\"last_name\""},
	OnboardingComplete: whereHelperbool{field: "\"prospects\".\"onboarding_complete\""},
}

// ProspectRels is where relationship names are stored.
var ProspectRels = struct {
}{}

// prospectR is where relationships are stored.
type prospectR struct {
}

// NewStruct creates a new relationship struct
func (*prospectR) NewStruct() *prospectR {
	return &prospectR{}
}

// prospectL is where Load methods for each relationship are stored.
type prospectL struct{}

var (
	prospectAllColumns            = []string{"id", "email", "first_name", "last_name", "onboarding_complete"}
	prospectColumnsWithoutDefault = []string{"email", "first_name", "last_name"}
	prospectColumnsWithDefault    = []string{"id", "onboarding_complete"}
	prospectPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProspectSlice is an alias for a slice of pointers to Prospect.
	// This should generally be used opposed to []Prospect.
	ProspectSlice []*Prospect
	// ProspectHook is the signature for custom Prospect hook methods
	ProspectHook func(boil.Executor, *Prospect) error

	prospectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	prospectType                 = reflect.TypeOf(&Prospect{})
	prospectMapping              = queries.MakeStructMapping(prospectType)
	prospectPrimaryKeyMapping, _ = queries.BindMapping(prospectType, prospectMapping, prospectPrimaryKeyColumns)
	prospectInsertCacheMut       sync.RWMutex
	prospectInsertCache          = make(map[string]insertCache)
	prospectUpdateCacheMut       sync.RWMutex
	prospectUpdateCache          = make(map[string]updateCache)
	prospectUpsertCacheMut       sync.RWMutex
	prospectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var prospectBeforeInsertHooks []ProspectHook
var prospectBeforeUpdateHooks []ProspectHook
var prospectBeforeDeleteHooks []ProspectHook
var prospectBeforeUpsertHooks []ProspectHook

var prospectAfterInsertHooks []ProspectHook
var prospectAfterSelectHooks []ProspectHook
var prospectAfterUpdateHooks []ProspectHook
var prospectAfterDeleteHooks []ProspectHook
var prospectAfterUpsertHooks []ProspectHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Prospect) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Prospect) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Prospect) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Prospect) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Prospect) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Prospect) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Prospect) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Prospect) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Prospect) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range prospectAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProspectHook registers your hook function for all future operations.
func AddProspectHook(hookPoint boil.HookPoint, prospectHook ProspectHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		prospectBeforeInsertHooks = append(prospectBeforeInsertHooks, prospectHook)
	case boil.BeforeUpdateHook:
		prospectBeforeUpdateHooks = append(prospectBeforeUpdateHooks, prospectHook)
	case boil.BeforeDeleteHook:
		prospectBeforeDeleteHooks = append(prospectBeforeDeleteHooks, prospectHook)
	case boil.BeforeUpsertHook:
		prospectBeforeUpsertHooks = append(prospectBeforeUpsertHooks, prospectHook)
	case boil.AfterInsertHook:
		prospectAfterInsertHooks = append(prospectAfterInsertHooks, prospectHook)
	case boil.AfterSelectHook:
		prospectAfterSelectHooks = append(prospectAfterSelectHooks, prospectHook)
	case boil.AfterUpdateHook:
		prospectAfterUpdateHooks = append(prospectAfterUpdateHooks, prospectHook)
	case boil.AfterDeleteHook:
		prospectAfterDeleteHooks = append(prospectAfterDeleteHooks, prospectHook)
	case boil.AfterUpsertHook:
		prospectAfterUpsertHooks = append(prospectAfterUpsertHooks, prospectHook)
	}
}

// One returns a single prospect record from the query.
func (q prospectQuery) One(exec boil.Executor) (*Prospect, error) {
	o := &Prospect{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for prospects")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Prospect records from the query.
func (q prospectQuery) All(exec boil.Executor) (ProspectSlice, error) {
	var o []*Prospect

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Prospect slice")
	}

	if len(prospectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Prospect records in the query.
func (q prospectQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count prospects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q prospectQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if prospects exists")
	}

	return count > 0, nil
}

// Prospects retrieves all the records using an executor.
func Prospects(mods ...qm.QueryMod) prospectQuery {
	mods = append(mods, qm.From("\"prospects\""))
	return prospectQuery{NewQuery(mods...)}
}

// FindProspect retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProspect(exec boil.Executor, iD string, selectCols ...string) (*Prospect, error) {
	prospectObj := &Prospect{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"prospects\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, prospectObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from prospects")
	}

	return prospectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Prospect) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no prospects provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prospectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	prospectInsertCacheMut.RLock()
	cache, cached := prospectInsertCache[key]
	prospectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			prospectAllColumns,
			prospectColumnsWithDefault,
			prospectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(prospectType, prospectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(prospectType, prospectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"prospects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"prospects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into prospects")
	}

	if !cached {
		prospectInsertCacheMut.Lock()
		prospectInsertCache[key] = cache
		prospectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Prospect.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Prospect) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	prospectUpdateCacheMut.RLock()
	cache, cached := prospectUpdateCache[key]
	prospectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			prospectAllColumns,
			prospectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update prospects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"prospects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, prospectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(prospectType, prospectMapping, append(wl, prospectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update prospects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for prospects")
	}

	if !cached {
		prospectUpdateCacheMut.Lock()
		prospectUpdateCache[key] = cache
		prospectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q prospectQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for prospects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for prospects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProspectSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prospectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"prospects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, prospectPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in prospect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all prospect")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Prospect) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no prospects provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prospectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	prospectUpsertCacheMut.RLock()
	cache, cached := prospectUpsertCache[key]
	prospectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			prospectAllColumns,
			prospectColumnsWithDefault,
			prospectColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			prospectAllColumns,
			prospectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert prospects, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(prospectPrimaryKeyColumns))
			copy(conflict, prospectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"prospects\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(prospectType, prospectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(prospectType, prospectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert prospects")
	}

	if !cached {
		prospectUpsertCacheMut.Lock()
		prospectUpsertCache[key] = cache
		prospectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Prospect record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Prospect) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Prospect provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), prospectPrimaryKeyMapping)
	sql := "DELETE FROM \"prospects\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from prospects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for prospects")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q prospectQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no prospectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from prospects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for prospects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProspectSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(prospectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prospectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"prospects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prospectPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from prospect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for prospects")
	}

	if len(prospectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Prospect) Reload(exec boil.Executor) error {
	ret, err := FindProspect(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProspectSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProspectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prospectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"prospects\".* FROM \"prospects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prospectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ProspectSlice")
	}

	*o = slice

	return nil
}

// ProspectExists checks if the Prospect row exists.
func ProspectExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"prospects\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if prospects exists")
	}

	return exists, nil
}
