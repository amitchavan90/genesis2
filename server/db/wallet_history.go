// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// WalletHistory is an object representing the database table.
type WalletHistory struct {
	ID              string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          string      `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	LoyaltyPoints   int         `db:"loyalty_points" boil:"loyalty_points" json:"loyalty_points" toml:"loyalty_points" yaml:"loyalty_points"`
	Message         string      `db:"message" boil:"message" json:"message" toml:"message" yaml:"message"`
	IsCredit        bool        `db:"is_credit" boil:"is_credit" json:"is_credit" toml:"is_credit" yaml:"is_credit"`
	TransactionHash null.String `db:"transaction_hash" boil:"transaction_hash" json:"transaction_hash,omitempty" toml:"transaction_hash" yaml:"transaction_hash,omitempty"`
	CreatedAt       time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *walletHistoryR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L walletHistoryL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WalletHistoryColumns = struct {
	ID              string
	UserID          string
	LoyaltyPoints   string
	Message         string
	IsCredit        string
	TransactionHash string
	CreatedAt       string
}{
	ID:              "id",
	UserID:          "user_id",
	LoyaltyPoints:   "loyalty_points",
	Message:         "message",
	IsCredit:        "is_credit",
	TransactionHash: "transaction_hash",
	CreatedAt:       "created_at",
}

// Generated where

var WalletHistoryWhere = struct {
	ID              whereHelperstring
	UserID          whereHelperstring
	LoyaltyPoints   whereHelperint
	Message         whereHelperstring
	IsCredit        whereHelperbool
	TransactionHash whereHelpernull_String
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"wallet_history\".\"id\""},
	UserID:          whereHelperstring{field: "\"wallet_history\".\"user_id\""},
	LoyaltyPoints:   whereHelperint{field: "\"wallet_history\".\"loyalty_points\""},
	Message:         whereHelperstring{field: "\"wallet_history\".\"message\""},
	IsCredit:        whereHelperbool{field: "\"wallet_history\".\"is_credit\""},
	TransactionHash: whereHelpernull_String{field: "\"wallet_history\".\"transaction_hash\""},
	CreatedAt:       whereHelpertime_Time{field: "\"wallet_history\".\"created_at\""},
}

// WalletHistoryRels is where relationship names are stored.
var WalletHistoryRels = struct {
	User string
}{
	User: "User",
}

// walletHistoryR is where relationships are stored.
type walletHistoryR struct {
	User *User
}

// NewStruct creates a new relationship struct
func (*walletHistoryR) NewStruct() *walletHistoryR {
	return &walletHistoryR{}
}

// walletHistoryL is where Load methods for each relationship are stored.
type walletHistoryL struct{}

var (
	walletHistoryAllColumns            = []string{"id", "user_id", "loyalty_points", "message", "is_credit", "transaction_hash", "created_at"}
	walletHistoryColumnsWithoutDefault = []string{"user_id", "loyalty_points", "transaction_hash"}
	walletHistoryColumnsWithDefault    = []string{"id", "message", "is_credit", "created_at"}
	walletHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// WalletHistorySlice is an alias for a slice of pointers to WalletHistory.
	// This should generally be used opposed to []WalletHistory.
	WalletHistorySlice []*WalletHistory
	// WalletHistoryHook is the signature for custom WalletHistory hook methods
	WalletHistoryHook func(boil.Executor, *WalletHistory) error

	walletHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	walletHistoryType                 = reflect.TypeOf(&WalletHistory{})
	walletHistoryMapping              = queries.MakeStructMapping(walletHistoryType)
	walletHistoryPrimaryKeyMapping, _ = queries.BindMapping(walletHistoryType, walletHistoryMapping, walletHistoryPrimaryKeyColumns)
	walletHistoryInsertCacheMut       sync.RWMutex
	walletHistoryInsertCache          = make(map[string]insertCache)
	walletHistoryUpdateCacheMut       sync.RWMutex
	walletHistoryUpdateCache          = make(map[string]updateCache)
	walletHistoryUpsertCacheMut       sync.RWMutex
	walletHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var walletHistoryBeforeInsertHooks []WalletHistoryHook
var walletHistoryBeforeUpdateHooks []WalletHistoryHook
var walletHistoryBeforeDeleteHooks []WalletHistoryHook
var walletHistoryBeforeUpsertHooks []WalletHistoryHook

var walletHistoryAfterInsertHooks []WalletHistoryHook
var walletHistoryAfterSelectHooks []WalletHistoryHook
var walletHistoryAfterUpdateHooks []WalletHistoryHook
var walletHistoryAfterDeleteHooks []WalletHistoryHook
var walletHistoryAfterUpsertHooks []WalletHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WalletHistory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WalletHistory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WalletHistory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WalletHistory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WalletHistory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WalletHistory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WalletHistory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WalletHistory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WalletHistory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletHistoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWalletHistoryHook registers your hook function for all future operations.
func AddWalletHistoryHook(hookPoint boil.HookPoint, walletHistoryHook WalletHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		walletHistoryBeforeInsertHooks = append(walletHistoryBeforeInsertHooks, walletHistoryHook)
	case boil.BeforeUpdateHook:
		walletHistoryBeforeUpdateHooks = append(walletHistoryBeforeUpdateHooks, walletHistoryHook)
	case boil.BeforeDeleteHook:
		walletHistoryBeforeDeleteHooks = append(walletHistoryBeforeDeleteHooks, walletHistoryHook)
	case boil.BeforeUpsertHook:
		walletHistoryBeforeUpsertHooks = append(walletHistoryBeforeUpsertHooks, walletHistoryHook)
	case boil.AfterInsertHook:
		walletHistoryAfterInsertHooks = append(walletHistoryAfterInsertHooks, walletHistoryHook)
	case boil.AfterSelectHook:
		walletHistoryAfterSelectHooks = append(walletHistoryAfterSelectHooks, walletHistoryHook)
	case boil.AfterUpdateHook:
		walletHistoryAfterUpdateHooks = append(walletHistoryAfterUpdateHooks, walletHistoryHook)
	case boil.AfterDeleteHook:
		walletHistoryAfterDeleteHooks = append(walletHistoryAfterDeleteHooks, walletHistoryHook)
	case boil.AfterUpsertHook:
		walletHistoryAfterUpsertHooks = append(walletHistoryAfterUpsertHooks, walletHistoryHook)
	}
}

// One returns a single walletHistory record from the query.
func (q walletHistoryQuery) One(exec boil.Executor) (*WalletHistory, error) {
	o := &WalletHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for wallet_history")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WalletHistory records from the query.
func (q walletHistoryQuery) All(exec boil.Executor) (WalletHistorySlice, error) {
	var o []*WalletHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to WalletHistory slice")
	}

	if len(walletHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WalletHistory records in the query.
func (q walletHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count wallet_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q walletHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if wallet_history exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *WalletHistory) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (walletHistoryL) LoadUser(e boil.Executor, singular bool, maybeWalletHistory interface{}, mods queries.Applicator) error {
	var slice []*WalletHistory
	var object *WalletHistory

	if singular {
		object = maybeWalletHistory.(*WalletHistory)
	} else {
		slice = *maybeWalletHistory.(*[]*WalletHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walletHistoryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walletHistoryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(walletHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.WalletHistories = append(foreign.R.WalletHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.WalletHistories = append(foreign.R.WalletHistories, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the walletHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.WalletHistories.
func (o *WalletHistory) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wallet_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, walletHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &walletHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			WalletHistories: WalletHistorySlice{o},
		}
	} else {
		related.R.WalletHistories = append(related.R.WalletHistories, o)
	}

	return nil
}

// WalletHistories retrieves all the records using an executor.
func WalletHistories(mods ...qm.QueryMod) walletHistoryQuery {
	mods = append(mods, qm.From("\"wallet_history\""))
	return walletHistoryQuery{NewQuery(mods...)}
}

// FindWalletHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWalletHistory(exec boil.Executor, iD string, selectCols ...string) (*WalletHistory, error) {
	walletHistoryObj := &WalletHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wallet_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, walletHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from wallet_history")
	}

	return walletHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WalletHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no wallet_history provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walletHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	walletHistoryInsertCacheMut.RLock()
	cache, cached := walletHistoryInsertCache[key]
	walletHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			walletHistoryAllColumns,
			walletHistoryColumnsWithDefault,
			walletHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(walletHistoryType, walletHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(walletHistoryType, walletHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wallet_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wallet_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into wallet_history")
	}

	if !cached {
		walletHistoryInsertCacheMut.Lock()
		walletHistoryInsertCache[key] = cache
		walletHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the WalletHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WalletHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	walletHistoryUpdateCacheMut.RLock()
	cache, cached := walletHistoryUpdateCache[key]
	walletHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			walletHistoryAllColumns,
			walletHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update wallet_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wallet_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, walletHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(walletHistoryType, walletHistoryMapping, append(wl, walletHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update wallet_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for wallet_history")
	}

	if !cached {
		walletHistoryUpdateCacheMut.Lock()
		walletHistoryUpdateCache[key] = cache
		walletHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q walletHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for wallet_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for wallet_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WalletHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wallet_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, walletHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in walletHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all walletHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WalletHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no wallet_history provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walletHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	walletHistoryUpsertCacheMut.RLock()
	cache, cached := walletHistoryUpsertCache[key]
	walletHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			walletHistoryAllColumns,
			walletHistoryColumnsWithDefault,
			walletHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			walletHistoryAllColumns,
			walletHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert wallet_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(walletHistoryPrimaryKeyColumns))
			copy(conflict, walletHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"wallet_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(walletHistoryType, walletHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(walletHistoryType, walletHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert wallet_history")
	}

	if !cached {
		walletHistoryUpsertCacheMut.Lock()
		walletHistoryUpsertCache[key] = cache
		walletHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single WalletHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WalletHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no WalletHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), walletHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"wallet_history\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from wallet_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for wallet_history")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q walletHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no walletHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from wallet_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for wallet_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WalletHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(walletHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wallet_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from walletHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for wallet_history")
	}

	if len(walletHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WalletHistory) Reload(exec boil.Executor) error {
	ret, err := FindWalletHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WalletHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WalletHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wallet_history\".* FROM \"wallet_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in WalletHistorySlice")
	}

	*o = slice

	return nil
}

// WalletHistoryExists checks if the WalletHistory row exists.
func WalletHistoryExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wallet_history\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if wallet_history exists")
	}

	return exists, nil
}
