// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StockKeepingUnitPhoto is an object representing the database table.
type StockKeepingUnitPhoto struct {
	SkuID     string `db:"sku_id" boil:"sku_id" json:"sku_id" toml:"sku_id" yaml:"sku_id"`
	PhotoID   string `db:"photo_id" boil:"photo_id" json:"photo_id" toml:"photo_id" yaml:"photo_id"`
	SortIndex int    `db:"sort_index" boil:"sort_index" json:"sort_index" toml:"sort_index" yaml:"sort_index"`

	R *stockKeepingUnitPhotoR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L stockKeepingUnitPhotoL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StockKeepingUnitPhotoColumns = struct {
	SkuID     string
	PhotoID   string
	SortIndex string
}{
	SkuID:     "sku_id",
	PhotoID:   "photo_id",
	SortIndex: "sort_index",
}

// Generated where

var StockKeepingUnitPhotoWhere = struct {
	SkuID     whereHelperstring
	PhotoID   whereHelperstring
	SortIndex whereHelperint
}{
	SkuID:     whereHelperstring{field: "\"stock_keeping_unit_photos\".\"sku_id\""},
	PhotoID:   whereHelperstring{field: "\"stock_keeping_unit_photos\".\"photo_id\""},
	SortIndex: whereHelperint{field: "\"stock_keeping_unit_photos\".\"sort_index\""},
}

// StockKeepingUnitPhotoRels is where relationship names are stored.
var StockKeepingUnitPhotoRels = struct {
	Photo string
	Sku   string
}{
	Photo: "Photo",
	Sku:   "Sku",
}

// stockKeepingUnitPhotoR is where relationships are stored.
type stockKeepingUnitPhotoR struct {
	Photo *Blob
	Sku   *StockKeepingUnit
}

// NewStruct creates a new relationship struct
func (*stockKeepingUnitPhotoR) NewStruct() *stockKeepingUnitPhotoR {
	return &stockKeepingUnitPhotoR{}
}

// stockKeepingUnitPhotoL is where Load methods for each relationship are stored.
type stockKeepingUnitPhotoL struct{}

var (
	stockKeepingUnitPhotoAllColumns            = []string{"sku_id", "photo_id", "sort_index"}
	stockKeepingUnitPhotoColumnsWithoutDefault = []string{"sku_id", "photo_id"}
	stockKeepingUnitPhotoColumnsWithDefault    = []string{"sort_index"}
	stockKeepingUnitPhotoPrimaryKeyColumns     = []string{"sku_id", "photo_id"}
)

type (
	// StockKeepingUnitPhotoSlice is an alias for a slice of pointers to StockKeepingUnitPhoto.
	// This should generally be used opposed to []StockKeepingUnitPhoto.
	StockKeepingUnitPhotoSlice []*StockKeepingUnitPhoto
	// StockKeepingUnitPhotoHook is the signature for custom StockKeepingUnitPhoto hook methods
	StockKeepingUnitPhotoHook func(boil.Executor, *StockKeepingUnitPhoto) error

	stockKeepingUnitPhotoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockKeepingUnitPhotoType                 = reflect.TypeOf(&StockKeepingUnitPhoto{})
	stockKeepingUnitPhotoMapping              = queries.MakeStructMapping(stockKeepingUnitPhotoType)
	stockKeepingUnitPhotoPrimaryKeyMapping, _ = queries.BindMapping(stockKeepingUnitPhotoType, stockKeepingUnitPhotoMapping, stockKeepingUnitPhotoPrimaryKeyColumns)
	stockKeepingUnitPhotoInsertCacheMut       sync.RWMutex
	stockKeepingUnitPhotoInsertCache          = make(map[string]insertCache)
	stockKeepingUnitPhotoUpdateCacheMut       sync.RWMutex
	stockKeepingUnitPhotoUpdateCache          = make(map[string]updateCache)
	stockKeepingUnitPhotoUpsertCacheMut       sync.RWMutex
	stockKeepingUnitPhotoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stockKeepingUnitPhotoBeforeInsertHooks []StockKeepingUnitPhotoHook
var stockKeepingUnitPhotoBeforeUpdateHooks []StockKeepingUnitPhotoHook
var stockKeepingUnitPhotoBeforeDeleteHooks []StockKeepingUnitPhotoHook
var stockKeepingUnitPhotoBeforeUpsertHooks []StockKeepingUnitPhotoHook

var stockKeepingUnitPhotoAfterInsertHooks []StockKeepingUnitPhotoHook
var stockKeepingUnitPhotoAfterSelectHooks []StockKeepingUnitPhotoHook
var stockKeepingUnitPhotoAfterUpdateHooks []StockKeepingUnitPhotoHook
var stockKeepingUnitPhotoAfterDeleteHooks []StockKeepingUnitPhotoHook
var stockKeepingUnitPhotoAfterUpsertHooks []StockKeepingUnitPhotoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StockKeepingUnitPhoto) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StockKeepingUnitPhoto) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StockKeepingUnitPhoto) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StockKeepingUnitPhoto) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StockKeepingUnitPhoto) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StockKeepingUnitPhoto) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StockKeepingUnitPhoto) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StockKeepingUnitPhoto) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StockKeepingUnitPhoto) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitPhotoAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStockKeepingUnitPhotoHook registers your hook function for all future operations.
func AddStockKeepingUnitPhotoHook(hookPoint boil.HookPoint, stockKeepingUnitPhotoHook StockKeepingUnitPhotoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		stockKeepingUnitPhotoBeforeInsertHooks = append(stockKeepingUnitPhotoBeforeInsertHooks, stockKeepingUnitPhotoHook)
	case boil.BeforeUpdateHook:
		stockKeepingUnitPhotoBeforeUpdateHooks = append(stockKeepingUnitPhotoBeforeUpdateHooks, stockKeepingUnitPhotoHook)
	case boil.BeforeDeleteHook:
		stockKeepingUnitPhotoBeforeDeleteHooks = append(stockKeepingUnitPhotoBeforeDeleteHooks, stockKeepingUnitPhotoHook)
	case boil.BeforeUpsertHook:
		stockKeepingUnitPhotoBeforeUpsertHooks = append(stockKeepingUnitPhotoBeforeUpsertHooks, stockKeepingUnitPhotoHook)
	case boil.AfterInsertHook:
		stockKeepingUnitPhotoAfterInsertHooks = append(stockKeepingUnitPhotoAfterInsertHooks, stockKeepingUnitPhotoHook)
	case boil.AfterSelectHook:
		stockKeepingUnitPhotoAfterSelectHooks = append(stockKeepingUnitPhotoAfterSelectHooks, stockKeepingUnitPhotoHook)
	case boil.AfterUpdateHook:
		stockKeepingUnitPhotoAfterUpdateHooks = append(stockKeepingUnitPhotoAfterUpdateHooks, stockKeepingUnitPhotoHook)
	case boil.AfterDeleteHook:
		stockKeepingUnitPhotoAfterDeleteHooks = append(stockKeepingUnitPhotoAfterDeleteHooks, stockKeepingUnitPhotoHook)
	case boil.AfterUpsertHook:
		stockKeepingUnitPhotoAfterUpsertHooks = append(stockKeepingUnitPhotoAfterUpsertHooks, stockKeepingUnitPhotoHook)
	}
}

// One returns a single stockKeepingUnitPhoto record from the query.
func (q stockKeepingUnitPhotoQuery) One(exec boil.Executor) (*StockKeepingUnitPhoto, error) {
	o := &StockKeepingUnitPhoto{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for stock_keeping_unit_photos")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StockKeepingUnitPhoto records from the query.
func (q stockKeepingUnitPhotoQuery) All(exec boil.Executor) (StockKeepingUnitPhotoSlice, error) {
	var o []*StockKeepingUnitPhoto

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to StockKeepingUnitPhoto slice")
	}

	if len(stockKeepingUnitPhotoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StockKeepingUnitPhoto records in the query.
func (q stockKeepingUnitPhotoQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count stock_keeping_unit_photos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockKeepingUnitPhotoQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if stock_keeping_unit_photos exists")
	}

	return count > 0, nil
}

// Photo pointed to by the foreign key.
func (o *StockKeepingUnitPhoto) Photo(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PhotoID),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// Sku pointed to by the foreign key.
func (o *StockKeepingUnitPhoto) Sku(mods ...qm.QueryMod) stockKeepingUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkuID),
	}

	queryMods = append(queryMods, mods...)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	return query
}

// LoadPhoto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitPhotoL) LoadPhoto(e boil.Executor, singular bool, maybeStockKeepingUnitPhoto interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnitPhoto
	var object *StockKeepingUnitPhoto

	if singular {
		object = maybeStockKeepingUnitPhoto.(*StockKeepingUnitPhoto)
	} else {
		slice = *maybeStockKeepingUnitPhoto.(*[]*StockKeepingUnitPhoto)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitPhotoR{}
		}
		args = append(args, object.PhotoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitPhotoR{}
			}

			for _, a := range args {
				if a == obj.PhotoID {
					continue Outer
				}
			}

			args = append(args, obj.PhotoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blobs`), qm.WhereIn(`blobs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(stockKeepingUnitPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Photo = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.PhotoStockKeepingUnitPhotos = append(foreign.R.PhotoStockKeepingUnitPhotos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PhotoID == foreign.ID {
				local.R.Photo = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.PhotoStockKeepingUnitPhotos = append(foreign.R.PhotoStockKeepingUnitPhotos, local)
				break
			}
		}
	}

	return nil
}

// LoadSku allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitPhotoL) LoadSku(e boil.Executor, singular bool, maybeStockKeepingUnitPhoto interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnitPhoto
	var object *StockKeepingUnitPhoto

	if singular {
		object = maybeStockKeepingUnitPhoto.(*StockKeepingUnitPhoto)
	} else {
		slice = *maybeStockKeepingUnitPhoto.(*[]*StockKeepingUnitPhoto)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitPhotoR{}
		}
		args = append(args, object.SkuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitPhotoR{}
			}

			for _, a := range args {
				if a == obj.SkuID {
					continue Outer
				}
			}

			args = append(args, obj.SkuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StockKeepingUnit")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StockKeepingUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(stockKeepingUnitPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sku = foreign
		if foreign.R == nil {
			foreign.R = &stockKeepingUnitR{}
		}
		foreign.R.SkuStockKeepingUnitPhotos = append(foreign.R.SkuStockKeepingUnitPhotos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SkuID == foreign.ID {
				local.R.Sku = foreign
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.SkuStockKeepingUnitPhotos = append(foreign.R.SkuStockKeepingUnitPhotos, local)
				break
			}
		}
	}

	return nil
}

// SetPhoto of the stockKeepingUnitPhoto to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotoStockKeepingUnitPhotos.
func (o *StockKeepingUnitPhoto) SetPhoto(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_unit_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"photo_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPhotoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SkuID, o.PhotoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PhotoID = related.ID
	if o.R == nil {
		o.R = &stockKeepingUnitPhotoR{
			Photo: related,
		}
	} else {
		o.R.Photo = related
	}

	if related.R == nil {
		related.R = &blobR{
			PhotoStockKeepingUnitPhotos: StockKeepingUnitPhotoSlice{o},
		}
	} else {
		related.R.PhotoStockKeepingUnitPhotos = append(related.R.PhotoStockKeepingUnitPhotos, o)
	}

	return nil
}

// SetSku of the stockKeepingUnitPhoto to the related item.
// Sets o.R.Sku to related.
// Adds o to related.R.SkuStockKeepingUnitPhotos.
func (o *StockKeepingUnitPhoto) SetSku(exec boil.Executor, insert bool, related *StockKeepingUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_unit_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPhotoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SkuID, o.PhotoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SkuID = related.ID
	if o.R == nil {
		o.R = &stockKeepingUnitPhotoR{
			Sku: related,
		}
	} else {
		o.R.Sku = related
	}

	if related.R == nil {
		related.R = &stockKeepingUnitR{
			SkuStockKeepingUnitPhotos: StockKeepingUnitPhotoSlice{o},
		}
	} else {
		related.R.SkuStockKeepingUnitPhotos = append(related.R.SkuStockKeepingUnitPhotos, o)
	}

	return nil
}

// StockKeepingUnitPhotos retrieves all the records using an executor.
func StockKeepingUnitPhotos(mods ...qm.QueryMod) stockKeepingUnitPhotoQuery {
	mods = append(mods, qm.From("\"stock_keeping_unit_photos\""))
	return stockKeepingUnitPhotoQuery{NewQuery(mods...)}
}

// FindStockKeepingUnitPhoto retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStockKeepingUnitPhoto(exec boil.Executor, skuID string, photoID string, selectCols ...string) (*StockKeepingUnitPhoto, error) {
	stockKeepingUnitPhotoObj := &StockKeepingUnitPhoto{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stock_keeping_unit_photos\" where \"sku_id\"=$1 AND \"photo_id\"=$2", sel,
	)

	q := queries.Raw(query, skuID, photoID)

	err := q.Bind(nil, exec, stockKeepingUnitPhotoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from stock_keeping_unit_photos")
	}

	return stockKeepingUnitPhotoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StockKeepingUnitPhoto) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no stock_keeping_unit_photos provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitPhotoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockKeepingUnitPhotoInsertCacheMut.RLock()
	cache, cached := stockKeepingUnitPhotoInsertCache[key]
	stockKeepingUnitPhotoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockKeepingUnitPhotoAllColumns,
			stockKeepingUnitPhotoColumnsWithDefault,
			stockKeepingUnitPhotoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitPhotoType, stockKeepingUnitPhotoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockKeepingUnitPhotoType, stockKeepingUnitPhotoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stock_keeping_unit_photos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stock_keeping_unit_photos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into stock_keeping_unit_photos")
	}

	if !cached {
		stockKeepingUnitPhotoInsertCacheMut.Lock()
		stockKeepingUnitPhotoInsertCache[key] = cache
		stockKeepingUnitPhotoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the StockKeepingUnitPhoto.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StockKeepingUnitPhoto) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stockKeepingUnitPhotoUpdateCacheMut.RLock()
	cache, cached := stockKeepingUnitPhotoUpdateCache[key]
	stockKeepingUnitPhotoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stockKeepingUnitPhotoAllColumns,
			stockKeepingUnitPhotoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update stock_keeping_unit_photos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stock_keeping_unit_photos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stockKeepingUnitPhotoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitPhotoType, stockKeepingUnitPhotoMapping, append(wl, stockKeepingUnitPhotoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update stock_keeping_unit_photos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for stock_keeping_unit_photos")
	}

	if !cached {
		stockKeepingUnitPhotoUpdateCacheMut.Lock()
		stockKeepingUnitPhotoUpdateCache[key] = cache
		stockKeepingUnitPhotoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stockKeepingUnitPhotoQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for stock_keeping_unit_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for stock_keeping_unit_photos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StockKeepingUnitPhotoSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stock_keeping_unit_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stockKeepingUnitPhotoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in stockKeepingUnitPhoto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all stockKeepingUnitPhoto")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StockKeepingUnitPhoto) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no stock_keeping_unit_photos provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitPhotoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockKeepingUnitPhotoUpsertCacheMut.RLock()
	cache, cached := stockKeepingUnitPhotoUpsertCache[key]
	stockKeepingUnitPhotoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stockKeepingUnitPhotoAllColumns,
			stockKeepingUnitPhotoColumnsWithDefault,
			stockKeepingUnitPhotoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stockKeepingUnitPhotoAllColumns,
			stockKeepingUnitPhotoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert stock_keeping_unit_photos, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stockKeepingUnitPhotoPrimaryKeyColumns))
			copy(conflict, stockKeepingUnitPhotoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stock_keeping_unit_photos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitPhotoType, stockKeepingUnitPhotoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockKeepingUnitPhotoType, stockKeepingUnitPhotoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert stock_keeping_unit_photos")
	}

	if !cached {
		stockKeepingUnitPhotoUpsertCacheMut.Lock()
		stockKeepingUnitPhotoUpsertCache[key] = cache
		stockKeepingUnitPhotoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single StockKeepingUnitPhoto record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StockKeepingUnitPhoto) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no StockKeepingUnitPhoto provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stockKeepingUnitPhotoPrimaryKeyMapping)
	sql := "DELETE FROM \"stock_keeping_unit_photos\" WHERE \"sku_id\"=$1 AND \"photo_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from stock_keeping_unit_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for stock_keeping_unit_photos")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stockKeepingUnitPhotoQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no stockKeepingUnitPhotoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from stock_keeping_unit_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for stock_keeping_unit_photos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StockKeepingUnitPhotoSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stockKeepingUnitPhotoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stock_keeping_unit_photos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitPhotoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from stockKeepingUnitPhoto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for stock_keeping_unit_photos")
	}

	if len(stockKeepingUnitPhotoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StockKeepingUnitPhoto) Reload(exec boil.Executor) error {
	ret, err := FindStockKeepingUnitPhoto(exec, o.SkuID, o.PhotoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StockKeepingUnitPhotoSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StockKeepingUnitPhotoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stock_keeping_unit_photos\".* FROM \"stock_keeping_unit_photos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitPhotoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in StockKeepingUnitPhotoSlice")
	}

	*o = slice

	return nil
}

// StockKeepingUnitPhotoExists checks if the StockKeepingUnitPhoto row exists.
func StockKeepingUnitPhotoExists(exec boil.Executor, skuID string, photoID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stock_keeping_unit_photos\" where \"sku_id\"=$1 AND \"photo_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, skuID, photoID)
	}
	row := exec.QueryRow(sql, skuID, photoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if stock_keeping_unit_photos exists")
	}

	return exists, nil
}
