// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// WalletTransaction is an object representing the database table.
type WalletTransaction struct {
	ID              string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          string      `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	LoyaltyPoints   int         `db:"loyalty_points" boil:"loyalty_points" json:"loyalty_points" toml:"loyalty_points" yaml:"loyalty_points"`
	Message         string      `db:"message" boil:"message" json:"message" toml:"message" yaml:"message"`
	IsCredit        bool        `db:"is_credit" boil:"is_credit" json:"is_credit" toml:"is_credit" yaml:"is_credit"`
	TransactionHash null.String `db:"transaction_hash" boil:"transaction_hash" json:"transaction_hash,omitempty" toml:"transaction_hash" yaml:"transaction_hash,omitempty"`
	CreatedAt       time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *walletTransactionR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L walletTransactionL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WalletTransactionColumns = struct {
	ID              string
	UserID          string
	LoyaltyPoints   string
	Message         string
	IsCredit        string
	TransactionHash string
	CreatedAt       string
}{
	ID:              "id",
	UserID:          "user_id",
	LoyaltyPoints:   "loyalty_points",
	Message:         "message",
	IsCredit:        "is_credit",
	TransactionHash: "transaction_hash",
	CreatedAt:       "created_at",
}

// Generated where

var WalletTransactionWhere = struct {
	ID              whereHelperstring
	UserID          whereHelperstring
	LoyaltyPoints   whereHelperint
	Message         whereHelperstring
	IsCredit        whereHelperbool
	TransactionHash whereHelpernull_String
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"wallet_transaction\".\"id\""},
	UserID:          whereHelperstring{field: "\"wallet_transaction\".\"user_id\""},
	LoyaltyPoints:   whereHelperint{field: "\"wallet_transaction\".\"loyalty_points\""},
	Message:         whereHelperstring{field: "\"wallet_transaction\".\"message\""},
	IsCredit:        whereHelperbool{field: "\"wallet_transaction\".\"is_credit\""},
	TransactionHash: whereHelpernull_String{field: "\"wallet_transaction\".\"transaction_hash\""},
	CreatedAt:       whereHelpertime_Time{field: "\"wallet_transaction\".\"created_at\""},
}

// WalletTransactionRels is where relationship names are stored.
var WalletTransactionRels = struct {
	User string
}{
	User: "User",
}

// walletTransactionR is where relationships are stored.
type walletTransactionR struct {
	User *User
}

// NewStruct creates a new relationship struct
func (*walletTransactionR) NewStruct() *walletTransactionR {
	return &walletTransactionR{}
}

// walletTransactionL is where Load methods for each relationship are stored.
type walletTransactionL struct{}

var (
	walletTransactionAllColumns            = []string{"id", "user_id", "loyalty_points", "message", "is_credit", "transaction_hash", "created_at"}
	walletTransactionColumnsWithoutDefault = []string{"user_id", "loyalty_points", "transaction_hash"}
	walletTransactionColumnsWithDefault    = []string{"id", "message", "is_credit", "created_at"}
	walletTransactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// WalletTransactionSlice is an alias for a slice of pointers to WalletTransaction.
	// This should generally be used opposed to []WalletTransaction.
	WalletTransactionSlice []*WalletTransaction
	// WalletTransactionHook is the signature for custom WalletTransaction hook methods
	WalletTransactionHook func(boil.Executor, *WalletTransaction) error

	walletTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	walletTransactionType                 = reflect.TypeOf(&WalletTransaction{})
	walletTransactionMapping              = queries.MakeStructMapping(walletTransactionType)
	walletTransactionPrimaryKeyMapping, _ = queries.BindMapping(walletTransactionType, walletTransactionMapping, walletTransactionPrimaryKeyColumns)
	walletTransactionInsertCacheMut       sync.RWMutex
	walletTransactionInsertCache          = make(map[string]insertCache)
	walletTransactionUpdateCacheMut       sync.RWMutex
	walletTransactionUpdateCache          = make(map[string]updateCache)
	walletTransactionUpsertCacheMut       sync.RWMutex
	walletTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var walletTransactionBeforeInsertHooks []WalletTransactionHook
var walletTransactionBeforeUpdateHooks []WalletTransactionHook
var walletTransactionBeforeDeleteHooks []WalletTransactionHook
var walletTransactionBeforeUpsertHooks []WalletTransactionHook

var walletTransactionAfterInsertHooks []WalletTransactionHook
var walletTransactionAfterSelectHooks []WalletTransactionHook
var walletTransactionAfterUpdateHooks []WalletTransactionHook
var walletTransactionAfterDeleteHooks []WalletTransactionHook
var walletTransactionAfterUpsertHooks []WalletTransactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WalletTransaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WalletTransaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WalletTransaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WalletTransaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WalletTransaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WalletTransaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WalletTransaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WalletTransaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WalletTransaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range walletTransactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWalletTransactionHook registers your hook function for all future operations.
func AddWalletTransactionHook(hookPoint boil.HookPoint, walletTransactionHook WalletTransactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		walletTransactionBeforeInsertHooks = append(walletTransactionBeforeInsertHooks, walletTransactionHook)
	case boil.BeforeUpdateHook:
		walletTransactionBeforeUpdateHooks = append(walletTransactionBeforeUpdateHooks, walletTransactionHook)
	case boil.BeforeDeleteHook:
		walletTransactionBeforeDeleteHooks = append(walletTransactionBeforeDeleteHooks, walletTransactionHook)
	case boil.BeforeUpsertHook:
		walletTransactionBeforeUpsertHooks = append(walletTransactionBeforeUpsertHooks, walletTransactionHook)
	case boil.AfterInsertHook:
		walletTransactionAfterInsertHooks = append(walletTransactionAfterInsertHooks, walletTransactionHook)
	case boil.AfterSelectHook:
		walletTransactionAfterSelectHooks = append(walletTransactionAfterSelectHooks, walletTransactionHook)
	case boil.AfterUpdateHook:
		walletTransactionAfterUpdateHooks = append(walletTransactionAfterUpdateHooks, walletTransactionHook)
	case boil.AfterDeleteHook:
		walletTransactionAfterDeleteHooks = append(walletTransactionAfterDeleteHooks, walletTransactionHook)
	case boil.AfterUpsertHook:
		walletTransactionAfterUpsertHooks = append(walletTransactionAfterUpsertHooks, walletTransactionHook)
	}
}

// One returns a single walletTransaction record from the query.
func (q walletTransactionQuery) One(exec boil.Executor) (*WalletTransaction, error) {
	o := &WalletTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for wallet_transaction")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WalletTransaction records from the query.
func (q walletTransactionQuery) All(exec boil.Executor) (WalletTransactionSlice, error) {
	var o []*WalletTransaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to WalletTransaction slice")
	}

	if len(walletTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WalletTransaction records in the query.
func (q walletTransactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count wallet_transaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q walletTransactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if wallet_transaction exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *WalletTransaction) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (walletTransactionL) LoadUser(e boil.Executor, singular bool, maybeWalletTransaction interface{}, mods queries.Applicator) error {
	var slice []*WalletTransaction
	var object *WalletTransaction

	if singular {
		object = maybeWalletTransaction.(*WalletTransaction)
	} else {
		slice = *maybeWalletTransaction.(*[]*WalletTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walletTransactionR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walletTransactionR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(walletTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.WalletTransactions = append(foreign.R.WalletTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.WalletTransactions = append(foreign.R.WalletTransactions, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the walletTransaction to the related item.
// Sets o.R.User to related.
// Adds o to related.R.WalletTransactions.
func (o *WalletTransaction) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wallet_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, walletTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &walletTransactionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			WalletTransactions: WalletTransactionSlice{o},
		}
	} else {
		related.R.WalletTransactions = append(related.R.WalletTransactions, o)
	}

	return nil
}

// WalletTransactions retrieves all the records using an executor.
func WalletTransactions(mods ...qm.QueryMod) walletTransactionQuery {
	mods = append(mods, qm.From("\"wallet_transaction\""))
	return walletTransactionQuery{NewQuery(mods...)}
}

// FindWalletTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWalletTransaction(exec boil.Executor, iD string, selectCols ...string) (*WalletTransaction, error) {
	walletTransactionObj := &WalletTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wallet_transaction\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, walletTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from wallet_transaction")
	}

	return walletTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WalletTransaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no wallet_transaction provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walletTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	walletTransactionInsertCacheMut.RLock()
	cache, cached := walletTransactionInsertCache[key]
	walletTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			walletTransactionAllColumns,
			walletTransactionColumnsWithDefault,
			walletTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(walletTransactionType, walletTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(walletTransactionType, walletTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wallet_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wallet_transaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into wallet_transaction")
	}

	if !cached {
		walletTransactionInsertCacheMut.Lock()
		walletTransactionInsertCache[key] = cache
		walletTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the WalletTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WalletTransaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	walletTransactionUpdateCacheMut.RLock()
	cache, cached := walletTransactionUpdateCache[key]
	walletTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			walletTransactionAllColumns,
			walletTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update wallet_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wallet_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, walletTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(walletTransactionType, walletTransactionMapping, append(wl, walletTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update wallet_transaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for wallet_transaction")
	}

	if !cached {
		walletTransactionUpdateCacheMut.Lock()
		walletTransactionUpdateCache[key] = cache
		walletTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q walletTransactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for wallet_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for wallet_transaction")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WalletTransactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wallet_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, walletTransactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in walletTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all walletTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WalletTransaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no wallet_transaction provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walletTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	walletTransactionUpsertCacheMut.RLock()
	cache, cached := walletTransactionUpsertCache[key]
	walletTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			walletTransactionAllColumns,
			walletTransactionColumnsWithDefault,
			walletTransactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			walletTransactionAllColumns,
			walletTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert wallet_transaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(walletTransactionPrimaryKeyColumns))
			copy(conflict, walletTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"wallet_transaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(walletTransactionType, walletTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(walletTransactionType, walletTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert wallet_transaction")
	}

	if !cached {
		walletTransactionUpsertCacheMut.Lock()
		walletTransactionUpsertCache[key] = cache
		walletTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single WalletTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WalletTransaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no WalletTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), walletTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"wallet_transaction\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from wallet_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for wallet_transaction")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q walletTransactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no walletTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from wallet_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for wallet_transaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WalletTransactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(walletTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wallet_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletTransactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from walletTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for wallet_transaction")
	}

	if len(walletTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WalletTransaction) Reload(exec boil.Executor) error {
	ret, err := FindWalletTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WalletTransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WalletTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wallet_transaction\".* FROM \"wallet_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in WalletTransactionSlice")
	}

	*o = slice

	return nil
}

// WalletTransactionExists checks if the WalletTransaction row exists.
func WalletTransactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wallet_transaction\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if wallet_transaction exists")
	}

	return exists, nil
}
