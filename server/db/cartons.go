// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Carton is an object representing the database table.
type Carton struct {
	ID              string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Code            string      `db:"code" boil:"code" json:"code" toml:"code" yaml:"code"`
	Weight          string      `db:"weight" boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Description     string      `db:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	MeatType        string      `db:"meat_type" boil:"meat_type" json:"meat_type" toml:"meat_type" yaml:"meat_type"`
	SpreadsheetLink string      `db:"spreadsheet_link" boil:"spreadsheet_link" json:"spreadsheet_link" toml:"spreadsheet_link" yaml:"spreadsheet_link"`
	ProcessedAt     null.Time   `db:"processed_at" boil:"processed_at" json:"processed_at,omitempty" toml:"processed_at" yaml:"processed_at,omitempty"`
	PalletID        null.String `db:"pallet_id" boil:"pallet_id" json:"pallet_id,omitempty" toml:"pallet_id" yaml:"pallet_id,omitempty"`
	Archived        bool        `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt      null.Time   `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt       time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt       time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedByID     string      `db:"created_by_id" boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`

	R *cartonR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L cartonL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CartonColumns = struct {
	ID              string
	Code            string
	Weight          string
	Description     string
	MeatType        string
	SpreadsheetLink string
	ProcessedAt     string
	PalletID        string
	Archived        string
	ArchivedAt      string
	UpdatedAt       string
	CreatedAt       string
	CreatedByID     string
}{
	ID:              "id",
	Code:            "code",
	Weight:          "weight",
	Description:     "description",
	MeatType:        "meat_type",
	SpreadsheetLink: "spreadsheet_link",
	ProcessedAt:     "processed_at",
	PalletID:        "pallet_id",
	Archived:        "archived",
	ArchivedAt:      "archived_at",
	UpdatedAt:       "updated_at",
	CreatedAt:       "created_at",
	CreatedByID:     "created_by_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CartonWhere = struct {
	ID              whereHelperstring
	Code            whereHelperstring
	Weight          whereHelperstring
	Description     whereHelperstring
	MeatType        whereHelperstring
	SpreadsheetLink whereHelperstring
	ProcessedAt     whereHelpernull_Time
	PalletID        whereHelpernull_String
	Archived        whereHelperbool
	ArchivedAt      whereHelpernull_Time
	UpdatedAt       whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	CreatedByID     whereHelperstring
}{
	ID:              whereHelperstring{field: "\"cartons\".\"id\""},
	Code:            whereHelperstring{field: "\"cartons\".\"code\""},
	Weight:          whereHelperstring{field: "\"cartons\".\"weight\""},
	Description:     whereHelperstring{field: "\"cartons\".\"description\""},
	MeatType:        whereHelperstring{field: "\"cartons\".\"meat_type\""},
	SpreadsheetLink: whereHelperstring{field: "\"cartons\".\"spreadsheet_link\""},
	ProcessedAt:     whereHelpernull_Time{field: "\"cartons\".\"processed_at\""},
	PalletID:        whereHelpernull_String{field: "\"cartons\".\"pallet_id\""},
	Archived:        whereHelperbool{field: "\"cartons\".\"archived\""},
	ArchivedAt:      whereHelpernull_Time{field: "\"cartons\".\"archived_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"cartons\".\"updated_at\""},
	CreatedAt:       whereHelpertime_Time{field: "\"cartons\".\"created_at\""},
	CreatedByID:     whereHelperstring{field: "\"cartons\".\"created_by_id\""},
}

// CartonRels is where relationship names are stored.
var CartonRels = struct {
	CreatedBy    string
	Pallet       string
	Products     string
	Transactions string
}{
	CreatedBy:    "CreatedBy",
	Pallet:       "Pallet",
	Products:     "Products",
	Transactions: "Transactions",
}

// cartonR is where relationships are stored.
type cartonR struct {
	CreatedBy    *User
	Pallet       *Pallet
	Products     ProductSlice
	Transactions TransactionSlice
}

// NewStruct creates a new relationship struct
func (*cartonR) NewStruct() *cartonR {
	return &cartonR{}
}

// cartonL is where Load methods for each relationship are stored.
type cartonL struct{}

var (
	cartonAllColumns            = []string{"id", "code", "weight", "description", "meat_type", "spreadsheet_link", "processed_at", "pallet_id", "archived", "archived_at", "updated_at", "created_at", "created_by_id"}
	cartonColumnsWithoutDefault = []string{"code", "processed_at", "pallet_id", "archived_at", "created_by_id"}
	cartonColumnsWithDefault    = []string{"id", "weight", "description", "meat_type", "spreadsheet_link", "archived", "updated_at", "created_at"}
	cartonPrimaryKeyColumns     = []string{"id"}
)

type (
	// CartonSlice is an alias for a slice of pointers to Carton.
	// This should generally be used opposed to []Carton.
	CartonSlice []*Carton
	// CartonHook is the signature for custom Carton hook methods
	CartonHook func(boil.Executor, *Carton) error

	cartonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cartonType                 = reflect.TypeOf(&Carton{})
	cartonMapping              = queries.MakeStructMapping(cartonType)
	cartonPrimaryKeyMapping, _ = queries.BindMapping(cartonType, cartonMapping, cartonPrimaryKeyColumns)
	cartonInsertCacheMut       sync.RWMutex
	cartonInsertCache          = make(map[string]insertCache)
	cartonUpdateCacheMut       sync.RWMutex
	cartonUpdateCache          = make(map[string]updateCache)
	cartonUpsertCacheMut       sync.RWMutex
	cartonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cartonBeforeInsertHooks []CartonHook
var cartonBeforeUpdateHooks []CartonHook
var cartonBeforeDeleteHooks []CartonHook
var cartonBeforeUpsertHooks []CartonHook

var cartonAfterInsertHooks []CartonHook
var cartonAfterSelectHooks []CartonHook
var cartonAfterUpdateHooks []CartonHook
var cartonAfterDeleteHooks []CartonHook
var cartonAfterUpsertHooks []CartonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Carton) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Carton) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Carton) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Carton) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Carton) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Carton) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Carton) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Carton) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Carton) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cartonAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCartonHook registers your hook function for all future operations.
func AddCartonHook(hookPoint boil.HookPoint, cartonHook CartonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cartonBeforeInsertHooks = append(cartonBeforeInsertHooks, cartonHook)
	case boil.BeforeUpdateHook:
		cartonBeforeUpdateHooks = append(cartonBeforeUpdateHooks, cartonHook)
	case boil.BeforeDeleteHook:
		cartonBeforeDeleteHooks = append(cartonBeforeDeleteHooks, cartonHook)
	case boil.BeforeUpsertHook:
		cartonBeforeUpsertHooks = append(cartonBeforeUpsertHooks, cartonHook)
	case boil.AfterInsertHook:
		cartonAfterInsertHooks = append(cartonAfterInsertHooks, cartonHook)
	case boil.AfterSelectHook:
		cartonAfterSelectHooks = append(cartonAfterSelectHooks, cartonHook)
	case boil.AfterUpdateHook:
		cartonAfterUpdateHooks = append(cartonAfterUpdateHooks, cartonHook)
	case boil.AfterDeleteHook:
		cartonAfterDeleteHooks = append(cartonAfterDeleteHooks, cartonHook)
	case boil.AfterUpsertHook:
		cartonAfterUpsertHooks = append(cartonAfterUpsertHooks, cartonHook)
	}
}

// One returns a single carton record from the query.
func (q cartonQuery) One(exec boil.Executor) (*Carton, error) {
	o := &Carton{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for cartons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Carton records from the query.
func (q cartonQuery) All(exec boil.Executor) (CartonSlice, error) {
	var o []*Carton

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Carton slice")
	}

	if len(cartonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Carton records in the query.
func (q cartonQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count cartons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cartonQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if cartons exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Carton) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Pallet pointed to by the foreign key.
func (o *Carton) Pallet(mods ...qm.QueryMod) palletQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PalletID),
	}

	queryMods = append(queryMods, mods...)

	query := Pallets(queryMods...)
	queries.SetFrom(query.Query, "\"pallets\"")

	return query
}

// Products retrieves all the product's Products with an executor.
func (o *Carton) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"carton_id\"=?", o.ID),
	)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"products\".*"})
	}

	return query
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *Carton) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"carton_id\"=?", o.ID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartonL) LoadCreatedBy(e boil.Executor, singular bool, maybeCarton interface{}, mods queries.Applicator) error {
	var slice []*Carton
	var object *Carton

	if singular {
		object = maybeCarton.(*Carton)
	} else {
		slice = *maybeCarton.(*[]*Carton)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartonR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartonR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(cartonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByCartons = append(foreign.R.CreatedByCartons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByCartons = append(foreign.R.CreatedByCartons, local)
				break
			}
		}
	}

	return nil
}

// LoadPallet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartonL) LoadPallet(e boil.Executor, singular bool, maybeCarton interface{}, mods queries.Applicator) error {
	var slice []*Carton
	var object *Carton

	if singular {
		object = maybeCarton.(*Carton)
	} else {
		slice = *maybeCarton.(*[]*Carton)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartonR{}
		}
		if !queries.IsNil(object.PalletID) {
			args = append(args, object.PalletID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartonR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PalletID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PalletID) {
				args = append(args, obj.PalletID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pallets`), qm.WhereIn(`pallets.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pallet")
	}

	var resultSlice []*Pallet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pallet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pallets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pallets")
	}

	if len(cartonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pallet = foreign
		if foreign.R == nil {
			foreign.R = &palletR{}
		}
		foreign.R.Cartons = append(foreign.R.Cartons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PalletID, foreign.ID) {
				local.R.Pallet = foreign
				if foreign.R == nil {
					foreign.R = &palletR{}
				}
				foreign.R.Cartons = append(foreign.R.Cartons, local)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cartonL) LoadProducts(e boil.Executor, singular bool, maybeCarton interface{}, mods queries.Applicator) error {
	var slice []*Carton
	var object *Carton

	if singular {
		object = maybeCarton.(*Carton)
	} else {
		slice = *maybeCarton.(*[]*Carton)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartonR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`products`), qm.WhereIn(`products.carton_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Carton = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CartonID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Carton = local
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cartonL) LoadTransactions(e boil.Executor, singular bool, maybeCarton interface{}, mods queries.Applicator) error {
	var slice []*Carton
	var object *Carton

	if singular {
		object = maybeCarton.(*Carton)
	} else {
		slice = *maybeCarton.(*[]*Carton)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartonR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`transactions`), qm.WhereIn(`transactions.carton_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Carton = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CartonID) {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Carton = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the carton to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByCartons.
func (o *Carton) SetCreatedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cartons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, cartonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &cartonR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByCartons: CartonSlice{o},
		}
	} else {
		related.R.CreatedByCartons = append(related.R.CreatedByCartons, o)
	}

	return nil
}

// SetPallet of the carton to the related item.
// Sets o.R.Pallet to related.
// Adds o to related.R.Cartons.
func (o *Carton) SetPallet(exec boil.Executor, insert bool, related *Pallet) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cartons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pallet_id"}),
		strmangle.WhereClause("\"", "\"", 2, cartonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PalletID, related.ID)
	if o.R == nil {
		o.R = &cartonR{
			Pallet: related,
		}
	} else {
		o.R.Pallet = related
	}

	if related.R == nil {
		related.R = &palletR{
			Cartons: CartonSlice{o},
		}
	} else {
		related.R.Cartons = append(related.R.Cartons, o)
	}

	return nil
}

// RemovePallet relationship.
// Sets o.R.Pallet to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Carton) RemovePallet(exec boil.Executor, related *Pallet) error {
	var err error

	queries.SetScanner(&o.PalletID, nil)
	if _, err = o.Update(exec, boil.Whitelist("pallet_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Pallet = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Cartons {
		if queries.Equal(o.PalletID, ri.PalletID) {
			continue
		}

		ln := len(related.R.Cartons)
		if ln > 1 && i < ln-1 {
			related.R.Cartons[i] = related.R.Cartons[ln-1]
		}
		related.R.Cartons = related.R.Cartons[:ln-1]
		break
	}
	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the carton, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Carton appropriately.
func (o *Carton) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CartonID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"carton_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CartonID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &cartonR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Carton: o,
			}
		} else {
			rel.R.Carton = o
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// carton replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Carton's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Carton's Products accordingly.
func (o *Carton) SetProducts(exec boil.Executor, insert bool, related ...*Product) error {
	query := "update \"products\" set \"carton_id\" = null where \"carton_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Products {
			queries.SetScanner(&rel.CartonID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Carton = nil
		}

		o.R.Products = nil
	}
	return o.AddProducts(exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Carton.
func (o *Carton) RemoveProducts(exec boil.Executor, related ...*Product) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CartonID, nil)
		if rel.R != nil {
			rel.R.Carton = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("carton_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

// AddTransactions adds the given related objects to the existing relationships
// of the carton, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Carton appropriately.
func (o *Carton) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CartonID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"carton_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CartonID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &cartonR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Carton: o,
			}
		} else {
			rel.R.Carton = o
		}
	}
	return nil
}

// SetTransactions removes all previously related items of the
// carton replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Carton's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Carton's Transactions accordingly.
func (o *Carton) SetTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"carton_id\" = null where \"carton_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Transactions {
			queries.SetScanner(&rel.CartonID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Carton = nil
		}

		o.R.Transactions = nil
	}
	return o.AddTransactions(exec, insert, related...)
}

// RemoveTransactions relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Carton.
func (o *Carton) RemoveTransactions(exec boil.Executor, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CartonID, nil)
		if rel.R != nil {
			rel.R.Carton = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("carton_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Transactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Transactions)
			if ln > 1 && i < ln-1 {
				o.R.Transactions[i] = o.R.Transactions[ln-1]
			}
			o.R.Transactions = o.R.Transactions[:ln-1]
			break
		}
	}

	return nil
}

// Cartons retrieves all the records using an executor.
func Cartons(mods ...qm.QueryMod) cartonQuery {
	mods = append(mods, qm.From("\"cartons\""))
	return cartonQuery{NewQuery(mods...)}
}

// FindCarton retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCarton(exec boil.Executor, iD string, selectCols ...string) (*Carton, error) {
	cartonObj := &Carton{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cartons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, cartonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from cartons")
	}

	return cartonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Carton) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no cartons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cartonInsertCacheMut.RLock()
	cache, cached := cartonInsertCache[key]
	cartonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cartonAllColumns,
			cartonColumnsWithDefault,
			cartonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cartonType, cartonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cartonType, cartonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cartons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cartons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into cartons")
	}

	if !cached {
		cartonInsertCacheMut.Lock()
		cartonInsertCache[key] = cache
		cartonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Carton.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Carton) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cartonUpdateCacheMut.RLock()
	cache, cached := cartonUpdateCache[key]
	cartonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cartonAllColumns,
			cartonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update cartons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cartons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cartonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cartonType, cartonMapping, append(wl, cartonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update cartons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for cartons")
	}

	if !cached {
		cartonUpdateCacheMut.Lock()
		cartonUpdateCache[key] = cache
		cartonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cartonQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for cartons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for cartons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CartonSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cartons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cartonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in carton slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all carton")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Carton) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no cartons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cartonUpsertCacheMut.RLock()
	cache, cached := cartonUpsertCache[key]
	cartonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cartonAllColumns,
			cartonColumnsWithDefault,
			cartonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cartonAllColumns,
			cartonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert cartons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cartonPrimaryKeyColumns))
			copy(conflict, cartonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cartons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cartonType, cartonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cartonType, cartonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert cartons")
	}

	if !cached {
		cartonUpsertCacheMut.Lock()
		cartonUpsertCache[key] = cache
		cartonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Carton record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Carton) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Carton provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cartonPrimaryKeyMapping)
	sql := "DELETE FROM \"cartons\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from cartons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for cartons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cartonQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no cartonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from cartons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for cartons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CartonSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cartonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cartons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from carton slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for cartons")
	}

	if len(cartonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Carton) Reload(exec boil.Executor) error {
	ret, err := FindCarton(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CartonSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CartonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cartons\".* FROM \"cartons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in CartonSlice")
	}

	*o = slice

	return nil
}

// CartonExists checks if the Carton row exists.
func CartonExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cartons\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if cartons exists")
	}

	return exists, nil
}
