// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserTask is an object representing the database table.
type UserTask struct {
	ID            string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	TaskID        null.String `db:"task_id" boil:"task_id" json:"task_id,omitempty" toml:"task_id" yaml:"task_id,omitempty"`
	UserID        string      `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Status        string      `db:"status" boil:"status" json:"status" toml:"status" yaml:"status"`
	IsComplete    bool        `db:"is_complete" boil:"is_complete" json:"is_complete" toml:"is_complete" yaml:"is_complete"`
	IsActive      bool        `db:"is_active" boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	LoyaltyPoints int         `db:"loyalty_points" boil:"loyalty_points" json:"loyalty_points" toml:"loyalty_points" yaml:"loyalty_points"`
	Archived      bool        `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt    null.Time   `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt     time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userTaskR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userTaskL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserTaskColumns = struct {
	ID            string
	TaskID        string
	UserID        string
	Status        string
	IsComplete    string
	IsActive      string
	LoyaltyPoints string
	Archived      string
	ArchivedAt    string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	TaskID:        "task_id",
	UserID:        "user_id",
	Status:        "status",
	IsComplete:    "is_complete",
	IsActive:      "is_active",
	LoyaltyPoints: "loyalty_points",
	Archived:      "archived",
	ArchivedAt:    "archived_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

// Generated where

var UserTaskWhere = struct {
	ID            whereHelperstring
	TaskID        whereHelpernull_String
	UserID        whereHelperstring
	Status        whereHelperstring
	IsComplete    whereHelperbool
	IsActive      whereHelperbool
	LoyaltyPoints whereHelperint
	Archived      whereHelperbool
	ArchivedAt    whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"user_tasks\".\"id\""},
	TaskID:        whereHelpernull_String{field: "\"user_tasks\".\"task_id\""},
	UserID:        whereHelperstring{field: "\"user_tasks\".\"user_id\""},
	Status:        whereHelperstring{field: "\"user_tasks\".\"status\""},
	IsComplete:    whereHelperbool{field: "\"user_tasks\".\"is_complete\""},
	IsActive:      whereHelperbool{field: "\"user_tasks\".\"is_active\""},
	LoyaltyPoints: whereHelperint{field: "\"user_tasks\".\"loyalty_points\""},
	Archived:      whereHelperbool{field: "\"user_tasks\".\"archived\""},
	ArchivedAt:    whereHelpernull_Time{field: "\"user_tasks\".\"archived_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"user_tasks\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"user_tasks\".\"created_at\""},
}

// UserTaskRels is where relationship names are stored.
var UserTaskRels = struct {
	Task          string
	User          string
	UserTaskSteps string
}{
	Task:          "Task",
	User:          "User",
	UserTaskSteps: "UserTaskSteps",
}

// userTaskR is where relationships are stored.
type userTaskR struct {
	Task          *Task
	User          *User
	UserTaskSteps UserTaskStepSlice
}

// NewStruct creates a new relationship struct
func (*userTaskR) NewStruct() *userTaskR {
	return &userTaskR{}
}

// userTaskL is where Load methods for each relationship are stored.
type userTaskL struct{}

var (
	userTaskAllColumns            = []string{"id", "task_id", "user_id", "status", "is_complete", "is_active", "loyalty_points", "archived", "archived_at", "updated_at", "created_at"}
	userTaskColumnsWithoutDefault = []string{"task_id", "user_id", "status", "archived_at"}
	userTaskColumnsWithDefault    = []string{"id", "is_complete", "is_active", "loyalty_points", "archived", "updated_at", "created_at"}
	userTaskPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserTaskSlice is an alias for a slice of pointers to UserTask.
	// This should generally be used opposed to []UserTask.
	UserTaskSlice []*UserTask
	// UserTaskHook is the signature for custom UserTask hook methods
	UserTaskHook func(boil.Executor, *UserTask) error

	userTaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userTaskType                 = reflect.TypeOf(&UserTask{})
	userTaskMapping              = queries.MakeStructMapping(userTaskType)
	userTaskPrimaryKeyMapping, _ = queries.BindMapping(userTaskType, userTaskMapping, userTaskPrimaryKeyColumns)
	userTaskInsertCacheMut       sync.RWMutex
	userTaskInsertCache          = make(map[string]insertCache)
	userTaskUpdateCacheMut       sync.RWMutex
	userTaskUpdateCache          = make(map[string]updateCache)
	userTaskUpsertCacheMut       sync.RWMutex
	userTaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userTaskBeforeInsertHooks []UserTaskHook
var userTaskBeforeUpdateHooks []UserTaskHook
var userTaskBeforeDeleteHooks []UserTaskHook
var userTaskBeforeUpsertHooks []UserTaskHook

var userTaskAfterInsertHooks []UserTaskHook
var userTaskAfterSelectHooks []UserTaskHook
var userTaskAfterUpdateHooks []UserTaskHook
var userTaskAfterDeleteHooks []UserTaskHook
var userTaskAfterUpsertHooks []UserTaskHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserTask) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserTask) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserTask) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserTask) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserTask) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserTask) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserTask) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserTask) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserTask) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTaskAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserTaskHook registers your hook function for all future operations.
func AddUserTaskHook(hookPoint boil.HookPoint, userTaskHook UserTaskHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userTaskBeforeInsertHooks = append(userTaskBeforeInsertHooks, userTaskHook)
	case boil.BeforeUpdateHook:
		userTaskBeforeUpdateHooks = append(userTaskBeforeUpdateHooks, userTaskHook)
	case boil.BeforeDeleteHook:
		userTaskBeforeDeleteHooks = append(userTaskBeforeDeleteHooks, userTaskHook)
	case boil.BeforeUpsertHook:
		userTaskBeforeUpsertHooks = append(userTaskBeforeUpsertHooks, userTaskHook)
	case boil.AfterInsertHook:
		userTaskAfterInsertHooks = append(userTaskAfterInsertHooks, userTaskHook)
	case boil.AfterSelectHook:
		userTaskAfterSelectHooks = append(userTaskAfterSelectHooks, userTaskHook)
	case boil.AfterUpdateHook:
		userTaskAfterUpdateHooks = append(userTaskAfterUpdateHooks, userTaskHook)
	case boil.AfterDeleteHook:
		userTaskAfterDeleteHooks = append(userTaskAfterDeleteHooks, userTaskHook)
	case boil.AfterUpsertHook:
		userTaskAfterUpsertHooks = append(userTaskAfterUpsertHooks, userTaskHook)
	}
}

// One returns a single userTask record from the query.
func (q userTaskQuery) One(exec boil.Executor) (*UserTask, error) {
	o := &UserTask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for user_tasks")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserTask records from the query.
func (q userTaskQuery) All(exec boil.Executor) (UserTaskSlice, error) {
	var o []*UserTask

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to UserTask slice")
	}

	if len(userTaskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserTask records in the query.
func (q userTaskQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count user_tasks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userTaskQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if user_tasks exists")
	}

	return count > 0, nil
}

// Task pointed to by the foreign key.
func (o *UserTask) Task(mods ...qm.QueryMod) taskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaskID),
	}

	queryMods = append(queryMods, mods...)

	query := Tasks(queryMods...)
	queries.SetFrom(query.Query, "\"tasks\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserTask) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// UserTaskSteps retrieves all the user_task_step's UserTaskSteps with an executor.
func (o *UserTask) UserTaskSteps(mods ...qm.QueryMod) userTaskStepQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_task_steps\".\"user_task_id\"=?", o.ID),
	)

	query := UserTaskSteps(queryMods...)
	queries.SetFrom(query.Query, "\"user_task_steps\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_task_steps\".*"})
	}

	return query
}

// LoadTask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTaskL) LoadTask(e boil.Executor, singular bool, maybeUserTask interface{}, mods queries.Applicator) error {
	var slice []*UserTask
	var object *UserTask

	if singular {
		object = maybeUserTask.(*UserTask)
	} else {
		slice = *maybeUserTask.(*[]*UserTask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTaskR{}
		}
		if !queries.IsNil(object.TaskID) {
			args = append(args, object.TaskID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTaskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TaskID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TaskID) {
				args = append(args, obj.TaskID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`tasks`), qm.WhereIn(`tasks.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Task")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(userTaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Task = foreign
		if foreign.R == nil {
			foreign.R = &taskR{}
		}
		foreign.R.UserTasks = append(foreign.R.UserTasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaskID, foreign.ID) {
				local.R.Task = foreign
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.UserTasks = append(foreign.R.UserTasks, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTaskL) LoadUser(e boil.Executor, singular bool, maybeUserTask interface{}, mods queries.Applicator) error {
	var slice []*UserTask
	var object *UserTask

	if singular {
		object = maybeUserTask.(*UserTask)
	} else {
		slice = *maybeUserTask.(*[]*UserTask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTaskR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTaskR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userTaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserTasks = append(foreign.R.UserTasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserTasks = append(foreign.R.UserTasks, local)
				break
			}
		}
	}

	return nil
}

// LoadUserTaskSteps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userTaskL) LoadUserTaskSteps(e boil.Executor, singular bool, maybeUserTask interface{}, mods queries.Applicator) error {
	var slice []*UserTask
	var object *UserTask

	if singular {
		object = maybeUserTask.(*UserTask)
	} else {
		slice = *maybeUserTask.(*[]*UserTask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTaskR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTaskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_task_steps`), qm.WhereIn(`user_task_steps.user_task_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_task_steps")
	}

	var resultSlice []*UserTaskStep
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_task_steps")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_task_steps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_task_steps")
	}

	if len(userTaskStepAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserTaskSteps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userTaskStepR{}
			}
			foreign.R.UserTask = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserTaskID) {
				local.R.UserTaskSteps = append(local.R.UserTaskSteps, foreign)
				if foreign.R == nil {
					foreign.R = &userTaskStepR{}
				}
				foreign.R.UserTask = local
				break
			}
		}
	}

	return nil
}

// SetTask of the userTask to the related item.
// Sets o.R.Task to related.
// Adds o to related.R.UserTasks.
func (o *UserTask) SetTask(exec boil.Executor, insert bool, related *Task) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_tasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaskID, related.ID)
	if o.R == nil {
		o.R = &userTaskR{
			Task: related,
		}
	} else {
		o.R.Task = related
	}

	if related.R == nil {
		related.R = &taskR{
			UserTasks: UserTaskSlice{o},
		}
	} else {
		related.R.UserTasks = append(related.R.UserTasks, o)
	}

	return nil
}

// RemoveTask relationship.
// Sets o.R.Task to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserTask) RemoveTask(exec boil.Executor, related *Task) error {
	var err error

	queries.SetScanner(&o.TaskID, nil)
	if _, err = o.Update(exec, boil.Whitelist("task_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Task = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserTasks {
		if queries.Equal(o.TaskID, ri.TaskID) {
			continue
		}

		ln := len(related.R.UserTasks)
		if ln > 1 && i < ln-1 {
			related.R.UserTasks[i] = related.R.UserTasks[ln-1]
		}
		related.R.UserTasks = related.R.UserTasks[:ln-1]
		break
	}
	return nil
}

// SetUser of the userTask to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTasks.
func (o *UserTask) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_tasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userTaskR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserTasks: UserTaskSlice{o},
		}
	} else {
		related.R.UserTasks = append(related.R.UserTasks, o)
	}

	return nil
}

// AddUserTaskSteps adds the given related objects to the existing relationships
// of the user_task, optionally inserting them as new records.
// Appends related to o.R.UserTaskSteps.
// Sets related.R.UserTask appropriately.
func (o *UserTask) AddUserTaskSteps(exec boil.Executor, insert bool, related ...*UserTaskStep) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserTaskID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_task_steps\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_task_id"}),
				strmangle.WhereClause("\"", "\"", 2, userTaskStepPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserTaskID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userTaskR{
			UserTaskSteps: related,
		}
	} else {
		o.R.UserTaskSteps = append(o.R.UserTaskSteps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userTaskStepR{
				UserTask: o,
			}
		} else {
			rel.R.UserTask = o
		}
	}
	return nil
}

// SetUserTaskSteps removes all previously related items of the
// user_task replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserTask's UserTaskSteps accordingly.
// Replaces o.R.UserTaskSteps with related.
// Sets related.R.UserTask's UserTaskSteps accordingly.
func (o *UserTask) SetUserTaskSteps(exec boil.Executor, insert bool, related ...*UserTaskStep) error {
	query := "update \"user_task_steps\" set \"user_task_id\" = null where \"user_task_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserTaskSteps {
			queries.SetScanner(&rel.UserTaskID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UserTask = nil
		}

		o.R.UserTaskSteps = nil
	}
	return o.AddUserTaskSteps(exec, insert, related...)
}

// RemoveUserTaskSteps relationships from objects passed in.
// Removes related items from R.UserTaskSteps (uses pointer comparison, removal does not keep order)
// Sets related.R.UserTask.
func (o *UserTask) RemoveUserTaskSteps(exec boil.Executor, related ...*UserTaskStep) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserTaskID, nil)
		if rel.R != nil {
			rel.R.UserTask = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("user_task_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserTaskSteps {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserTaskSteps)
			if ln > 1 && i < ln-1 {
				o.R.UserTaskSteps[i] = o.R.UserTaskSteps[ln-1]
			}
			o.R.UserTaskSteps = o.R.UserTaskSteps[:ln-1]
			break
		}
	}

	return nil
}

// UserTasks retrieves all the records using an executor.
func UserTasks(mods ...qm.QueryMod) userTaskQuery {
	mods = append(mods, qm.From("\"user_tasks\""))
	return userTaskQuery{NewQuery(mods...)}
}

// FindUserTask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserTask(exec boil.Executor, iD string, selectCols ...string) (*UserTask, error) {
	userTaskObj := &UserTask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_tasks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userTaskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from user_tasks")
	}

	return userTaskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserTask) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_tasks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTaskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userTaskInsertCacheMut.RLock()
	cache, cached := userTaskInsertCache[key]
	userTaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userTaskAllColumns,
			userTaskColumnsWithDefault,
			userTaskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userTaskType, userTaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userTaskType, userTaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_tasks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_tasks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into user_tasks")
	}

	if !cached {
		userTaskInsertCacheMut.Lock()
		userTaskInsertCache[key] = cache
		userTaskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserTask.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserTask) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userTaskUpdateCacheMut.RLock()
	cache, cached := userTaskUpdateCache[key]
	userTaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userTaskAllColumns,
			userTaskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update user_tasks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_tasks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userTaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userTaskType, userTaskMapping, append(wl, userTaskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update user_tasks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for user_tasks")
	}

	if !cached {
		userTaskUpdateCacheMut.Lock()
		userTaskUpdateCache[key] = cache
		userTaskUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userTaskQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for user_tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for user_tasks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserTaskSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_tasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userTaskPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in userTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all userTask")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserTask) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_tasks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTaskColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userTaskUpsertCacheMut.RLock()
	cache, cached := userTaskUpsertCache[key]
	userTaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userTaskAllColumns,
			userTaskColumnsWithDefault,
			userTaskColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userTaskAllColumns,
			userTaskPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert user_tasks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userTaskPrimaryKeyColumns))
			copy(conflict, userTaskPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_tasks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userTaskType, userTaskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userTaskType, userTaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert user_tasks")
	}

	if !cached {
		userTaskUpsertCacheMut.Lock()
		userTaskUpsertCache[key] = cache
		userTaskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserTask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserTask) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no UserTask provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userTaskPrimaryKeyMapping)
	sql := "DELETE FROM \"user_tasks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from user_tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for user_tasks")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userTaskQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no userTaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from user_tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_tasks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserTaskSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userTaskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_tasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTaskPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from userTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_tasks")
	}

	if len(userTaskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserTask) Reload(exec boil.Executor) error {
	ret, err := FindUserTask(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTaskSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserTaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_tasks\".* FROM \"user_tasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTaskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in UserTaskSlice")
	}

	*o = slice

	return nil
}

// UserTaskExists checks if the UserTask row exists.
func UserTaskExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_tasks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if user_tasks exists")
	}

	return exists, nil
}
