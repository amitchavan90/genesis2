// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Contract is an object representing the database table.
type Contract struct {
	ID           string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Code         string    `db:"code" boil:"code" json:"code" toml:"code" yaml:"code"`
	Name         string    `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Description  string    `db:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	SupplierName string    `db:"supplier_name" boil:"supplier_name" json:"supplier_name" toml:"supplier_name" yaml:"supplier_name"`
	Latitude     float64   `db:"latitude" boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude    float64   `db:"longitude" boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	DateSigned   null.Time `db:"date_signed" boil:"date_signed" json:"date_signed,omitempty" toml:"date_signed" yaml:"date_signed,omitempty"`
	Archived     bool      `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt   null.Time `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt    time.Time `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt    time.Time `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedByID  string    `db:"created_by_id" boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`

	R *contractR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L contractL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContractColumns = struct {
	ID           string
	Code         string
	Name         string
	Description  string
	SupplierName string
	Latitude     string
	Longitude    string
	DateSigned   string
	Archived     string
	ArchivedAt   string
	UpdatedAt    string
	CreatedAt    string
	CreatedByID  string
}{
	ID:           "id",
	Code:         "code",
	Name:         "name",
	Description:  "description",
	SupplierName: "supplier_name",
	Latitude:     "latitude",
	Longitude:    "longitude",
	DateSigned:   "date_signed",
	Archived:     "archived",
	ArchivedAt:   "archived_at",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
	CreatedByID:  "created_by_id",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var ContractWhere = struct {
	ID           whereHelperstring
	Code         whereHelperstring
	Name         whereHelperstring
	Description  whereHelperstring
	SupplierName whereHelperstring
	Latitude     whereHelperfloat64
	Longitude    whereHelperfloat64
	DateSigned   whereHelpernull_Time
	Archived     whereHelperbool
	ArchivedAt   whereHelpernull_Time
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
	CreatedByID  whereHelperstring
}{
	ID:           whereHelperstring{field: "\"contracts\".\"id\""},
	Code:         whereHelperstring{field: "\"contracts\".\"code\""},
	Name:         whereHelperstring{field: "\"contracts\".\"name\""},
	Description:  whereHelperstring{field: "\"contracts\".\"description\""},
	SupplierName: whereHelperstring{field: "\"contracts\".\"supplier_name\""},
	Latitude:     whereHelperfloat64{field: "\"contracts\".\"latitude\""},
	Longitude:    whereHelperfloat64{field: "\"contracts\".\"longitude\""},
	DateSigned:   whereHelpernull_Time{field: "\"contracts\".\"date_signed\""},
	Archived:     whereHelperbool{field: "\"contracts\".\"archived\""},
	ArchivedAt:   whereHelpernull_Time{field: "\"contracts\".\"archived_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"contracts\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"contracts\".\"created_at\""},
	CreatedByID:  whereHelperstring{field: "\"contracts\".\"created_by_id\""},
}

// ContractRels is where relationship names are stored.
var ContractRels = struct {
	CreatedBy string
	Products  string
}{
	CreatedBy: "CreatedBy",
	Products:  "Products",
}

// contractR is where relationships are stored.
type contractR struct {
	CreatedBy *User
	Products  ProductSlice
}

// NewStruct creates a new relationship struct
func (*contractR) NewStruct() *contractR {
	return &contractR{}
}

// contractL is where Load methods for each relationship are stored.
type contractL struct{}

var (
	contractAllColumns            = []string{"id", "code", "name", "description", "supplier_name", "latitude", "longitude", "date_signed", "archived", "archived_at", "updated_at", "created_at", "created_by_id"}
	contractColumnsWithoutDefault = []string{"code", "name", "description", "supplier_name", "latitude", "longitude", "date_signed", "archived_at", "created_by_id"}
	contractColumnsWithDefault    = []string{"id", "archived", "updated_at", "created_at"}
	contractPrimaryKeyColumns     = []string{"id"}
)

type (
	// ContractSlice is an alias for a slice of pointers to Contract.
	// This should generally be used opposed to []Contract.
	ContractSlice []*Contract
	// ContractHook is the signature for custom Contract hook methods
	ContractHook func(boil.Executor, *Contract) error

	contractQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contractType                 = reflect.TypeOf(&Contract{})
	contractMapping              = queries.MakeStructMapping(contractType)
	contractPrimaryKeyMapping, _ = queries.BindMapping(contractType, contractMapping, contractPrimaryKeyColumns)
	contractInsertCacheMut       sync.RWMutex
	contractInsertCache          = make(map[string]insertCache)
	contractUpdateCacheMut       sync.RWMutex
	contractUpdateCache          = make(map[string]updateCache)
	contractUpsertCacheMut       sync.RWMutex
	contractUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contractBeforeInsertHooks []ContractHook
var contractBeforeUpdateHooks []ContractHook
var contractBeforeDeleteHooks []ContractHook
var contractBeforeUpsertHooks []ContractHook

var contractAfterInsertHooks []ContractHook
var contractAfterSelectHooks []ContractHook
var contractAfterUpdateHooks []ContractHook
var contractAfterDeleteHooks []ContractHook
var contractAfterUpsertHooks []ContractHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Contract) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range contractBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Contract) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range contractBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Contract) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range contractBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Contract) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range contractBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Contract) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range contractAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Contract) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range contractAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Contract) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range contractAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Contract) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range contractAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Contract) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range contractAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContractHook registers your hook function for all future operations.
func AddContractHook(hookPoint boil.HookPoint, contractHook ContractHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		contractBeforeInsertHooks = append(contractBeforeInsertHooks, contractHook)
	case boil.BeforeUpdateHook:
		contractBeforeUpdateHooks = append(contractBeforeUpdateHooks, contractHook)
	case boil.BeforeDeleteHook:
		contractBeforeDeleteHooks = append(contractBeforeDeleteHooks, contractHook)
	case boil.BeforeUpsertHook:
		contractBeforeUpsertHooks = append(contractBeforeUpsertHooks, contractHook)
	case boil.AfterInsertHook:
		contractAfterInsertHooks = append(contractAfterInsertHooks, contractHook)
	case boil.AfterSelectHook:
		contractAfterSelectHooks = append(contractAfterSelectHooks, contractHook)
	case boil.AfterUpdateHook:
		contractAfterUpdateHooks = append(contractAfterUpdateHooks, contractHook)
	case boil.AfterDeleteHook:
		contractAfterDeleteHooks = append(contractAfterDeleteHooks, contractHook)
	case boil.AfterUpsertHook:
		contractAfterUpsertHooks = append(contractAfterUpsertHooks, contractHook)
	}
}

// One returns a single contract record from the query.
func (q contractQuery) One(exec boil.Executor) (*Contract, error) {
	o := &Contract{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for contracts")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Contract records from the query.
func (q contractQuery) All(exec boil.Executor) (ContractSlice, error) {
	var o []*Contract

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Contract slice")
	}

	if len(contractAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Contract records in the query.
func (q contractQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count contracts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contractQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if contracts exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Contract) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Products retrieves all the product's Products with an executor.
func (o *Contract) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"contract_id\"=?", o.ID),
	)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"products\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contractL) LoadCreatedBy(e boil.Executor, singular bool, maybeContract interface{}, mods queries.Applicator) error {
	var slice []*Contract
	var object *Contract

	if singular {
		object = maybeContract.(*Contract)
	} else {
		slice = *maybeContract.(*[]*Contract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contractR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(contractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByContracts = append(foreign.R.CreatedByContracts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByContracts = append(foreign.R.CreatedByContracts, local)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contractL) LoadProducts(e boil.Executor, singular bool, maybeContract interface{}, mods queries.Applicator) error {
	var slice []*Contract
	var object *Contract

	if singular {
		object = maybeContract.(*Contract)
	} else {
		slice = *maybeContract.(*[]*Contract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contractR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`products`), qm.WhereIn(`products.contract_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Contract = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ContractID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Contract = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the contract to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByContracts.
func (o *Contract) SetCreatedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, contractPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &contractR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByContracts: ContractSlice{o},
		}
	} else {
		related.R.CreatedByContracts = append(related.R.CreatedByContracts, o)
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the contract, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Contract appropriately.
func (o *Contract) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ContractID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"contract_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ContractID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &contractR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Contract: o,
			}
		} else {
			rel.R.Contract = o
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// contract replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Contract's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Contract's Products accordingly.
func (o *Contract) SetProducts(exec boil.Executor, insert bool, related ...*Product) error {
	query := "update \"products\" set \"contract_id\" = null where \"contract_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Products {
			queries.SetScanner(&rel.ContractID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Contract = nil
		}

		o.R.Products = nil
	}
	return o.AddProducts(exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Contract.
func (o *Contract) RemoveProducts(exec boil.Executor, related ...*Product) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ContractID, nil)
		if rel.R != nil {
			rel.R.Contract = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("contract_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

// Contracts retrieves all the records using an executor.
func Contracts(mods ...qm.QueryMod) contractQuery {
	mods = append(mods, qm.From("\"contracts\""))
	return contractQuery{NewQuery(mods...)}
}

// FindContract retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContract(exec boil.Executor, iD string, selectCols ...string) (*Contract, error) {
	contractObj := &Contract{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"contracts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, contractObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from contracts")
	}

	return contractObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Contract) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no contracts provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contractColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contractInsertCacheMut.RLock()
	cache, cached := contractInsertCache[key]
	contractInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contractAllColumns,
			contractColumnsWithDefault,
			contractColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contractType, contractMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contractType, contractMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"contracts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"contracts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into contracts")
	}

	if !cached {
		contractInsertCacheMut.Lock()
		contractInsertCache[key] = cache
		contractInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Contract.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Contract) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contractUpdateCacheMut.RLock()
	cache, cached := contractUpdateCache[key]
	contractUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contractAllColumns,
			contractPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update contracts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"contracts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contractPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contractType, contractMapping, append(wl, contractPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update contracts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for contracts")
	}

	if !cached {
		contractUpdateCacheMut.Lock()
		contractUpdateCache[key] = cache
		contractUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q contractQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for contracts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContractSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contractPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in contract slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all contract")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Contract) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no contracts provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contractColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contractUpsertCacheMut.RLock()
	cache, cached := contractUpsertCache[key]
	contractUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contractAllColumns,
			contractColumnsWithDefault,
			contractColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			contractAllColumns,
			contractPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert contracts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(contractPrimaryKeyColumns))
			copy(conflict, contractPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"contracts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(contractType, contractMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contractType, contractMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert contracts")
	}

	if !cached {
		contractUpsertCacheMut.Lock()
		contractUpsertCache[key] = cache
		contractUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Contract record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Contract) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Contract provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contractPrimaryKeyMapping)
	sql := "DELETE FROM \"contracts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for contracts")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contractQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no contractQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for contracts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContractSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contractBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"contracts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from contract slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for contracts")
	}

	if len(contractAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Contract) Reload(exec boil.Executor) error {
	ret, err := FindContract(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContractSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContractSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"contracts\".* FROM \"contracts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ContractSlice")
	}

	*o = slice

	return nil
}

// ContractExists checks if the Contract row exists.
func ContractExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"contracts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if contracts exists")
	}

	return exists, nil
}
