// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StockKeepingUnitContent is an object representing the database table.
type StockKeepingUnitContent struct {
	ID          string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SkuID       string    `db:"sku_id" boil:"sku_id" json:"sku_id" toml:"sku_id" yaml:"sku_id"`
	ContentType string    `db:"content_type" boil:"content_type" json:"content_type" toml:"content_type" yaml:"content_type"`
	Title       string    `db:"title" boil:"title" json:"title" toml:"title" yaml:"title"`
	Content     string    `db:"content" boil:"content" json:"content" toml:"content" yaml:"content"`
	UpdatedAt   time.Time `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *stockKeepingUnitContentR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L stockKeepingUnitContentL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StockKeepingUnitContentColumns = struct {
	ID          string
	SkuID       string
	ContentType string
	Title       string
	Content     string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	SkuID:       "sku_id",
	ContentType: "content_type",
	Title:       "title",
	Content:     "content",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

// Generated where

var StockKeepingUnitContentWhere = struct {
	ID          whereHelperstring
	SkuID       whereHelperstring
	ContentType whereHelperstring
	Title       whereHelperstring
	Content     whereHelperstring
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"stock_keeping_unit_content\".\"id\""},
	SkuID:       whereHelperstring{field: "\"stock_keeping_unit_content\".\"sku_id\""},
	ContentType: whereHelperstring{field: "\"stock_keeping_unit_content\".\"content_type\""},
	Title:       whereHelperstring{field: "\"stock_keeping_unit_content\".\"title\""},
	Content:     whereHelperstring{field: "\"stock_keeping_unit_content\".\"content\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"stock_keeping_unit_content\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"stock_keeping_unit_content\".\"created_at\""},
}

// StockKeepingUnitContentRels is where relationship names are stored.
var StockKeepingUnitContentRels = struct {
	Sku string
}{
	Sku: "Sku",
}

// stockKeepingUnitContentR is where relationships are stored.
type stockKeepingUnitContentR struct {
	Sku *StockKeepingUnit
}

// NewStruct creates a new relationship struct
func (*stockKeepingUnitContentR) NewStruct() *stockKeepingUnitContentR {
	return &stockKeepingUnitContentR{}
}

// stockKeepingUnitContentL is where Load methods for each relationship are stored.
type stockKeepingUnitContentL struct{}

var (
	stockKeepingUnitContentAllColumns            = []string{"id", "sku_id", "content_type", "title", "content", "updated_at", "created_at"}
	stockKeepingUnitContentColumnsWithoutDefault = []string{"sku_id", "content_type", "title", "content"}
	stockKeepingUnitContentColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	stockKeepingUnitContentPrimaryKeyColumns     = []string{"id"}
)

type (
	// StockKeepingUnitContentSlice is an alias for a slice of pointers to StockKeepingUnitContent.
	// This should generally be used opposed to []StockKeepingUnitContent.
	StockKeepingUnitContentSlice []*StockKeepingUnitContent
	// StockKeepingUnitContentHook is the signature for custom StockKeepingUnitContent hook methods
	StockKeepingUnitContentHook func(boil.Executor, *StockKeepingUnitContent) error

	stockKeepingUnitContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockKeepingUnitContentType                 = reflect.TypeOf(&StockKeepingUnitContent{})
	stockKeepingUnitContentMapping              = queries.MakeStructMapping(stockKeepingUnitContentType)
	stockKeepingUnitContentPrimaryKeyMapping, _ = queries.BindMapping(stockKeepingUnitContentType, stockKeepingUnitContentMapping, stockKeepingUnitContentPrimaryKeyColumns)
	stockKeepingUnitContentInsertCacheMut       sync.RWMutex
	stockKeepingUnitContentInsertCache          = make(map[string]insertCache)
	stockKeepingUnitContentUpdateCacheMut       sync.RWMutex
	stockKeepingUnitContentUpdateCache          = make(map[string]updateCache)
	stockKeepingUnitContentUpsertCacheMut       sync.RWMutex
	stockKeepingUnitContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stockKeepingUnitContentBeforeInsertHooks []StockKeepingUnitContentHook
var stockKeepingUnitContentBeforeUpdateHooks []StockKeepingUnitContentHook
var stockKeepingUnitContentBeforeDeleteHooks []StockKeepingUnitContentHook
var stockKeepingUnitContentBeforeUpsertHooks []StockKeepingUnitContentHook

var stockKeepingUnitContentAfterInsertHooks []StockKeepingUnitContentHook
var stockKeepingUnitContentAfterSelectHooks []StockKeepingUnitContentHook
var stockKeepingUnitContentAfterUpdateHooks []StockKeepingUnitContentHook
var stockKeepingUnitContentAfterDeleteHooks []StockKeepingUnitContentHook
var stockKeepingUnitContentAfterUpsertHooks []StockKeepingUnitContentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StockKeepingUnitContent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StockKeepingUnitContent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StockKeepingUnitContent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StockKeepingUnitContent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StockKeepingUnitContent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StockKeepingUnitContent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StockKeepingUnitContent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StockKeepingUnitContent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StockKeepingUnitContent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stockKeepingUnitContentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStockKeepingUnitContentHook registers your hook function for all future operations.
func AddStockKeepingUnitContentHook(hookPoint boil.HookPoint, stockKeepingUnitContentHook StockKeepingUnitContentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		stockKeepingUnitContentBeforeInsertHooks = append(stockKeepingUnitContentBeforeInsertHooks, stockKeepingUnitContentHook)
	case boil.BeforeUpdateHook:
		stockKeepingUnitContentBeforeUpdateHooks = append(stockKeepingUnitContentBeforeUpdateHooks, stockKeepingUnitContentHook)
	case boil.BeforeDeleteHook:
		stockKeepingUnitContentBeforeDeleteHooks = append(stockKeepingUnitContentBeforeDeleteHooks, stockKeepingUnitContentHook)
	case boil.BeforeUpsertHook:
		stockKeepingUnitContentBeforeUpsertHooks = append(stockKeepingUnitContentBeforeUpsertHooks, stockKeepingUnitContentHook)
	case boil.AfterInsertHook:
		stockKeepingUnitContentAfterInsertHooks = append(stockKeepingUnitContentAfterInsertHooks, stockKeepingUnitContentHook)
	case boil.AfterSelectHook:
		stockKeepingUnitContentAfterSelectHooks = append(stockKeepingUnitContentAfterSelectHooks, stockKeepingUnitContentHook)
	case boil.AfterUpdateHook:
		stockKeepingUnitContentAfterUpdateHooks = append(stockKeepingUnitContentAfterUpdateHooks, stockKeepingUnitContentHook)
	case boil.AfterDeleteHook:
		stockKeepingUnitContentAfterDeleteHooks = append(stockKeepingUnitContentAfterDeleteHooks, stockKeepingUnitContentHook)
	case boil.AfterUpsertHook:
		stockKeepingUnitContentAfterUpsertHooks = append(stockKeepingUnitContentAfterUpsertHooks, stockKeepingUnitContentHook)
	}
}

// One returns a single stockKeepingUnitContent record from the query.
func (q stockKeepingUnitContentQuery) One(exec boil.Executor) (*StockKeepingUnitContent, error) {
	o := &StockKeepingUnitContent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for stock_keeping_unit_content")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StockKeepingUnitContent records from the query.
func (q stockKeepingUnitContentQuery) All(exec boil.Executor) (StockKeepingUnitContentSlice, error) {
	var o []*StockKeepingUnitContent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to StockKeepingUnitContent slice")
	}

	if len(stockKeepingUnitContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StockKeepingUnitContent records in the query.
func (q stockKeepingUnitContentQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count stock_keeping_unit_content rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockKeepingUnitContentQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if stock_keeping_unit_content exists")
	}

	return count > 0, nil
}

// Sku pointed to by the foreign key.
func (o *StockKeepingUnitContent) Sku(mods ...qm.QueryMod) stockKeepingUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkuID),
	}

	queryMods = append(queryMods, mods...)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	return query
}

// LoadSku allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitContentL) LoadSku(e boil.Executor, singular bool, maybeStockKeepingUnitContent interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnitContent
	var object *StockKeepingUnitContent

	if singular {
		object = maybeStockKeepingUnitContent.(*StockKeepingUnitContent)
	} else {
		slice = *maybeStockKeepingUnitContent.(*[]*StockKeepingUnitContent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitContentR{}
		}
		args = append(args, object.SkuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitContentR{}
			}

			for _, a := range args {
				if a == obj.SkuID {
					continue Outer
				}
			}

			args = append(args, obj.SkuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StockKeepingUnit")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StockKeepingUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(stockKeepingUnitContentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sku = foreign
		if foreign.R == nil {
			foreign.R = &stockKeepingUnitR{}
		}
		foreign.R.SkuStockKeepingUnitContents = append(foreign.R.SkuStockKeepingUnitContents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SkuID == foreign.ID {
				local.R.Sku = foreign
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.SkuStockKeepingUnitContents = append(foreign.R.SkuStockKeepingUnitContents, local)
				break
			}
		}
	}

	return nil
}

// SetSku of the stockKeepingUnitContent to the related item.
// Sets o.R.Sku to related.
// Adds o to related.R.SkuStockKeepingUnitContents.
func (o *StockKeepingUnitContent) SetSku(exec boil.Executor, insert bool, related *StockKeepingUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_unit_content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitContentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SkuID = related.ID
	if o.R == nil {
		o.R = &stockKeepingUnitContentR{
			Sku: related,
		}
	} else {
		o.R.Sku = related
	}

	if related.R == nil {
		related.R = &stockKeepingUnitR{
			SkuStockKeepingUnitContents: StockKeepingUnitContentSlice{o},
		}
	} else {
		related.R.SkuStockKeepingUnitContents = append(related.R.SkuStockKeepingUnitContents, o)
	}

	return nil
}

// StockKeepingUnitContents retrieves all the records using an executor.
func StockKeepingUnitContents(mods ...qm.QueryMod) stockKeepingUnitContentQuery {
	mods = append(mods, qm.From("\"stock_keeping_unit_content\""))
	return stockKeepingUnitContentQuery{NewQuery(mods...)}
}

// FindStockKeepingUnitContent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStockKeepingUnitContent(exec boil.Executor, iD string, selectCols ...string) (*StockKeepingUnitContent, error) {
	stockKeepingUnitContentObj := &StockKeepingUnitContent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stock_keeping_unit_content\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, stockKeepingUnitContentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from stock_keeping_unit_content")
	}

	return stockKeepingUnitContentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StockKeepingUnitContent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no stock_keeping_unit_content provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockKeepingUnitContentInsertCacheMut.RLock()
	cache, cached := stockKeepingUnitContentInsertCache[key]
	stockKeepingUnitContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockKeepingUnitContentAllColumns,
			stockKeepingUnitContentColumnsWithDefault,
			stockKeepingUnitContentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitContentType, stockKeepingUnitContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockKeepingUnitContentType, stockKeepingUnitContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stock_keeping_unit_content\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stock_keeping_unit_content\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into stock_keeping_unit_content")
	}

	if !cached {
		stockKeepingUnitContentInsertCacheMut.Lock()
		stockKeepingUnitContentInsertCache[key] = cache
		stockKeepingUnitContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the StockKeepingUnitContent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StockKeepingUnitContent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stockKeepingUnitContentUpdateCacheMut.RLock()
	cache, cached := stockKeepingUnitContentUpdateCache[key]
	stockKeepingUnitContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stockKeepingUnitContentAllColumns,
			stockKeepingUnitContentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update stock_keeping_unit_content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stock_keeping_unit_content\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stockKeepingUnitContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitContentType, stockKeepingUnitContentMapping, append(wl, stockKeepingUnitContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update stock_keeping_unit_content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for stock_keeping_unit_content")
	}

	if !cached {
		stockKeepingUnitContentUpdateCacheMut.Lock()
		stockKeepingUnitContentUpdateCache[key] = cache
		stockKeepingUnitContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stockKeepingUnitContentQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for stock_keeping_unit_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for stock_keeping_unit_content")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StockKeepingUnitContentSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stock_keeping_unit_content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stockKeepingUnitContentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in stockKeepingUnitContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all stockKeepingUnitContent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StockKeepingUnitContent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no stock_keeping_unit_content provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockKeepingUnitContentUpsertCacheMut.RLock()
	cache, cached := stockKeepingUnitContentUpsertCache[key]
	stockKeepingUnitContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stockKeepingUnitContentAllColumns,
			stockKeepingUnitContentColumnsWithDefault,
			stockKeepingUnitContentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stockKeepingUnitContentAllColumns,
			stockKeepingUnitContentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert stock_keeping_unit_content, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stockKeepingUnitContentPrimaryKeyColumns))
			copy(conflict, stockKeepingUnitContentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stock_keeping_unit_content\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitContentType, stockKeepingUnitContentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockKeepingUnitContentType, stockKeepingUnitContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert stock_keeping_unit_content")
	}

	if !cached {
		stockKeepingUnitContentUpsertCacheMut.Lock()
		stockKeepingUnitContentUpsertCache[key] = cache
		stockKeepingUnitContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single StockKeepingUnitContent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StockKeepingUnitContent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no StockKeepingUnitContent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stockKeepingUnitContentPrimaryKeyMapping)
	sql := "DELETE FROM \"stock_keeping_unit_content\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from stock_keeping_unit_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for stock_keeping_unit_content")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stockKeepingUnitContentQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no stockKeepingUnitContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from stock_keeping_unit_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for stock_keeping_unit_content")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StockKeepingUnitContentSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stockKeepingUnitContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stock_keeping_unit_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitContentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from stockKeepingUnitContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for stock_keeping_unit_content")
	}

	if len(stockKeepingUnitContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StockKeepingUnitContent) Reload(exec boil.Executor) error {
	ret, err := FindStockKeepingUnitContent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StockKeepingUnitContentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StockKeepingUnitContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stock_keeping_unit_content\".* FROM \"stock_keeping_unit_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in StockKeepingUnitContentSlice")
	}

	*o = slice

	return nil
}

// StockKeepingUnitContentExists checks if the StockKeepingUnitContent row exists.
func StockKeepingUnitContentExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stock_keeping_unit_content\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if stock_keeping_unit_content exists")
	}

	return exists, nil
}
