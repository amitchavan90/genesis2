// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Subtask is an object representing the database table.
type Subtask struct {
	ID          string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	TaskID      null.String `db:"task_id" boil:"task_id" json:"task_id,omitempty" toml:"task_id" yaml:"task_id,omitempty"`
	Title       string      `db:"title" boil:"title" json:"title" toml:"title" yaml:"title"`
	Description string      `db:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	UpdatedAt   time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *subtaskR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L subtaskL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubtaskColumns = struct {
	ID          string
	TaskID      string
	Title       string
	Description string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	TaskID:      "task_id",
	Title:       "title",
	Description: "description",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

// Generated where

var SubtaskWhere = struct {
	ID          whereHelperstring
	TaskID      whereHelpernull_String
	Title       whereHelperstring
	Description whereHelperstring
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"subtasks\".\"id\""},
	TaskID:      whereHelpernull_String{field: "\"subtasks\".\"task_id\""},
	Title:       whereHelperstring{field: "\"subtasks\".\"title\""},
	Description: whereHelperstring{field: "\"subtasks\".\"description\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"subtasks\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"subtasks\".\"created_at\""},
}

// SubtaskRels is where relationship names are stored.
var SubtaskRels = struct {
	Task         string
	UserSubtasks string
}{
	Task:         "Task",
	UserSubtasks: "UserSubtasks",
}

// subtaskR is where relationships are stored.
type subtaskR struct {
	Task         *Task
	UserSubtasks UserSubtaskSlice
}

// NewStruct creates a new relationship struct
func (*subtaskR) NewStruct() *subtaskR {
	return &subtaskR{}
}

// subtaskL is where Load methods for each relationship are stored.
type subtaskL struct{}

var (
	subtaskAllColumns            = []string{"id", "task_id", "title", "description", "updated_at", "created_at"}
	subtaskColumnsWithoutDefault = []string{"task_id", "title", "description"}
	subtaskColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	subtaskPrimaryKeyColumns     = []string{"id"}
)

type (
	// SubtaskSlice is an alias for a slice of pointers to Subtask.
	// This should generally be used opposed to []Subtask.
	SubtaskSlice []*Subtask
	// SubtaskHook is the signature for custom Subtask hook methods
	SubtaskHook func(boil.Executor, *Subtask) error

	subtaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subtaskType                 = reflect.TypeOf(&Subtask{})
	subtaskMapping              = queries.MakeStructMapping(subtaskType)
	subtaskPrimaryKeyMapping, _ = queries.BindMapping(subtaskType, subtaskMapping, subtaskPrimaryKeyColumns)
	subtaskInsertCacheMut       sync.RWMutex
	subtaskInsertCache          = make(map[string]insertCache)
	subtaskUpdateCacheMut       sync.RWMutex
	subtaskUpdateCache          = make(map[string]updateCache)
	subtaskUpsertCacheMut       sync.RWMutex
	subtaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subtaskBeforeInsertHooks []SubtaskHook
var subtaskBeforeUpdateHooks []SubtaskHook
var subtaskBeforeDeleteHooks []SubtaskHook
var subtaskBeforeUpsertHooks []SubtaskHook

var subtaskAfterInsertHooks []SubtaskHook
var subtaskAfterSelectHooks []SubtaskHook
var subtaskAfterUpdateHooks []SubtaskHook
var subtaskAfterDeleteHooks []SubtaskHook
var subtaskAfterUpsertHooks []SubtaskHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Subtask) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Subtask) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Subtask) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Subtask) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Subtask) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Subtask) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Subtask) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Subtask) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Subtask) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range subtaskAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubtaskHook registers your hook function for all future operations.
func AddSubtaskHook(hookPoint boil.HookPoint, subtaskHook SubtaskHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		subtaskBeforeInsertHooks = append(subtaskBeforeInsertHooks, subtaskHook)
	case boil.BeforeUpdateHook:
		subtaskBeforeUpdateHooks = append(subtaskBeforeUpdateHooks, subtaskHook)
	case boil.BeforeDeleteHook:
		subtaskBeforeDeleteHooks = append(subtaskBeforeDeleteHooks, subtaskHook)
	case boil.BeforeUpsertHook:
		subtaskBeforeUpsertHooks = append(subtaskBeforeUpsertHooks, subtaskHook)
	case boil.AfterInsertHook:
		subtaskAfterInsertHooks = append(subtaskAfterInsertHooks, subtaskHook)
	case boil.AfterSelectHook:
		subtaskAfterSelectHooks = append(subtaskAfterSelectHooks, subtaskHook)
	case boil.AfterUpdateHook:
		subtaskAfterUpdateHooks = append(subtaskAfterUpdateHooks, subtaskHook)
	case boil.AfterDeleteHook:
		subtaskAfterDeleteHooks = append(subtaskAfterDeleteHooks, subtaskHook)
	case boil.AfterUpsertHook:
		subtaskAfterUpsertHooks = append(subtaskAfterUpsertHooks, subtaskHook)
	}
}

// One returns a single subtask record from the query.
func (q subtaskQuery) One(exec boil.Executor) (*Subtask, error) {
	o := &Subtask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for subtasks")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Subtask records from the query.
func (q subtaskQuery) All(exec boil.Executor) (SubtaskSlice, error) {
	var o []*Subtask

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Subtask slice")
	}

	if len(subtaskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Subtask records in the query.
func (q subtaskQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count subtasks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subtaskQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if subtasks exists")
	}

	return count > 0, nil
}

// Task pointed to by the foreign key.
func (o *Subtask) Task(mods ...qm.QueryMod) taskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaskID),
	}

	queryMods = append(queryMods, mods...)

	query := Tasks(queryMods...)
	queries.SetFrom(query.Query, "\"tasks\"")

	return query
}

// UserSubtasks retrieves all the user_subtask's UserSubtasks with an executor.
func (o *Subtask) UserSubtasks(mods ...qm.QueryMod) userSubtaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_subtasks\".\"subtask_id\"=?", o.ID),
	)

	query := UserSubtasks(queryMods...)
	queries.SetFrom(query.Query, "\"user_subtasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_subtasks\".*"})
	}

	return query
}

// LoadTask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subtaskL) LoadTask(e boil.Executor, singular bool, maybeSubtask interface{}, mods queries.Applicator) error {
	var slice []*Subtask
	var object *Subtask

	if singular {
		object = maybeSubtask.(*Subtask)
	} else {
		slice = *maybeSubtask.(*[]*Subtask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subtaskR{}
		}
		if !queries.IsNil(object.TaskID) {
			args = append(args, object.TaskID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subtaskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TaskID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TaskID) {
				args = append(args, obj.TaskID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`tasks`), qm.WhereIn(`tasks.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Task")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(subtaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Task = foreign
		if foreign.R == nil {
			foreign.R = &taskR{}
		}
		foreign.R.Subtasks = append(foreign.R.Subtasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaskID, foreign.ID) {
				local.R.Task = foreign
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.Subtasks = append(foreign.R.Subtasks, local)
				break
			}
		}
	}

	return nil
}

// LoadUserSubtasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subtaskL) LoadUserSubtasks(e boil.Executor, singular bool, maybeSubtask interface{}, mods queries.Applicator) error {
	var slice []*Subtask
	var object *Subtask

	if singular {
		object = maybeSubtask.(*Subtask)
	} else {
		slice = *maybeSubtask.(*[]*Subtask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subtaskR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subtaskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_subtasks`), qm.WhereIn(`user_subtasks.subtask_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_subtasks")
	}

	var resultSlice []*UserSubtask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_subtasks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_subtasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_subtasks")
	}

	if len(userSubtaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserSubtasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userSubtaskR{}
			}
			foreign.R.Subtask = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SubtaskID) {
				local.R.UserSubtasks = append(local.R.UserSubtasks, foreign)
				if foreign.R == nil {
					foreign.R = &userSubtaskR{}
				}
				foreign.R.Subtask = local
				break
			}
		}
	}

	return nil
}

// SetTask of the subtask to the related item.
// Sets o.R.Task to related.
// Adds o to related.R.Subtasks.
func (o *Subtask) SetTask(exec boil.Executor, insert bool, related *Task) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subtasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
		strmangle.WhereClause("\"", "\"", 2, subtaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaskID, related.ID)
	if o.R == nil {
		o.R = &subtaskR{
			Task: related,
		}
	} else {
		o.R.Task = related
	}

	if related.R == nil {
		related.R = &taskR{
			Subtasks: SubtaskSlice{o},
		}
	} else {
		related.R.Subtasks = append(related.R.Subtasks, o)
	}

	return nil
}

// RemoveTask relationship.
// Sets o.R.Task to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Subtask) RemoveTask(exec boil.Executor, related *Task) error {
	var err error

	queries.SetScanner(&o.TaskID, nil)
	if _, err = o.Update(exec, boil.Whitelist("task_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Task = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Subtasks {
		if queries.Equal(o.TaskID, ri.TaskID) {
			continue
		}

		ln := len(related.R.Subtasks)
		if ln > 1 && i < ln-1 {
			related.R.Subtasks[i] = related.R.Subtasks[ln-1]
		}
		related.R.Subtasks = related.R.Subtasks[:ln-1]
		break
	}
	return nil
}

// AddUserSubtasks adds the given related objects to the existing relationships
// of the subtask, optionally inserting them as new records.
// Appends related to o.R.UserSubtasks.
// Sets related.R.Subtask appropriately.
func (o *Subtask) AddUserSubtasks(exec boil.Executor, insert bool, related ...*UserSubtask) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SubtaskID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_subtasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"subtask_id"}),
				strmangle.WhereClause("\"", "\"", 2, userSubtaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SubtaskID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &subtaskR{
			UserSubtasks: related,
		}
	} else {
		o.R.UserSubtasks = append(o.R.UserSubtasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userSubtaskR{
				Subtask: o,
			}
		} else {
			rel.R.Subtask = o
		}
	}
	return nil
}

// SetUserSubtasks removes all previously related items of the
// subtask replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Subtask's UserSubtasks accordingly.
// Replaces o.R.UserSubtasks with related.
// Sets related.R.Subtask's UserSubtasks accordingly.
func (o *Subtask) SetUserSubtasks(exec boil.Executor, insert bool, related ...*UserSubtask) error {
	query := "update \"user_subtasks\" set \"subtask_id\" = null where \"subtask_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserSubtasks {
			queries.SetScanner(&rel.SubtaskID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Subtask = nil
		}

		o.R.UserSubtasks = nil
	}
	return o.AddUserSubtasks(exec, insert, related...)
}

// RemoveUserSubtasks relationships from objects passed in.
// Removes related items from R.UserSubtasks (uses pointer comparison, removal does not keep order)
// Sets related.R.Subtask.
func (o *Subtask) RemoveUserSubtasks(exec boil.Executor, related ...*UserSubtask) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SubtaskID, nil)
		if rel.R != nil {
			rel.R.Subtask = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("subtask_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserSubtasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserSubtasks)
			if ln > 1 && i < ln-1 {
				o.R.UserSubtasks[i] = o.R.UserSubtasks[ln-1]
			}
			o.R.UserSubtasks = o.R.UserSubtasks[:ln-1]
			break
		}
	}

	return nil
}

// Subtasks retrieves all the records using an executor.
func Subtasks(mods ...qm.QueryMod) subtaskQuery {
	mods = append(mods, qm.From("\"subtasks\""))
	return subtaskQuery{NewQuery(mods...)}
}

// FindSubtask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubtask(exec boil.Executor, iD string, selectCols ...string) (*Subtask, error) {
	subtaskObj := &Subtask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subtasks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, subtaskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from subtasks")
	}

	return subtaskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Subtask) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no subtasks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subtaskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subtaskInsertCacheMut.RLock()
	cache, cached := subtaskInsertCache[key]
	subtaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subtaskAllColumns,
			subtaskColumnsWithDefault,
			subtaskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subtaskType, subtaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subtaskType, subtaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subtasks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subtasks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into subtasks")
	}

	if !cached {
		subtaskInsertCacheMut.Lock()
		subtaskInsertCache[key] = cache
		subtaskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Subtask.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Subtask) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subtaskUpdateCacheMut.RLock()
	cache, cached := subtaskUpdateCache[key]
	subtaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subtaskAllColumns,
			subtaskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update subtasks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subtasks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subtaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subtaskType, subtaskMapping, append(wl, subtaskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update subtasks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for subtasks")
	}

	if !cached {
		subtaskUpdateCacheMut.Lock()
		subtaskUpdateCache[key] = cache
		subtaskUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subtaskQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for subtasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for subtasks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubtaskSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subtaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subtasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subtaskPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in subtask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all subtask")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Subtask) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no subtasks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subtaskColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subtaskUpsertCacheMut.RLock()
	cache, cached := subtaskUpsertCache[key]
	subtaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subtaskAllColumns,
			subtaskColumnsWithDefault,
			subtaskColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			subtaskAllColumns,
			subtaskPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert subtasks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subtaskPrimaryKeyColumns))
			copy(conflict, subtaskPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subtasks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subtaskType, subtaskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subtaskType, subtaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert subtasks")
	}

	if !cached {
		subtaskUpsertCacheMut.Lock()
		subtaskUpsertCache[key] = cache
		subtaskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Subtask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Subtask) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Subtask provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subtaskPrimaryKeyMapping)
	sql := "DELETE FROM \"subtasks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from subtasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for subtasks")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subtaskQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no subtaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from subtasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for subtasks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubtaskSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subtaskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subtaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subtasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subtaskPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from subtask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for subtasks")
	}

	if len(subtaskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Subtask) Reload(exec boil.Executor) error {
	ret, err := FindSubtask(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubtaskSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubtaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subtaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subtasks\".* FROM \"subtasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subtaskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in SubtaskSlice")
	}

	*o = slice

	return nil
}

// SubtaskExists checks if the Subtask row exists.
func SubtaskExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subtasks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if subtasks exists")
	}

	return exists, nil
}
