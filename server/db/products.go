// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Product is an object representing the database table.
type Product struct {
	ID                  string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Code                string      `db:"code" boil:"code" json:"code" toml:"code" yaml:"code"`
	Description         string      `db:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	RegisterID          string      `db:"register_id" boil:"register_id" json:"register_id" toml:"register_id" yaml:"register_id"`
	IsBeef              bool        `db:"is_beef" boil:"is_beef" json:"is_beef" toml:"is_beef" yaml:"is_beef"`
	IsPointBound        bool        `db:"is_point_bound" boil:"is_point_bound" json:"is_point_bound" toml:"is_point_bound" yaml:"is_point_bound"`
	IsAppBound          bool        `db:"is_app_bound" boil:"is_app_bound" json:"is_app_bound" toml:"is_app_bound" yaml:"is_app_bound"`
	LoyaltyPoints       int         `db:"loyalty_points" boil:"loyalty_points" json:"loyalty_points" toml:"loyalty_points" yaml:"loyalty_points"`
	LoyaltyPointsExpire time.Time   `db:"loyalty_points_expire" boil:"loyalty_points_expire" json:"loyalty_points_expire" toml:"loyalty_points_expire" yaml:"loyalty_points_expire"`
	SkuID               null.String `db:"sku_id" boil:"sku_id" json:"sku_id,omitempty" toml:"sku_id" yaml:"sku_id,omitempty"`
	CartonID            null.String `db:"carton_id" boil:"carton_id" json:"carton_id,omitempty" toml:"carton_id" yaml:"carton_id,omitempty"`
	OrderID             null.String `db:"order_id" boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	ContractID          null.String `db:"contract_id" boil:"contract_id" json:"contract_id,omitempty" toml:"contract_id" yaml:"contract_id,omitempty"`
	DistributorID       null.String `db:"distributor_id" boil:"distributor_id" json:"distributor_id,omitempty" toml:"distributor_id" yaml:"distributor_id,omitempty"`
	IsClosed            bool        `db:"is_closed" boil:"is_closed" json:"is_closed" toml:"is_closed" yaml:"is_closed"`
	CloseRegisterID     null.String `db:"close_register_id" boil:"close_register_id" json:"close_register_id,omitempty" toml:"close_register_id" yaml:"close_register_id,omitempty"`
	TransactionHash     string      `db:"transaction_hash" boil:"transaction_hash" json:"transaction_hash" toml:"transaction_hash" yaml:"transaction_hash"`
	Archived            bool        `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt          null.Time   `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt           time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt           time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedByID         string      `db:"created_by_id" boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`

	R *productR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductColumns = struct {
	ID                  string
	Code                string
	Description         string
	RegisterID          string
	IsBeef              string
	IsPointBound        string
	IsAppBound          string
	LoyaltyPoints       string
	LoyaltyPointsExpire string
	SkuID               string
	CartonID            string
	OrderID             string
	ContractID          string
	DistributorID       string
	IsClosed            string
	CloseRegisterID     string
	TransactionHash     string
	Archived            string
	ArchivedAt          string
	UpdatedAt           string
	CreatedAt           string
	CreatedByID         string
}{
	ID:                  "id",
	Code:                "code",
	Description:         "description",
	RegisterID:          "register_id",
	IsBeef:              "is_beef",
	IsPointBound:        "is_point_bound",
	IsAppBound:          "is_app_bound",
	LoyaltyPoints:       "loyalty_points",
	LoyaltyPointsExpire: "loyalty_points_expire",
	SkuID:               "sku_id",
	CartonID:            "carton_id",
	OrderID:             "order_id",
	ContractID:          "contract_id",
	DistributorID:       "distributor_id",
	IsClosed:            "is_closed",
	CloseRegisterID:     "close_register_id",
	TransactionHash:     "transaction_hash",
	Archived:            "archived",
	ArchivedAt:          "archived_at",
	UpdatedAt:           "updated_at",
	CreatedAt:           "created_at",
	CreatedByID:         "created_by_id",
}

// Generated where

var ProductWhere = struct {
	ID                  whereHelperstring
	Code                whereHelperstring
	Description         whereHelperstring
	RegisterID          whereHelperstring
	IsBeef              whereHelperbool
	IsPointBound        whereHelperbool
	IsAppBound          whereHelperbool
	LoyaltyPoints       whereHelperint
	LoyaltyPointsExpire whereHelpertime_Time
	SkuID               whereHelpernull_String
	CartonID            whereHelpernull_String
	OrderID             whereHelpernull_String
	ContractID          whereHelpernull_String
	DistributorID       whereHelpernull_String
	IsClosed            whereHelperbool
	CloseRegisterID     whereHelpernull_String
	TransactionHash     whereHelperstring
	Archived            whereHelperbool
	ArchivedAt          whereHelpernull_Time
	UpdatedAt           whereHelpertime_Time
	CreatedAt           whereHelpertime_Time
	CreatedByID         whereHelperstring
}{
	ID:                  whereHelperstring{field: "\"products\".\"id\""},
	Code:                whereHelperstring{field: "\"products\".\"code\""},
	Description:         whereHelperstring{field: "\"products\".\"description\""},
	RegisterID:          whereHelperstring{field: "\"products\".\"register_id\""},
	IsBeef:              whereHelperbool{field: "\"products\".\"is_beef\""},
	IsPointBound:        whereHelperbool{field: "\"products\".\"is_point_bound\""},
	IsAppBound:          whereHelperbool{field: "\"products\".\"is_app_bound\""},
	LoyaltyPoints:       whereHelperint{field: "\"products\".\"loyalty_points\""},
	LoyaltyPointsExpire: whereHelpertime_Time{field: "\"products\".\"loyalty_points_expire\""},
	SkuID:               whereHelpernull_String{field: "\"products\".\"sku_id\""},
	CartonID:            whereHelpernull_String{field: "\"products\".\"carton_id\""},
	OrderID:             whereHelpernull_String{field: "\"products\".\"order_id\""},
	ContractID:          whereHelpernull_String{field: "\"products\".\"contract_id\""},
	DistributorID:       whereHelpernull_String{field: "\"products\".\"distributor_id\""},
	IsClosed:            whereHelperbool{field: "\"products\".\"is_closed\""},
	CloseRegisterID:     whereHelpernull_String{field: "\"products\".\"close_register_id\""},
	TransactionHash:     whereHelperstring{field: "\"products\".\"transaction_hash\""},
	Archived:            whereHelperbool{field: "\"products\".\"archived\""},
	ArchivedAt:          whereHelpernull_Time{field: "\"products\".\"archived_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"products\".\"updated_at\""},
	CreatedAt:           whereHelpertime_Time{field: "\"products\".\"created_at\""},
	CreatedByID:         whereHelperstring{field: "\"products\".\"created_by_id\""},
}

// ProductRels is where relationship names are stored.
var ProductRels = struct {
	Carton                 string
	Contract               string
	CreatedBy              string
	Distributor            string
	Order                  string
	Sku                    string
	Transactions           string
	UserLoyaltyActivities  string
	UserPurchaseActivities string
}{
	Carton:                 "Carton",
	Contract:               "Contract",
	CreatedBy:              "CreatedBy",
	Distributor:            "Distributor",
	Order:                  "Order",
	Sku:                    "Sku",
	Transactions:           "Transactions",
	UserLoyaltyActivities:  "UserLoyaltyActivities",
	UserPurchaseActivities: "UserPurchaseActivities",
}

// productR is where relationships are stored.
type productR struct {
	Carton                 *Carton
	Contract               *Contract
	CreatedBy              *User
	Distributor            *Distributor
	Order                  *Order
	Sku                    *StockKeepingUnit
	Transactions           TransactionSlice
	UserLoyaltyActivities  UserLoyaltyActivitySlice
	UserPurchaseActivities UserPurchaseActivitySlice
}

// NewStruct creates a new relationship struct
func (*productR) NewStruct() *productR {
	return &productR{}
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productAllColumns            = []string{"id", "code", "description", "register_id", "is_beef", "is_point_bound", "is_app_bound", "loyalty_points", "loyalty_points_expire", "sku_id", "carton_id", "order_id", "contract_id", "distributor_id", "is_closed", "close_register_id", "transaction_hash", "archived", "archived_at", "updated_at", "created_at", "created_by_id"}
	productColumnsWithoutDefault = []string{"code", "sku_id", "carton_id", "order_id", "contract_id", "distributor_id", "close_register_id", "transaction_hash", "archived_at", "created_by_id"}
	productColumnsWithDefault    = []string{"id", "description", "register_id", "is_beef", "is_point_bound", "is_app_bound", "loyalty_points", "loyalty_points_expire", "is_closed", "archived", "updated_at", "created_at"}
	productPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should generally be used opposed to []Product.
	ProductSlice []*Product
	// ProductHook is the signature for custom Product hook methods
	ProductHook func(boil.Executor, *Product) error

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productBeforeInsertHooks []ProductHook
var productBeforeUpdateHooks []ProductHook
var productBeforeDeleteHooks []ProductHook
var productBeforeUpsertHooks []ProductHook

var productAfterInsertHooks []ProductHook
var productAfterSelectHooks []ProductHook
var productAfterUpdateHooks []ProductHook
var productAfterDeleteHooks []ProductHook
var productAfterUpsertHooks []ProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Product) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Product) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Product) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Product) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Product) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Product) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Product) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Product) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Product) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductHook registers your hook function for all future operations.
func AddProductHook(hookPoint boil.HookPoint, productHook ProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productBeforeInsertHooks = append(productBeforeInsertHooks, productHook)
	case boil.BeforeUpdateHook:
		productBeforeUpdateHooks = append(productBeforeUpdateHooks, productHook)
	case boil.BeforeDeleteHook:
		productBeforeDeleteHooks = append(productBeforeDeleteHooks, productHook)
	case boil.BeforeUpsertHook:
		productBeforeUpsertHooks = append(productBeforeUpsertHooks, productHook)
	case boil.AfterInsertHook:
		productAfterInsertHooks = append(productAfterInsertHooks, productHook)
	case boil.AfterSelectHook:
		productAfterSelectHooks = append(productAfterSelectHooks, productHook)
	case boil.AfterUpdateHook:
		productAfterUpdateHooks = append(productAfterUpdateHooks, productHook)
	case boil.AfterDeleteHook:
		productAfterDeleteHooks = append(productAfterDeleteHooks, productHook)
	case boil.AfterUpsertHook:
		productAfterUpsertHooks = append(productAfterUpsertHooks, productHook)
	}
}

// One returns a single product record from the query.
func (q productQuery) One(exec boil.Executor) (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for products")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Product records from the query.
func (q productQuery) All(exec boil.Executor) (ProductSlice, error) {
	var o []*Product

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Product slice")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if products exists")
	}

	return count > 0, nil
}

// Carton pointed to by the foreign key.
func (o *Product) Carton(mods ...qm.QueryMod) cartonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CartonID),
	}

	queryMods = append(queryMods, mods...)

	query := Cartons(queryMods...)
	queries.SetFrom(query.Query, "\"cartons\"")

	return query
}

// Contract pointed to by the foreign key.
func (o *Product) Contract(mods ...qm.QueryMod) contractQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContractID),
	}

	queryMods = append(queryMods, mods...)

	query := Contracts(queryMods...)
	queries.SetFrom(query.Query, "\"contracts\"")

	return query
}

// CreatedBy pointed to by the foreign key.
func (o *Product) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Distributor pointed to by the foreign key.
func (o *Product) Distributor(mods ...qm.QueryMod) distributorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DistributorID),
	}

	queryMods = append(queryMods, mods...)

	query := Distributors(queryMods...)
	queries.SetFrom(query.Query, "\"distributors\"")

	return query
}

// Order pointed to by the foreign key.
func (o *Product) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := Orders(queryMods...)
	queries.SetFrom(query.Query, "\"orders\"")

	return query
}

// Sku pointed to by the foreign key.
func (o *Product) Sku(mods ...qm.QueryMod) stockKeepingUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkuID),
	}

	queryMods = append(queryMods, mods...)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	return query
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *Product) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"product_id\"=?", o.ID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// UserLoyaltyActivities retrieves all the user_loyalty_activity's UserLoyaltyActivities with an executor.
func (o *Product) UserLoyaltyActivities(mods ...qm.QueryMod) userLoyaltyActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_loyalty_activities\".\"product_id\"=?", o.ID),
	)

	query := UserLoyaltyActivities(queryMods...)
	queries.SetFrom(query.Query, "\"user_loyalty_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_loyalty_activities\".*"})
	}

	return query
}

// UserPurchaseActivities retrieves all the user_purchase_activity's UserPurchaseActivities with an executor.
func (o *Product) UserPurchaseActivities(mods ...qm.QueryMod) userPurchaseActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_purchase_activities\".\"product_id\"=?", o.ID),
	)

	query := UserPurchaseActivities(queryMods...)
	queries.SetFrom(query.Query, "\"user_purchase_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_purchase_activities\".*"})
	}

	return query
}

// LoadCarton allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadCarton(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		if !queries.IsNil(object.CartonID) {
			args = append(args, object.CartonID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CartonID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CartonID) {
				args = append(args, obj.CartonID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`cartons`), qm.WhereIn(`cartons.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Carton")
	}

	var resultSlice []*Carton
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Carton")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cartons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cartons")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Carton = foreign
		if foreign.R == nil {
			foreign.R = &cartonR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CartonID, foreign.ID) {
				local.R.Carton = foreign
				if foreign.R == nil {
					foreign.R = &cartonR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadContract allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadContract(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		if !queries.IsNil(object.ContractID) {
			args = append(args, object.ContractID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ContractID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ContractID) {
				args = append(args, obj.ContractID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`contracts`), qm.WhereIn(`contracts.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Contract")
	}

	var resultSlice []*Contract
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Contract")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contracts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contracts")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Contract = foreign
		if foreign.R == nil {
			foreign.R = &contractR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ContractID, foreign.ID) {
				local.R.Contract = foreign
				if foreign.R == nil {
					foreign.R = &contractR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadCreatedBy(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByProducts = append(foreign.R.CreatedByProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByProducts = append(foreign.R.CreatedByProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadDistributor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadDistributor(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		if !queries.IsNil(object.DistributorID) {
			args = append(args, object.DistributorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DistributorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DistributorID) {
				args = append(args, obj.DistributorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`distributors`), qm.WhereIn(`distributors.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Distributor")
	}

	var resultSlice []*Distributor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Distributor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for distributors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for distributors")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Distributor = foreign
		if foreign.R == nil {
			foreign.R = &distributorR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DistributorID, foreign.ID) {
				local.R.Distributor = foreign
				if foreign.R == nil {
					foreign.R = &distributorR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadOrder(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`orders`), qm.WhereIn(`orders.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.Products = append(foreign.R.Products, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadSku allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadSku(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		if !queries.IsNil(object.SkuID) {
			args = append(args, object.SkuID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SkuID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SkuID) {
				args = append(args, obj.SkuID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StockKeepingUnit")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StockKeepingUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sku = foreign
		if foreign.R == nil {
			foreign.R = &stockKeepingUnitR{}
		}
		foreign.R.SkuProducts = append(foreign.R.SkuProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SkuID, foreign.ID) {
				local.R.Sku = foreign
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.SkuProducts = append(foreign.R.SkuProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadTransactions(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`transactions`), qm.WhereIn(`transactions.product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadUserLoyaltyActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadUserLoyaltyActivities(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_loyalty_activities`), qm.WhereIn(`user_loyalty_activities.product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_loyalty_activities")
	}

	var resultSlice []*UserLoyaltyActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_loyalty_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_loyalty_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_loyalty_activities")
	}

	if len(userLoyaltyActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserLoyaltyActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userLoyaltyActivityR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.UserLoyaltyActivities = append(local.R.UserLoyaltyActivities, foreign)
				if foreign.R == nil {
					foreign.R = &userLoyaltyActivityR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadUserPurchaseActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadUserPurchaseActivities(e boil.Executor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_purchase_activities`), qm.WhereIn(`user_purchase_activities.product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_purchase_activities")
	}

	var resultSlice []*UserPurchaseActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_purchase_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_purchase_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_purchase_activities")
	}

	if len(userPurchaseActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserPurchaseActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userPurchaseActivityR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.UserPurchaseActivities = append(local.R.UserPurchaseActivities, foreign)
				if foreign.R == nil {
					foreign.R = &userPurchaseActivityR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// SetCarton of the product to the related item.
// Sets o.R.Carton to related.
// Adds o to related.R.Products.
func (o *Product) SetCarton(exec boil.Executor, insert bool, related *Carton) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"carton_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CartonID, related.ID)
	if o.R == nil {
		o.R = &productR{
			Carton: related,
		}
	} else {
		o.R.Carton = related
	}

	if related.R == nil {
		related.R = &cartonR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// RemoveCarton relationship.
// Sets o.R.Carton to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Product) RemoveCarton(exec boil.Executor, related *Carton) error {
	var err error

	queries.SetScanner(&o.CartonID, nil)
	if _, err = o.Update(exec, boil.Whitelist("carton_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Carton = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Products {
		if queries.Equal(o.CartonID, ri.CartonID) {
			continue
		}

		ln := len(related.R.Products)
		if ln > 1 && i < ln-1 {
			related.R.Products[i] = related.R.Products[ln-1]
		}
		related.R.Products = related.R.Products[:ln-1]
		break
	}
	return nil
}

// SetContract of the product to the related item.
// Sets o.R.Contract to related.
// Adds o to related.R.Products.
func (o *Product) SetContract(exec boil.Executor, insert bool, related *Contract) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"contract_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ContractID, related.ID)
	if o.R == nil {
		o.R = &productR{
			Contract: related,
		}
	} else {
		o.R.Contract = related
	}

	if related.R == nil {
		related.R = &contractR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// RemoveContract relationship.
// Sets o.R.Contract to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Product) RemoveContract(exec boil.Executor, related *Contract) error {
	var err error

	queries.SetScanner(&o.ContractID, nil)
	if _, err = o.Update(exec, boil.Whitelist("contract_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Contract = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Products {
		if queries.Equal(o.ContractID, ri.ContractID) {
			continue
		}

		ln := len(related.R.Products)
		if ln > 1 && i < ln-1 {
			related.R.Products[i] = related.R.Products[ln-1]
		}
		related.R.Products = related.R.Products[:ln-1]
		break
	}
	return nil
}

// SetCreatedBy of the product to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByProducts.
func (o *Product) SetCreatedBy(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &productR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByProducts: ProductSlice{o},
		}
	} else {
		related.R.CreatedByProducts = append(related.R.CreatedByProducts, o)
	}

	return nil
}

// SetDistributor of the product to the related item.
// Sets o.R.Distributor to related.
// Adds o to related.R.Products.
func (o *Product) SetDistributor(exec boil.Executor, insert bool, related *Distributor) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"distributor_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DistributorID, related.ID)
	if o.R == nil {
		o.R = &productR{
			Distributor: related,
		}
	} else {
		o.R.Distributor = related
	}

	if related.R == nil {
		related.R = &distributorR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// RemoveDistributor relationship.
// Sets o.R.Distributor to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Product) RemoveDistributor(exec boil.Executor, related *Distributor) error {
	var err error

	queries.SetScanner(&o.DistributorID, nil)
	if _, err = o.Update(exec, boil.Whitelist("distributor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Distributor = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Products {
		if queries.Equal(o.DistributorID, ri.DistributorID) {
			continue
		}

		ln := len(related.R.Products)
		if ln > 1 && i < ln-1 {
			related.R.Products[i] = related.R.Products[ln-1]
		}
		related.R.Products = related.R.Products[:ln-1]
		break
	}
	return nil
}

// SetOrder of the product to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.Products.
func (o *Product) SetOrder(exec boil.Executor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &productR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Product) RemoveOrder(exec boil.Executor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Products {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.Products)
		if ln > 1 && i < ln-1 {
			related.R.Products[i] = related.R.Products[ln-1]
		}
		related.R.Products = related.R.Products[:ln-1]
		break
	}
	return nil
}

// SetSku of the product to the related item.
// Sets o.R.Sku to related.
// Adds o to related.R.SkuProducts.
func (o *Product) SetSku(exec boil.Executor, insert bool, related *StockKeepingUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SkuID, related.ID)
	if o.R == nil {
		o.R = &productR{
			Sku: related,
		}
	} else {
		o.R.Sku = related
	}

	if related.R == nil {
		related.R = &stockKeepingUnitR{
			SkuProducts: ProductSlice{o},
		}
	} else {
		related.R.SkuProducts = append(related.R.SkuProducts, o)
	}

	return nil
}

// RemoveSku relationship.
// Sets o.R.Sku to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Product) RemoveSku(exec boil.Executor, related *StockKeepingUnit) error {
	var err error

	queries.SetScanner(&o.SkuID, nil)
	if _, err = o.Update(exec, boil.Whitelist("sku_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sku = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SkuProducts {
		if queries.Equal(o.SkuID, ri.SkuID) {
			continue
		}

		ln := len(related.R.SkuProducts)
		if ln > 1 && i < ln-1 {
			related.R.SkuProducts[i] = related.R.SkuProducts[ln-1]
		}
		related.R.SkuProducts = related.R.SkuProducts[:ln-1]
		break
	}
	return nil
}

// AddTransactions adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Product appropriately.
func (o *Product) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetTransactions removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Product's Transactions accordingly.
func (o *Product) SetTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"product_id\" = null where \"product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Transactions {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.Transactions = nil
	}
	return o.AddTransactions(exec, insert, related...)
}

// RemoveTransactions relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveTransactions(exec boil.Executor, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Transactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Transactions)
			if ln > 1 && i < ln-1 {
				o.R.Transactions[i] = o.R.Transactions[ln-1]
			}
			o.R.Transactions = o.R.Transactions[:ln-1]
			break
		}
	}

	return nil
}

// AddUserLoyaltyActivities adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.UserLoyaltyActivities.
// Sets related.R.Product appropriately.
func (o *Product) AddUserLoyaltyActivities(exec boil.Executor, insert bool, related ...*UserLoyaltyActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_loyalty_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
				strmangle.WhereClause("\"", "\"", 2, userLoyaltyActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			UserLoyaltyActivities: related,
		}
	} else {
		o.R.UserLoyaltyActivities = append(o.R.UserLoyaltyActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userLoyaltyActivityR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetUserLoyaltyActivities removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's UserLoyaltyActivities accordingly.
// Replaces o.R.UserLoyaltyActivities with related.
// Sets related.R.Product's UserLoyaltyActivities accordingly.
func (o *Product) SetUserLoyaltyActivities(exec boil.Executor, insert bool, related ...*UserLoyaltyActivity) error {
	query := "update \"user_loyalty_activities\" set \"product_id\" = null where \"product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserLoyaltyActivities {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.UserLoyaltyActivities = nil
	}
	return o.AddUserLoyaltyActivities(exec, insert, related...)
}

// RemoveUserLoyaltyActivities relationships from objects passed in.
// Removes related items from R.UserLoyaltyActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveUserLoyaltyActivities(exec boil.Executor, related ...*UserLoyaltyActivity) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserLoyaltyActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserLoyaltyActivities)
			if ln > 1 && i < ln-1 {
				o.R.UserLoyaltyActivities[i] = o.R.UserLoyaltyActivities[ln-1]
			}
			o.R.UserLoyaltyActivities = o.R.UserLoyaltyActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddUserPurchaseActivities adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.UserPurchaseActivities.
// Sets related.R.Product appropriately.
func (o *Product) AddUserPurchaseActivities(exec boil.Executor, insert bool, related ...*UserPurchaseActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_purchase_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPurchaseActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			UserPurchaseActivities: related,
		}
	} else {
		o.R.UserPurchaseActivities = append(o.R.UserPurchaseActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPurchaseActivityR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetUserPurchaseActivities removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's UserPurchaseActivities accordingly.
// Replaces o.R.UserPurchaseActivities with related.
// Sets related.R.Product's UserPurchaseActivities accordingly.
func (o *Product) SetUserPurchaseActivities(exec boil.Executor, insert bool, related ...*UserPurchaseActivity) error {
	query := "update \"user_purchase_activities\" set \"product_id\" = null where \"product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserPurchaseActivities {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.UserPurchaseActivities = nil
	}
	return o.AddUserPurchaseActivities(exec, insert, related...)
}

// RemoveUserPurchaseActivities relationships from objects passed in.
// Removes related items from R.UserPurchaseActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveUserPurchaseActivities(exec boil.Executor, related ...*UserPurchaseActivity) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserPurchaseActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserPurchaseActivities)
			if ln > 1 && i < ln-1 {
				o.R.UserPurchaseActivities[i] = o.R.UserPurchaseActivities[ln-1]
			}
			o.R.UserPurchaseActivities = o.R.UserPurchaseActivities[:ln-1]
			break
		}
	}

	return nil
}

// Products retrieves all the records using an executor.
func Products(mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("\"products\""))
	return productQuery{NewQuery(mods...)}
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(exec boil.Executor, iD string, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from products")
	}

	return productObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Product) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no products provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into products")
	}

	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Product.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Product) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for products")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all product")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Product) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no products provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productPrimaryKeyColumns))
			copy(conflict, productPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert products")
	}

	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Product provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM \"products\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for products")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for products")
	}

	if len(productAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(exec boil.Executor) error {
	ret, err := FindProduct(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"products\".* FROM \"products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ProductSlice")
	}

	*o = slice

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"products\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if products exists")
	}

	return exists, nil
}
