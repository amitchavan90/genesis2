// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Task is an object representing the database table.
type Task struct {
	ID                string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Title             string      `db:"title" boil:"title" json:"title" toml:"title" yaml:"title"`
	Description       string      `db:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	LoyaltyPoints     int         `db:"loyalty_points" boil:"loyalty_points" json:"loyalty_points" toml:"loyalty_points" yaml:"loyalty_points"`
	IsTimeBound       bool        `db:"is_time_bound" boil:"is_time_bound" json:"is_time_bound" toml:"is_time_bound" yaml:"is_time_bound"`
	IsPeopleBound     bool        `db:"is_people_bound" boil:"is_people_bound" json:"is_people_bound" toml:"is_people_bound" yaml:"is_people_bound"`
	IsProductRelevant bool        `db:"is_product_relevant" boil:"is_product_relevant" json:"is_product_relevant" toml:"is_product_relevant" yaml:"is_product_relevant"`
	FinishDate        null.Time   `db:"finish_date" boil:"finish_date" json:"finish_date,omitempty" toml:"finish_date" yaml:"finish_date,omitempty"`
	MaximumPeople     int         `db:"maximum_people" boil:"maximum_people" json:"maximum_people" toml:"maximum_people" yaml:"maximum_people"`
	SkuID             null.String `db:"sku_id" boil:"sku_id" json:"sku_id,omitempty" toml:"sku_id" yaml:"sku_id,omitempty"`
	IsFinal           bool        `db:"is_final" boil:"is_final" json:"is_final" toml:"is_final" yaml:"is_final"`
	Archived          bool        `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt        null.Time   `db:"archived_at" boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt         time.Time   `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt         time.Time   `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *taskR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskColumns = struct {
	ID                string
	Title             string
	Description       string
	LoyaltyPoints     string
	IsTimeBound       string
	IsPeopleBound     string
	IsProductRelevant string
	FinishDate        string
	MaximumPeople     string
	SkuID             string
	IsFinal           string
	Archived          string
	ArchivedAt        string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "id",
	Title:             "title",
	Description:       "description",
	LoyaltyPoints:     "loyalty_points",
	IsTimeBound:       "is_time_bound",
	IsPeopleBound:     "is_people_bound",
	IsProductRelevant: "is_product_relevant",
	FinishDate:        "finish_date",
	MaximumPeople:     "maximum_people",
	SkuID:             "sku_id",
	IsFinal:           "is_final",
	Archived:          "archived",
	ArchivedAt:        "archived_at",
	UpdatedAt:         "updated_at",
	CreatedAt:         "created_at",
}

// Generated where

var TaskWhere = struct {
	ID                whereHelperstring
	Title             whereHelperstring
	Description       whereHelperstring
	LoyaltyPoints     whereHelperint
	IsTimeBound       whereHelperbool
	IsPeopleBound     whereHelperbool
	IsProductRelevant whereHelperbool
	FinishDate        whereHelpernull_Time
	MaximumPeople     whereHelperint
	SkuID             whereHelpernull_String
	IsFinal           whereHelperbool
	Archived          whereHelperbool
	ArchivedAt        whereHelpernull_Time
	UpdatedAt         whereHelpertime_Time
	CreatedAt         whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "\"tasks\".\"id\""},
	Title:             whereHelperstring{field: "\"tasks\".\"title\""},
	Description:       whereHelperstring{field: "\"tasks\".\"description\""},
	LoyaltyPoints:     whereHelperint{field: "\"tasks\".\"loyalty_points\""},
	IsTimeBound:       whereHelperbool{field: "\"tasks\".\"is_time_bound\""},
	IsPeopleBound:     whereHelperbool{field: "\"tasks\".\"is_people_bound\""},
	IsProductRelevant: whereHelperbool{field: "\"tasks\".\"is_product_relevant\""},
	FinishDate:        whereHelpernull_Time{field: "\"tasks\".\"finish_date\""},
	MaximumPeople:     whereHelperint{field: "\"tasks\".\"maximum_people\""},
	SkuID:             whereHelpernull_String{field: "\"tasks\".\"sku_id\""},
	IsFinal:           whereHelperbool{field: "\"tasks\".\"is_final\""},
	Archived:          whereHelperbool{field: "\"tasks\".\"archived\""},
	ArchivedAt:        whereHelpernull_Time{field: "\"tasks\".\"archived_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"tasks\".\"updated_at\""},
	CreatedAt:         whereHelpertime_Time{field: "\"tasks\".\"created_at\""},
}

// TaskRels is where relationship names are stored.
var TaskRels = struct {
	Sku       string
	Subtasks  string
	UserTasks string
}{
	Sku:       "Sku",
	Subtasks:  "Subtasks",
	UserTasks: "UserTasks",
}

// taskR is where relationships are stored.
type taskR struct {
	Sku       *StockKeepingUnit
	Subtasks  SubtaskSlice
	UserTasks UserTaskSlice
}

// NewStruct creates a new relationship struct
func (*taskR) NewStruct() *taskR {
	return &taskR{}
}

// taskL is where Load methods for each relationship are stored.
type taskL struct{}

var (
	taskAllColumns            = []string{"id", "title", "description", "loyalty_points", "is_time_bound", "is_people_bound", "is_product_relevant", "finish_date", "maximum_people", "sku_id", "is_final", "archived", "archived_at", "updated_at", "created_at"}
	taskColumnsWithoutDefault = []string{"title", "description", "finish_date", "sku_id", "archived_at"}
	taskColumnsWithDefault    = []string{"id", "loyalty_points", "is_time_bound", "is_people_bound", "is_product_relevant", "maximum_people", "is_final", "archived", "updated_at", "created_at"}
	taskPrimaryKeyColumns     = []string{"id"}
)

type (
	// TaskSlice is an alias for a slice of pointers to Task.
	// This should generally be used opposed to []Task.
	TaskSlice []*Task
	// TaskHook is the signature for custom Task hook methods
	TaskHook func(boil.Executor, *Task) error

	taskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskType                 = reflect.TypeOf(&Task{})
	taskMapping              = queries.MakeStructMapping(taskType)
	taskPrimaryKeyMapping, _ = queries.BindMapping(taskType, taskMapping, taskPrimaryKeyColumns)
	taskInsertCacheMut       sync.RWMutex
	taskInsertCache          = make(map[string]insertCache)
	taskUpdateCacheMut       sync.RWMutex
	taskUpdateCache          = make(map[string]updateCache)
	taskUpsertCacheMut       sync.RWMutex
	taskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskBeforeInsertHooks []TaskHook
var taskBeforeUpdateHooks []TaskHook
var taskBeforeDeleteHooks []TaskHook
var taskBeforeUpsertHooks []TaskHook

var taskAfterInsertHooks []TaskHook
var taskAfterSelectHooks []TaskHook
var taskAfterUpdateHooks []TaskHook
var taskAfterDeleteHooks []TaskHook
var taskAfterUpsertHooks []TaskHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Task) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Task) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taskBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Task) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taskBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Task) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Task) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Task) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range taskAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Task) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taskAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Task) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taskAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Task) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskHook registers your hook function for all future operations.
func AddTaskHook(hookPoint boil.HookPoint, taskHook TaskHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		taskBeforeInsertHooks = append(taskBeforeInsertHooks, taskHook)
	case boil.BeforeUpdateHook:
		taskBeforeUpdateHooks = append(taskBeforeUpdateHooks, taskHook)
	case boil.BeforeDeleteHook:
		taskBeforeDeleteHooks = append(taskBeforeDeleteHooks, taskHook)
	case boil.BeforeUpsertHook:
		taskBeforeUpsertHooks = append(taskBeforeUpsertHooks, taskHook)
	case boil.AfterInsertHook:
		taskAfterInsertHooks = append(taskAfterInsertHooks, taskHook)
	case boil.AfterSelectHook:
		taskAfterSelectHooks = append(taskAfterSelectHooks, taskHook)
	case boil.AfterUpdateHook:
		taskAfterUpdateHooks = append(taskAfterUpdateHooks, taskHook)
	case boil.AfterDeleteHook:
		taskAfterDeleteHooks = append(taskAfterDeleteHooks, taskHook)
	case boil.AfterUpsertHook:
		taskAfterUpsertHooks = append(taskAfterUpsertHooks, taskHook)
	}
}

// One returns a single task record from the query.
func (q taskQuery) One(exec boil.Executor) (*Task, error) {
	o := &Task{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for tasks")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Task records from the query.
func (q taskQuery) All(exec boil.Executor) (TaskSlice, error) {
	var o []*Task

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Task slice")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Task records in the query.
func (q taskQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count tasks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taskQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if tasks exists")
	}

	return count > 0, nil
}

// Sku pointed to by the foreign key.
func (o *Task) Sku(mods ...qm.QueryMod) stockKeepingUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkuID),
	}

	queryMods = append(queryMods, mods...)

	query := StockKeepingUnits(queryMods...)
	queries.SetFrom(query.Query, "\"stock_keeping_units\"")

	return query
}

// Subtasks retrieves all the subtask's Subtasks with an executor.
func (o *Task) Subtasks(mods ...qm.QueryMod) subtaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subtasks\".\"task_id\"=?", o.ID),
	)

	query := Subtasks(queryMods...)
	queries.SetFrom(query.Query, "\"subtasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subtasks\".*"})
	}

	return query
}

// UserTasks retrieves all the user_task's UserTasks with an executor.
func (o *Task) UserTasks(mods ...qm.QueryMod) userTaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_tasks\".\"task_id\"=?", o.ID),
	)

	query := UserTasks(queryMods...)
	queries.SetFrom(query.Query, "\"user_tasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_tasks\".*"})
	}

	return query
}

// LoadSku allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taskL) LoadSku(e boil.Executor, singular bool, maybeTask interface{}, mods queries.Applicator) error {
	var slice []*Task
	var object *Task

	if singular {
		object = maybeTask.(*Task)
	} else {
		slice = *maybeTask.(*[]*Task)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskR{}
		}
		if !queries.IsNil(object.SkuID) {
			args = append(args, object.SkuID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SkuID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SkuID) {
				args = append(args, obj.SkuID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stock_keeping_units`), qm.WhereIn(`stock_keeping_units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StockKeepingUnit")
	}

	var resultSlice []*StockKeepingUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StockKeepingUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stock_keeping_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock_keeping_units")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sku = foreign
		if foreign.R == nil {
			foreign.R = &stockKeepingUnitR{}
		}
		foreign.R.SkuTasks = append(foreign.R.SkuTasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SkuID, foreign.ID) {
				local.R.Sku = foreign
				if foreign.R == nil {
					foreign.R = &stockKeepingUnitR{}
				}
				foreign.R.SkuTasks = append(foreign.R.SkuTasks, local)
				break
			}
		}
	}

	return nil
}

// LoadSubtasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taskL) LoadSubtasks(e boil.Executor, singular bool, maybeTask interface{}, mods queries.Applicator) error {
	var slice []*Task
	var object *Task

	if singular {
		object = maybeTask.(*Task)
	} else {
		slice = *maybeTask.(*[]*Task)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subtasks`), qm.WhereIn(`subtasks.task_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subtasks")
	}

	var resultSlice []*Subtask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subtasks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subtasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subtasks")
	}

	if len(subtaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Subtasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subtaskR{}
			}
			foreign.R.Task = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TaskID) {
				local.R.Subtasks = append(local.R.Subtasks, foreign)
				if foreign.R == nil {
					foreign.R = &subtaskR{}
				}
				foreign.R.Task = local
				break
			}
		}
	}

	return nil
}

// LoadUserTasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taskL) LoadUserTasks(e boil.Executor, singular bool, maybeTask interface{}, mods queries.Applicator) error {
	var slice []*Task
	var object *Task

	if singular {
		object = maybeTask.(*Task)
	} else {
		slice = *maybeTask.(*[]*Task)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user_tasks`), qm.WhereIn(`user_tasks.task_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_tasks")
	}

	var resultSlice []*UserTask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_tasks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_tasks")
	}

	if len(userTaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserTasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userTaskR{}
			}
			foreign.R.Task = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TaskID) {
				local.R.UserTasks = append(local.R.UserTasks, foreign)
				if foreign.R == nil {
					foreign.R = &userTaskR{}
				}
				foreign.R.Task = local
				break
			}
		}
	}

	return nil
}

// SetSku of the task to the related item.
// Sets o.R.Sku to related.
// Adds o to related.R.SkuTasks.
func (o *Task) SetSku(exec boil.Executor, insert bool, related *StockKeepingUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
		strmangle.WhereClause("\"", "\"", 2, taskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SkuID, related.ID)
	if o.R == nil {
		o.R = &taskR{
			Sku: related,
		}
	} else {
		o.R.Sku = related
	}

	if related.R == nil {
		related.R = &stockKeepingUnitR{
			SkuTasks: TaskSlice{o},
		}
	} else {
		related.R.SkuTasks = append(related.R.SkuTasks, o)
	}

	return nil
}

// RemoveSku relationship.
// Sets o.R.Sku to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Task) RemoveSku(exec boil.Executor, related *StockKeepingUnit) error {
	var err error

	queries.SetScanner(&o.SkuID, nil)
	if _, err = o.Update(exec, boil.Whitelist("sku_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sku = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SkuTasks {
		if queries.Equal(o.SkuID, ri.SkuID) {
			continue
		}

		ln := len(related.R.SkuTasks)
		if ln > 1 && i < ln-1 {
			related.R.SkuTasks[i] = related.R.SkuTasks[ln-1]
		}
		related.R.SkuTasks = related.R.SkuTasks[:ln-1]
		break
	}
	return nil
}

// AddSubtasks adds the given related objects to the existing relationships
// of the task, optionally inserting them as new records.
// Appends related to o.R.Subtasks.
// Sets related.R.Task appropriately.
func (o *Task) AddSubtasks(exec boil.Executor, insert bool, related ...*Subtask) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TaskID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subtasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
				strmangle.WhereClause("\"", "\"", 2, subtaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TaskID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &taskR{
			Subtasks: related,
		}
	} else {
		o.R.Subtasks = append(o.R.Subtasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subtaskR{
				Task: o,
			}
		} else {
			rel.R.Task = o
		}
	}
	return nil
}

// SetSubtasks removes all previously related items of the
// task replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Task's Subtasks accordingly.
// Replaces o.R.Subtasks with related.
// Sets related.R.Task's Subtasks accordingly.
func (o *Task) SetSubtasks(exec boil.Executor, insert bool, related ...*Subtask) error {
	query := "update \"subtasks\" set \"task_id\" = null where \"task_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Subtasks {
			queries.SetScanner(&rel.TaskID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Task = nil
		}

		o.R.Subtasks = nil
	}
	return o.AddSubtasks(exec, insert, related...)
}

// RemoveSubtasks relationships from objects passed in.
// Removes related items from R.Subtasks (uses pointer comparison, removal does not keep order)
// Sets related.R.Task.
func (o *Task) RemoveSubtasks(exec boil.Executor, related ...*Subtask) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TaskID, nil)
		if rel.R != nil {
			rel.R.Task = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("task_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Subtasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.Subtasks)
			if ln > 1 && i < ln-1 {
				o.R.Subtasks[i] = o.R.Subtasks[ln-1]
			}
			o.R.Subtasks = o.R.Subtasks[:ln-1]
			break
		}
	}

	return nil
}

// AddUserTasks adds the given related objects to the existing relationships
// of the task, optionally inserting them as new records.
// Appends related to o.R.UserTasks.
// Sets related.R.Task appropriately.
func (o *Task) AddUserTasks(exec boil.Executor, insert bool, related ...*UserTask) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TaskID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_tasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
				strmangle.WhereClause("\"", "\"", 2, userTaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TaskID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &taskR{
			UserTasks: related,
		}
	} else {
		o.R.UserTasks = append(o.R.UserTasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userTaskR{
				Task: o,
			}
		} else {
			rel.R.Task = o
		}
	}
	return nil
}

// SetUserTasks removes all previously related items of the
// task replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Task's UserTasks accordingly.
// Replaces o.R.UserTasks with related.
// Sets related.R.Task's UserTasks accordingly.
func (o *Task) SetUserTasks(exec boil.Executor, insert bool, related ...*UserTask) error {
	query := "update \"user_tasks\" set \"task_id\" = null where \"task_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserTasks {
			queries.SetScanner(&rel.TaskID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Task = nil
		}

		o.R.UserTasks = nil
	}
	return o.AddUserTasks(exec, insert, related...)
}

// RemoveUserTasks relationships from objects passed in.
// Removes related items from R.UserTasks (uses pointer comparison, removal does not keep order)
// Sets related.R.Task.
func (o *Task) RemoveUserTasks(exec boil.Executor, related ...*UserTask) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TaskID, nil)
		if rel.R != nil {
			rel.R.Task = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("task_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserTasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserTasks)
			if ln > 1 && i < ln-1 {
				o.R.UserTasks[i] = o.R.UserTasks[ln-1]
			}
			o.R.UserTasks = o.R.UserTasks[:ln-1]
			break
		}
	}

	return nil
}

// Tasks retrieves all the records using an executor.
func Tasks(mods ...qm.QueryMod) taskQuery {
	mods = append(mods, qm.From("\"tasks\""))
	return taskQuery{NewQuery(mods...)}
}

// FindTask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTask(exec boil.Executor, iD string, selectCols ...string) (*Task, error) {
	taskObj := &Task{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tasks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, taskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from tasks")
	}

	return taskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Task) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no tasks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskInsertCacheMut.RLock()
	cache, cached := taskInsertCache[key]
	taskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskAllColumns,
			taskColumnsWithDefault,
			taskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taskType, taskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskType, taskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tasks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tasks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into tasks")
	}

	if !cached {
		taskInsertCacheMut.Lock()
		taskInsertCache[key] = cache
		taskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Task.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Task) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskUpdateCacheMut.RLock()
	cache, cached := taskUpdateCache[key]
	taskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskAllColumns,
			taskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update tasks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tasks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskType, taskMapping, append(wl, taskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update tasks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for tasks")
	}

	if !cached {
		taskUpdateCacheMut.Lock()
		taskUpdateCache[key] = cache
		taskUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q taskQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for tasks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taskPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in task slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all task")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Task) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no tasks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskUpsertCacheMut.RLock()
	cache, cached := taskUpsertCache[key]
	taskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskAllColumns,
			taskColumnsWithDefault,
			taskColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			taskAllColumns,
			taskPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert tasks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taskPrimaryKeyColumns))
			copy(conflict, taskPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tasks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taskType, taskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskType, taskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert tasks")
	}

	if !cached {
		taskUpsertCacheMut.Lock()
		taskUpsertCache[key] = cache
		taskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Task record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Task) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Task provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskPrimaryKeyMapping)
	sql := "DELETE FROM \"tasks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for tasks")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taskQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no taskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for tasks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from task slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for tasks")
	}

	if len(taskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Task) Reload(exec boil.Executor) error {
	ret, err := FindTask(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tasks\".* FROM \"tasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TaskSlice")
	}

	*o = slice

	return nil
}

// TaskExists checks if the Task row exists.
func TaskExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tasks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if tasks exists")
	}

	return exists, nil
}
