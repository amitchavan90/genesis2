type Subtask {
	id: ID!
	title: String!
	description: String!
}
type Task {
	id: ID!
	code: String!
	title: String!
	description: String!
	loyaltyPoints: Int!
	isTimeBound: Boolean!
	isPeopleBound: Boolean!
	isProductRelevant: Boolean!
	isFinal: Boolean!
	finishDate: Time
	maximumPeople: Int!
    skuID: NullString
	sku: SKU
	archived: Boolean!
	createdAt: Time!
	subtasks: [Subtask!]!
}

type TasksResult {
	tasks: [Task!]!
	total: Int!
}

input UpdateSubtask {
	title: String!
	description: String!
}

input UpdateTask {
	title: String!
	description: String!
	loyaltyPoints: Int!
	
	isTimeBound: Boolean!
	isPeopleBound: Boolean!
	isProductRelevant: Boolean!
	isFinal: Boolean
	
	finishDate: Time
	maximumPeople: Int!
    skuID: NullString
	subtasks: [UpdateSubtask]
}

extend type Query {
	tasks(search: SearchFilter!, limit: Int!, offset: Int!): TasksResult! @hasPerm(p: TaskList)
	task(id: String): Task! @hasPerm(p: TaskRead)
}

extend type Mutation {
	taskCreate(input: UpdateTask!): Task! @hasPerm(p: TaskCreate)
	taskUpdate(id: ID!, input: UpdateTask!): Task! @hasPerm(p: TaskUpdate)
	taskArchive(id: ID!): Task! @hasPerm(p: TaskArchive)
	taskUnarchive(id: ID!): Task! @hasPerm(p: TaskUnarchive)
}
