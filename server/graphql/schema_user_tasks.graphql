type UserSubtask {
	id: ID!
	# subtask: Subtask
	isComplete: Boolean!
	status: String!
	createdAt: Time!
}
type UserTask {
	id: ID!
	task: Task!
	user: User!
	status: String!
	isComplete: Boolean!
	userSubtasks: [UserSubtask!]!
	createdAt: Time!
}

type UserTasksResult {
	userTasks: [UserTask!]!
	total: Int!
}

input UpdateUserTask {
	taskID: String!
}

extend type Query {
	userTasks(search: SearchFilter!, limit: Int!, offset: Int!): UserTasksResult! @hasPerm(p: UserTaskList)
	userTask(code: String): UserTask! @hasPerm(p: UserTaskRead)
}

extend type Mutation {
	userTaskCreate(input: UpdateUserTask!): UserTask! @hasPerm(p: UserTaskCreate)
	userTaskUpdate(id: ID!, input: UpdateUserTask!): UserTask! @hasPerm(p: UserTaskUpdate)
	userTaskApprove(id: ID!): UserTask! @hasPerm(p: UserTaskUpdate)
}
